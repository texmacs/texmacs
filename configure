#! /bin/sh
# Guess values for system-dependent variables and create Makefiles.
# Generated by GNU Autoconf 2.69.
#
#
# Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
#
#
# This configure script is free software; the Free Software Foundation
# gives unlimited permission to copy, distribute and modify it.
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in #(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

# Use a proper internal environment variable to ensure we don't fall
  # into an infinite loop, continuously re-executing ourselves.
  if test x"${_as_can_reexec}" != xno && test "x$CONFIG_SHELL" != x; then
    _as_can_reexec=no; export _as_can_reexec;
    # We cannot yet assume a decent shell, so we have to provide a
# neutralization value for shells without unset; and this also
# works around shells that cannot unset nonexistent variables.
# Preserve -v and -x to the replacement shell.
BASH_ENV=/dev/null
ENV=/dev/null
(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
case $- in # ((((
  *v*x* | *x*v* ) as_opts=-vx ;;
  *v* ) as_opts=-v ;;
  *x* ) as_opts=-x ;;
  * ) as_opts= ;;
esac
exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
# Admittedly, this is quite paranoid, since all the known shells bail
# out after a failed `exec'.
$as_echo "$0: could not re-execute with $CONFIG_SHELL" >&2
as_fn_exit 255
  fi
  # We don't want this to propagate to other subprocesses.
          { _as_can_reexec=; unset _as_can_reexec;}
if test "x$CONFIG_SHELL" = x; then
  as_bourne_compatible="if test -n \"\${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '\${1+\"\$@\"}'='\"\$@\"'
  setopt NO_GLOB_SUBST
else
  case \`(set -o) 2>/dev/null\` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi
"
  as_required="as_fn_return () { (exit \$1); }
as_fn_success () { as_fn_return 0; }
as_fn_failure () { as_fn_return 1; }
as_fn_ret_success () { return 0; }
as_fn_ret_failure () { return 1; }

exitcode=0
as_fn_success || { exitcode=1; echo as_fn_success failed.; }
as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
if ( set x; as_fn_ret_success y && test x = \"\$1\" ); then :

else
  exitcode=1; echo positional parameters were not saved.
fi
test x\$exitcode = x0 || exit 1
test -x / || exit 1"
  as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
  as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
  eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
  test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1
test \$(( 1 + 1 )) = 2 || exit 1"
  if (eval "$as_required") 2>/dev/null; then :
  as_have_required=yes
else
  as_have_required=no
fi
  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null; then :

else
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_found=false
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  as_found=:
  case $as_dir in #(
	 /*)
	   for as_base in sh bash ksh sh5; do
	     # Try only shells that exist, to save several forks.
	     as_shell=$as_dir/$as_base
	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		    { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$as_shell"; } 2>/dev/null; then :
  CONFIG_SHELL=$as_shell as_have_required=yes
		   if { $as_echo "$as_bourne_compatible""$as_suggested" | as_run=a "$as_shell"; } 2>/dev/null; then :
  break 2
fi
fi
	   done;;
       esac
  as_found=false
done
$as_found || { if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
	      { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$SHELL"; } 2>/dev/null; then :
  CONFIG_SHELL=$SHELL as_have_required=yes
fi; }
IFS=$as_save_IFS


      if test "x$CONFIG_SHELL" != x; then :
  export CONFIG_SHELL
             # We cannot yet assume a decent shell, so we have to provide a
# neutralization value for shells without unset; and this also
# works around shells that cannot unset nonexistent variables.
# Preserve -v and -x to the replacement shell.
BASH_ENV=/dev/null
ENV=/dev/null
(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
case $- in # ((((
  *v*x* | *x*v* ) as_opts=-vx ;;
  *v* ) as_opts=-v ;;
  *x* ) as_opts=-x ;;
  * ) as_opts= ;;
esac
exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
# Admittedly, this is quite paranoid, since all the known shells bail
# out after a failed `exec'.
$as_echo "$0: could not re-execute with $CONFIG_SHELL" >&2
exit 255
fi

    if test x$as_have_required = xno; then :
  $as_echo "$0: This script requires a shell more modern than all"
  $as_echo "$0: the shells that I found on your system."
  if test x${ZSH_VERSION+set} = xset ; then
    $as_echo "$0: In particular, zsh $ZSH_VERSION has bugs and should"
    $as_echo "$0: be upgraded to zsh 4.3.4 or later."
  else
    $as_echo "$0: Please tell bug-autoconf@gnu.org about your system,
$0: including any error possibly output before this
$0: message. Then install a modern shell, or manually run
$0: the script under such a shell if you do have one."
  fi
  exit 1
fi
fi
fi
SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
# Unset more variables known to interfere with behavior of common tools.
CLICOLOR_FORCE= GREP_OPTIONS=
unset CLICOLOR_FORCE GREP_OPTIONS

## --------------------- ##
## M4sh Shell Functions. ##
## --------------------- ##
# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset

# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit

# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} # as_fn_mkdir_p

# as_fn_executable_p FILE
# -----------------------
# Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} # as_fn_executable_p
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits


  as_lineno_1=$LINENO as_lineno_1a=$LINENO
  as_lineno_2=$LINENO as_lineno_2a=$LINENO
  eval 'test "x$as_lineno_1'$as_run'" != "x$as_lineno_2'$as_run'" &&
  test "x`expr $as_lineno_1'$as_run' + 1`" = "x$as_lineno_2'$as_run'"' || {
  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { $as_echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }

  # If we had to re-execute with $CONFIG_SHELL, we're ensured to have
  # already done that, so ensure we don't try to do so again and fall
  # in an infinite loop.  This has already happened in practice.
  _as_can_reexec=no; export _as_can_reexec
  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -pR'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -pR'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -pR'
  fi
else
  as_ln_s='cp -pR'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

as_test_x='test -x'
as_executable_p=as_fn_executable_p

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"


test -n "$DJDIR" || exec 7<&0 </dev/null
exec 6>&1

# Name of the host.
# hostname on some systems (SVR3.2, old GNU/Linux) returns a bogus exit status,
# so uname gets run too.
ac_hostname=`(hostname || uname -n) 2>/dev/null | sed 1q`

#
# Initializations.
#
ac_default_prefix=/usr/local
ac_clean_files=
ac_config_libobj_dir=.
LIBOBJS=
cross_compiling=no
subdirs=
MFLAGS=
MAKEFLAGS=

# Identity of this package.
PACKAGE_NAME=
PACKAGE_TARNAME=
PACKAGE_VERSION=
PACKAGE_STRING=
PACKAGE_BUGREPORT=
PACKAGE_URL=

# Factoring default headers for most tests.
ac_includes_default="\
#include <stdio.h>
#ifdef HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif
#ifdef HAVE_SYS_STAT_H
# include <sys/stat.h>
#endif
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif
#ifdef HAVE_STRING_H
# if !defined STDC_HEADERS && defined HAVE_MEMORY_H
#  include <memory.h>
# endif
# include <string.h>
#endif
#ifdef HAVE_STRINGS_H
# include <strings.h>
#endif
#ifdef HAVE_INTTYPES_H
# include <inttypes.h>
#endif
#ifdef HAVE_STDINT_H
# include <stdint.h>
#endif
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif"

enable_option_checking=no
ac_subst_vars='subdirs_extra
LTLIBOBJS
LIBOBJS
SIGNID
tm_windows_release
tm_underscore_stable
tm_stable_release
tm_stable
tm_debian_name_devel
tm_devel_release
tm_devel
tmdata
tmbin
tmsrc
tmdir
tmorig
PREPROC
CONFIG_EXPERIMENTAL
CONFIG_CHECKS
DEBUG_RC
CONFIG_CXXDIALECT
PDF_LIBS
PDF_LDFLAGS
PDF_CFLAGS
PDF_CPP
PDF_CXX
CONFIG_PDF
QT_PLUGINS_LIST
QT_PLUGINS_PATH
QT_FRAMEWORKS_PATH
CONFIG_GUI_DEFINE
CONFIG_GUI
CONFIG_QT
CONFIG_COCOA
CONFIG_X11
COCOA_LDFLAGS
COCOA_CFLAGS
X_EXTRA_LIBS
X_LIBS
X_PRE_LIBS
X_CFLAGS
X11_LIBS
X11_LDFLAGS
X11_CFLAGS
X11_CPP
X11_CXX
XMKMF
QT_LIBS
QT_LDFLAGS
QT_LFLAGS
QT_CPPFLAGS
QT_INCPATH
QT_CXXFLAGS
QT_CFLAGS
QT_DEFINES
QT_VERSION_MAJOR
RCC
UIC
MOC
QT_PATH
QMAKE
ASPELL_CMD
XTRA_CMD
MACOSX_TARGET
OSXVERMIN
APPCAST
SPARKLE_LIBS
SPARKLE_LDFLAGS
SPARKLE_CFLAGS
SPARKLE_CPP
SPARKLE_CXX
WINSPARKLE_PATH
WINSPARKLE_DLL
CONFIG_SPARKLE
SQLITE3_LIBS
SQLITE3_LDFLAGS
SQLITE3_CFLAGS
SQLITE3_CPP
SQLITE3_CXX
GS_FONTS
GS_LIB
GS_EXE
CONFIG_GS
AXEL_LIBS
AXEL_LDFLAGS
AXEL_CFLAGS
AXEL_CPP
AXEL_CXX
IMLIB2_LIBS
IMLIB2_LDFLAGS
IMLIB2_CFLAGS
IMLIB2_CPP
IMLIB2_CXX
CAIRO_LIBS
CAIRO_LDFLAGS
CAIRO_CFLAGS
CAIRO_CPP
CAIRO_CXX
FREETYPE_LIBS
FREETYPE_LDFLAGS
FREETYPE_CFLAGS
FREETYPE_CPP
FREETYPE_CXX
FREETYPE_tmp1
ICONV_LIBS
ICONV_LDFLAGS
ICONV_CFLAGS
ICONV_CPP
ICONV_CXX
GUILE_LIBS
GUILE_LDFLAGS
GUILE_CFLAGS
GUILE_CPP
GUILE_CXX
GUILE_DATA_PATH
DIRGUILE
GUILE_CONFIG
GUILE_STATIC
CLNGUILE
MKGUILE
CONFIG_CP
CONFIG_ARCHS
CONFIG_DATE
CONFIG_USER
CONFIG_HOST_VENDOR
CONFIG_HOST_OS
CONFIG_LDRT
CONFIG_CHMOD
CONFIG_STRIP
CONFIG_LIB_PATH
CONFIG_SO
CONFIG_STD_SETENV
CONFIG_CXXFLAGS
CONFIG_BPATH
CONFIG_BSHARED
CONFIG_STYPE
CONFIG_BSTATIC
CONFIG_BFLAGS
CONFIG_CXXPROFILE
CONFIG_CXXDEBUG
CONFIG_CXXOPTIMIZE
CONFIG_CXXTEMPLATE
CONFIG_CXXWARNING
CONFIG_MACOS
CONFIG_OS_COMPAT
CONFIG_OS_SUFFIX
CONFIG_OS
CONFIG_BUNDLE
CONFIG_PACKAGE
PKGPATH
REPOPATH
TMREPO
EGREP
GREP
CXXCPP
ac_ct_OBJCXX
OBJCXXFLAGS
OBJCXX
ac_ct_OBJC
OBJCFLAGS
OBJC
ac_ct_CXX
CXXFLAGS
CXX
OBJEXT
EXEEXT
ac_ct_CC
CPPFLAGS
LDFLAGS
CFLAGS
CC
SVNPATCH
REVISION
SVNREV
VERSION_BUILD
VERSION_MINOR
VERSION_MAJOR
STABLE_RELEASE
STABLE_VERSION
DEVEL_RELEASE
DEVEL_VERSION
PACKAGE
host_os
host_vendor
host_cpu
host
build_os
build_vendor
build_cpu
build
target_alias
host_alias
build_alias
LIBS
ECHO_T
ECHO_N
ECHO_C
DEFS
mandir
localedir
libdir
psdir
pdfdir
dvidir
htmldir
infodir
docdir
oldincludedir
includedir
localstatedir
sharedstatedir
sysconfdir
datadir
datarootdir
libexecdir
sbindir
bindir
program_transform_name
prefix
exec_prefix
PACKAGE_URL
PACKAGE_BUGREPORT
PACKAGE_STRING
PACKAGE_VERSION
PACKAGE_TARNAME
PACKAGE_NAME
PATH_SEPARATOR
SHELL'
ac_subst_files=''
ac_user_opts='
enable_option_checking
enable_dumpflags
with_tmrepo
enable_static
with_guile
enable_guile2
with_iconv
with_freetype
with_cairo
with_imlib2
with_axel
enable_gs
with_sqlite3
with_sparkle
with_appcast
enable_fastalloc
enable_macosx_extensions
with_sdk
with_osx
enable_console
enable_qt
with_qt
with_x
enable_qtpipes
enable_cocoa
enable_pdf_renderer
enable_profile
enable_debug
enable_assert
enable_warnings
enable_checks
enable_experimental
enable_preproc
enable_optimize
enable_sign
'
      ac_precious_vars='build_alias
host_alias
target_alias
CC
CFLAGS
LDFLAGS
LIBS
CPPFLAGS
CXX
CXXFLAGS
CCC
OBJC
OBJCFLAGS
OBJCXX
OBJCXXFLAGS
CXXCPP
QT_PATH
QMAKE
MOC
UIC
RCC
XMKMF'


# Initialize some variables set by options.
ac_init_help=
ac_init_version=false
ac_unrecognized_opts=
ac_unrecognized_sep=
# The variables have the same names as the options, with
# dashes changed to underlines.
cache_file=/dev/null
exec_prefix=NONE
no_create=
no_recursion=
prefix=NONE
program_prefix=NONE
program_suffix=NONE
program_transform_name=s,x,x,
silent=
site=
srcdir=
verbose=
x_includes=NONE
x_libraries=NONE

# Installation directory options.
# These are left unexpanded so users can "make install exec_prefix=/foo"
# and all the variables that are supposed to be based on exec_prefix
# by default will actually change.
# Use braces instead of parens because sh, perl, etc. also accept them.
# (The list follows the same order as the GNU Coding Standards.)
bindir='${exec_prefix}/bin'
sbindir='${exec_prefix}/sbin'
libexecdir='${exec_prefix}/libexec'
datarootdir='${prefix}/share'
datadir='${datarootdir}'
sysconfdir='${prefix}/etc'
sharedstatedir='${prefix}/com'
localstatedir='${prefix}/var'
includedir='${prefix}/include'
oldincludedir='/usr/include'
docdir='${datarootdir}/doc/${PACKAGE}'
infodir='${datarootdir}/info'
htmldir='${docdir}'
dvidir='${docdir}'
pdfdir='${docdir}'
psdir='${docdir}'
libdir='${exec_prefix}/lib'
localedir='${datarootdir}/locale'
mandir='${datarootdir}/man'

ac_prev=
ac_dashdash=
for ac_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$ac_prev"; then
    eval $ac_prev=\$ac_option
    ac_prev=
    continue
  fi

  case $ac_option in
  *=?*) ac_optarg=`expr "X$ac_option" : '[^=]*=\(.*\)'` ;;
  *=)   ac_optarg= ;;
  *)    ac_optarg=yes ;;
  esac

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $ac_dashdash$ac_option in
  --)
    ac_dashdash=yes ;;

  -bindir | --bindir | --bindi | --bind | --bin | --bi)
    ac_prev=bindir ;;
  -bindir=* | --bindir=* | --bindi=* | --bind=* | --bin=* | --bi=*)
    bindir=$ac_optarg ;;

  -build | --build | --buil | --bui | --bu)
    ac_prev=build_alias ;;
  -build=* | --build=* | --buil=* | --bui=* | --bu=*)
    build_alias=$ac_optarg ;;

  -cache-file | --cache-file | --cache-fil | --cache-fi \
  | --cache-f | --cache- | --cache | --cach | --cac | --ca | --c)
    ac_prev=cache_file ;;
  -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \
  | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* | --c=*)
    cache_file=$ac_optarg ;;

  --config-cache | -C)
    cache_file=config.cache ;;

  -datadir | --datadir | --datadi | --datad)
    ac_prev=datadir ;;
  -datadir=* | --datadir=* | --datadi=* | --datad=*)
    datadir=$ac_optarg ;;

  -datarootdir | --datarootdir | --datarootdi | --datarootd | --dataroot \
  | --dataroo | --dataro | --datar)
    ac_prev=datarootdir ;;
  -datarootdir=* | --datarootdir=* | --datarootdi=* | --datarootd=* \
  | --dataroot=* | --dataroo=* | --dataro=* | --datar=*)
    datarootdir=$ac_optarg ;;

  -disable-* | --disable-*)
    ac_useropt=`expr "x$ac_option" : 'x-*disable-\(.*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
      as_fn_error $? "invalid feature name: $ac_useropt"
    ac_useropt_orig=$ac_useropt
    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
    case $ac_user_opts in
      *"
"enable_$ac_useropt"
"*) ;;
      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--disable-$ac_useropt_orig"
	 ac_unrecognized_sep=', ';;
    esac
    eval enable_$ac_useropt=no ;;

  -docdir | --docdir | --docdi | --doc | --do)
    ac_prev=docdir ;;
  -docdir=* | --docdir=* | --docdi=* | --doc=* | --do=*)
    docdir=$ac_optarg ;;

  -dvidir | --dvidir | --dvidi | --dvid | --dvi | --dv)
    ac_prev=dvidir ;;
  -dvidir=* | --dvidir=* | --dvidi=* | --dvid=* | --dvi=* | --dv=*)
    dvidir=$ac_optarg ;;

  -enable-* | --enable-*)
    ac_useropt=`expr "x$ac_option" : 'x-*enable-\([^=]*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
      as_fn_error $? "invalid feature name: $ac_useropt"
    ac_useropt_orig=$ac_useropt
    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
    case $ac_user_opts in
      *"
"enable_$ac_useropt"
"*) ;;
      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--enable-$ac_useropt_orig"
	 ac_unrecognized_sep=', ';;
    esac
    eval enable_$ac_useropt=\$ac_optarg ;;

  -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi \
  | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- \
  | --exec | --exe | --ex)
    ac_prev=exec_prefix ;;
  -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* \
  | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* \
  | --exec=* | --exe=* | --ex=*)
    exec_prefix=$ac_optarg ;;

  -gas | --gas | --ga | --g)
    # Obsolete; use --with-gas.
    with_gas=yes ;;

  -help | --help | --hel | --he | -h)
    ac_init_help=long ;;
  -help=r* | --help=r* | --hel=r* | --he=r* | -hr*)
    ac_init_help=recursive ;;
  -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
    ac_init_help=short ;;

  -host | --host | --hos | --ho)
    ac_prev=host_alias ;;
  -host=* | --host=* | --hos=* | --ho=*)
    host_alias=$ac_optarg ;;

  -htmldir | --htmldir | --htmldi | --htmld | --html | --htm | --ht)
    ac_prev=htmldir ;;
  -htmldir=* | --htmldir=* | --htmldi=* | --htmld=* | --html=* | --htm=* \
  | --ht=*)
    htmldir=$ac_optarg ;;

  -includedir | --includedir | --includedi | --included | --include \
  | --includ | --inclu | --incl | --inc)
    ac_prev=includedir ;;
  -includedir=* | --includedir=* | --includedi=* | --included=* | --include=* \
  | --includ=* | --inclu=* | --incl=* | --inc=*)
    includedir=$ac_optarg ;;

  -infodir | --infodir | --infodi | --infod | --info | --inf)
    ac_prev=infodir ;;
  -infodir=* | --infodir=* | --infodi=* | --infod=* | --info=* | --inf=*)
    infodir=$ac_optarg ;;

  -libdir | --libdir | --libdi | --libd)
    ac_prev=libdir ;;
  -libdir=* | --libdir=* | --libdi=* | --libd=*)
    libdir=$ac_optarg ;;

  -libexecdir | --libexecdir | --libexecdi | --libexecd | --libexec \
  | --libexe | --libex | --libe)
    ac_prev=libexecdir ;;
  -libexecdir=* | --libexecdir=* | --libexecdi=* | --libexecd=* | --libexec=* \
  | --libexe=* | --libex=* | --libe=*)
    libexecdir=$ac_optarg ;;

  -localedir | --localedir | --localedi | --localed | --locale)
    ac_prev=localedir ;;
  -localedir=* | --localedir=* | --localedi=* | --localed=* | --locale=*)
    localedir=$ac_optarg ;;

  -localstatedir | --localstatedir | --localstatedi | --localstated \
  | --localstate | --localstat | --localsta | --localst | --locals)
    ac_prev=localstatedir ;;
  -localstatedir=* | --localstatedir=* | --localstatedi=* | --localstated=* \
  | --localstate=* | --localstat=* | --localsta=* | --localst=* | --locals=*)
    localstatedir=$ac_optarg ;;

  -mandir | --mandir | --mandi | --mand | --man | --ma | --m)
    ac_prev=mandir ;;
  -mandir=* | --mandir=* | --mandi=* | --mand=* | --man=* | --ma=* | --m=*)
    mandir=$ac_optarg ;;

  -nfp | --nfp | --nf)
    # Obsolete; use --without-fp.
    with_fp=no ;;

  -no-create | --no-create | --no-creat | --no-crea | --no-cre \
  | --no-cr | --no-c | -n)
    no_create=yes ;;

  -no-recursion | --no-recursion | --no-recursio | --no-recursi \
  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r)
    no_recursion=yes ;;

  -oldincludedir | --oldincludedir | --oldincludedi | --oldincluded \
  | --oldinclude | --oldinclud | --oldinclu | --oldincl | --oldinc \
  | --oldin | --oldi | --old | --ol | --o)
    ac_prev=oldincludedir ;;
  -oldincludedir=* | --oldincludedir=* | --oldincludedi=* | --oldincluded=* \
  | --oldinclude=* | --oldinclud=* | --oldinclu=* | --oldincl=* | --oldinc=* \
  | --oldin=* | --oldi=* | --old=* | --ol=* | --o=*)
    oldincludedir=$ac_optarg ;;

  -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
    ac_prev=prefix ;;
  -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
    prefix=$ac_optarg ;;

  -program-prefix | --program-prefix | --program-prefi | --program-pref \
  | --program-pre | --program-pr | --program-p)
    ac_prev=program_prefix ;;
  -program-prefix=* | --program-prefix=* | --program-prefi=* \
  | --program-pref=* | --program-pre=* | --program-pr=* | --program-p=*)
    program_prefix=$ac_optarg ;;

  -program-suffix | --program-suffix | --program-suffi | --program-suff \
  | --program-suf | --program-su | --program-s)
    ac_prev=program_suffix ;;
  -program-suffix=* | --program-suffix=* | --program-suffi=* \
  | --program-suff=* | --program-suf=* | --program-su=* | --program-s=*)
    program_suffix=$ac_optarg ;;

  -program-transform-name | --program-transform-name \
  | --program-transform-nam | --program-transform-na \
  | --program-transform-n | --program-transform- \
  | --program-transform | --program-transfor \
  | --program-transfo | --program-transf \
  | --program-trans | --program-tran \
  | --progr-tra | --program-tr | --program-t)
    ac_prev=program_transform_name ;;
  -program-transform-name=* | --program-transform-name=* \
  | --program-transform-nam=* | --program-transform-na=* \
  | --program-transform-n=* | --program-transform-=* \
  | --program-transform=* | --program-transfor=* \
  | --program-transfo=* | --program-transf=* \
  | --program-trans=* | --program-tran=* \
  | --progr-tra=* | --program-tr=* | --program-t=*)
    program_transform_name=$ac_optarg ;;

  -pdfdir | --pdfdir | --pdfdi | --pdfd | --pdf | --pd)
    ac_prev=pdfdir ;;
  -pdfdir=* | --pdfdir=* | --pdfdi=* | --pdfd=* | --pdf=* | --pd=*)
    pdfdir=$ac_optarg ;;

  -psdir | --psdir | --psdi | --psd | --ps)
    ac_prev=psdir ;;
  -psdir=* | --psdir=* | --psdi=* | --psd=* | --ps=*)
    psdir=$ac_optarg ;;

  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
  | -silent | --silent | --silen | --sile | --sil)
    silent=yes ;;

  -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
    ac_prev=sbindir ;;
  -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
  | --sbi=* | --sb=*)
    sbindir=$ac_optarg ;;

  -sharedstatedir | --sharedstatedir | --sharedstatedi \
  | --sharedstated | --sharedstate | --sharedstat | --sharedsta \
  | --sharedst | --shareds | --shared | --share | --shar \
  | --sha | --sh)
    ac_prev=sharedstatedir ;;
  -sharedstatedir=* | --sharedstatedir=* | --sharedstatedi=* \
  | --sharedstated=* | --sharedstate=* | --sharedstat=* | --sharedsta=* \
  | --sharedst=* | --shareds=* | --shared=* | --share=* | --shar=* \
  | --sha=* | --sh=*)
    sharedstatedir=$ac_optarg ;;

  -site | --site | --sit)
    ac_prev=site ;;
  -site=* | --site=* | --sit=*)
    site=$ac_optarg ;;

  -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)
    ac_prev=srcdir ;;
  -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)
    srcdir=$ac_optarg ;;

  -sysconfdir | --sysconfdir | --sysconfdi | --sysconfd | --sysconf \
  | --syscon | --sysco | --sysc | --sys | --sy)
    ac_prev=sysconfdir ;;
  -sysconfdir=* | --sysconfdir=* | --sysconfdi=* | --sysconfd=* | --sysconf=* \
  | --syscon=* | --sysco=* | --sysc=* | --sys=* | --sy=*)
    sysconfdir=$ac_optarg ;;

  -target | --target | --targe | --targ | --tar | --ta | --t)
    ac_prev=target_alias ;;
  -target=* | --target=* | --targe=* | --targ=* | --tar=* | --ta=* | --t=*)
    target_alias=$ac_optarg ;;

  -v | -verbose | --verbose | --verbos | --verbo | --verb)
    verbose=yes ;;

  -version | --version | --versio | --versi | --vers | -V)
    ac_init_version=: ;;

  -with-* | --with-*)
    ac_useropt=`expr "x$ac_option" : 'x-*with-\([^=]*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
      as_fn_error $? "invalid package name: $ac_useropt"
    ac_useropt_orig=$ac_useropt
    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
    case $ac_user_opts in
      *"
"with_$ac_useropt"
"*) ;;
      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--with-$ac_useropt_orig"
	 ac_unrecognized_sep=', ';;
    esac
    eval with_$ac_useropt=\$ac_optarg ;;

  -without-* | --without-*)
    ac_useropt=`expr "x$ac_option" : 'x-*without-\(.*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_useropt" : ".*[^-+._$as_cr_alnum]" >/dev/null &&
      as_fn_error $? "invalid package name: $ac_useropt"
    ac_useropt_orig=$ac_useropt
    ac_useropt=`$as_echo "$ac_useropt" | sed 's/[-+.]/_/g'`
    case $ac_user_opts in
      *"
"with_$ac_useropt"
"*) ;;
      *) ac_unrecognized_opts="$ac_unrecognized_opts$ac_unrecognized_sep--without-$ac_useropt_orig"
	 ac_unrecognized_sep=', ';;
    esac
    eval with_$ac_useropt=no ;;

  --x)
    # Obsolete; use --with-x.
    with_x=yes ;;

  -x-includes | --x-includes | --x-include | --x-includ | --x-inclu \
  | --x-incl | --x-inc | --x-in | --x-i)
    ac_prev=x_includes ;;
  -x-includes=* | --x-includes=* | --x-include=* | --x-includ=* | --x-inclu=* \
  | --x-incl=* | --x-inc=* | --x-in=* | --x-i=*)
    x_includes=$ac_optarg ;;

  -x-libraries | --x-libraries | --x-librarie | --x-librari \
  | --x-librar | --x-libra | --x-libr | --x-lib | --x-li | --x-l)
    ac_prev=x_libraries ;;
  -x-libraries=* | --x-libraries=* | --x-librarie=* | --x-librari=* \
  | --x-librar=* | --x-libra=* | --x-libr=* | --x-lib=* | --x-li=* | --x-l=*)
    x_libraries=$ac_optarg ;;

  -*) as_fn_error $? "unrecognized option: \`$ac_option'
Try \`$0 --help' for more information"
    ;;

  *=*)
    ac_envvar=`expr "x$ac_option" : 'x\([^=]*\)='`
    # Reject names that are not valid shell variable names.
    case $ac_envvar in #(
      '' | [0-9]* | *[!_$as_cr_alnum]* )
      as_fn_error $? "invalid variable name: \`$ac_envvar'" ;;
    esac
    eval $ac_envvar=\$ac_optarg
    export $ac_envvar ;;

  *)
    # FIXME: should be removed in autoconf 3.0.
    $as_echo "$as_me: WARNING: you should use --build, --host, --target" >&2
    expr "x$ac_option" : ".*[^-._$as_cr_alnum]" >/dev/null &&
      $as_echo "$as_me: WARNING: invalid host type: $ac_option" >&2
    : "${build_alias=$ac_option} ${host_alias=$ac_option} ${target_alias=$ac_option}"
    ;;

  esac
done

if test -n "$ac_prev"; then
  ac_option=--`echo $ac_prev | sed 's/_/-/g'`
  as_fn_error $? "missing argument to $ac_option"
fi

if test -n "$ac_unrecognized_opts"; then
  case $enable_option_checking in
    no) ;;
    fatal) as_fn_error $? "unrecognized options: $ac_unrecognized_opts" ;;
    *)     $as_echo "$as_me: WARNING: unrecognized options: $ac_unrecognized_opts" >&2 ;;
  esac
fi

# Check all directory arguments for consistency.
for ac_var in	exec_prefix prefix bindir sbindir libexecdir datarootdir \
		datadir sysconfdir sharedstatedir localstatedir includedir \
		oldincludedir docdir infodir htmldir dvidir pdfdir psdir \
		libdir localedir mandir
do
  eval ac_val=\$$ac_var
  # Remove trailing slashes.
  case $ac_val in
    */ )
      ac_val=`expr "X$ac_val" : 'X\(.*[^/]\)' \| "X$ac_val" : 'X\(.*\)'`
      eval $ac_var=\$ac_val;;
  esac
  # Be sure to have absolute directory names.
  case $ac_val in
    [\\/$]* | ?:[\\/]* )  continue;;
    NONE | '' ) case $ac_var in *prefix ) continue;; esac;;
  esac
  as_fn_error $? "expected an absolute directory name for --$ac_var: $ac_val"
done

# There might be people who depend on the old broken behavior: `$host'
# used to hold the argument of --host etc.
# FIXME: To remove some day.
build=$build_alias
host=$host_alias
target=$target_alias

# FIXME: To remove some day.
if test "x$host_alias" != x; then
  if test "x$build_alias" = x; then
    cross_compiling=maybe
  elif test "x$build_alias" != "x$host_alias"; then
    cross_compiling=yes
  fi
fi

ac_tool_prefix=
test -n "$host_alias" && ac_tool_prefix=$host_alias-

test "$silent" = yes && exec 6>/dev/null


ac_pwd=`pwd` && test -n "$ac_pwd" &&
ac_ls_di=`ls -di .` &&
ac_pwd_ls_di=`cd "$ac_pwd" && ls -di .` ||
  as_fn_error $? "working directory cannot be determined"
test "X$ac_ls_di" = "X$ac_pwd_ls_di" ||
  as_fn_error $? "pwd does not report name of working directory"


# Find the source files, if location was not specified.
if test -z "$srcdir"; then
  ac_srcdir_defaulted=yes
  # Try the directory containing this script, then the parent directory.
  ac_confdir=`$as_dirname -- "$as_myself" ||
$as_expr X"$as_myself" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_myself" : 'X\(//\)[^/]' \| \
	 X"$as_myself" : 'X\(//\)$' \| \
	 X"$as_myself" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_myself" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
  srcdir=$ac_confdir
  if test ! -r "$srcdir/$ac_unique_file"; then
    srcdir=..
  fi
else
  ac_srcdir_defaulted=no
fi
if test ! -r "$srcdir/$ac_unique_file"; then
  test "$ac_srcdir_defaulted" = yes && srcdir="$ac_confdir or .."
  as_fn_error $? "cannot find sources ($ac_unique_file) in $srcdir"
fi
ac_msg="sources are in $srcdir, but \`cd $srcdir' does not work"
ac_abs_confdir=`(
	cd "$srcdir" && test -r "./$ac_unique_file" || as_fn_error $? "$ac_msg"
	pwd)`
# When building in place, set srcdir=.
if test "$ac_abs_confdir" = "$ac_pwd"; then
  srcdir=.
fi
# Remove unnecessary trailing slashes from srcdir.
# Double slashes in file names in object file debugging info
# mess up M-x gdb in Emacs.
case $srcdir in
*/) srcdir=`expr "X$srcdir" : 'X\(.*[^/]\)' \| "X$srcdir" : 'X\(.*\)'`;;
esac
for ac_var in $ac_precious_vars; do
  eval ac_env_${ac_var}_set=\${${ac_var}+set}
  eval ac_env_${ac_var}_value=\$${ac_var}
  eval ac_cv_env_${ac_var}_set=\${${ac_var}+set}
  eval ac_cv_env_${ac_var}_value=\$${ac_var}
done

#
# Report the --help message.
#
if test "$ac_init_help" = "long"; then
  # Omit some internal or obsolete options to make the list less imposing.
  # This message is too long to be a string in the A/UX 3.1 sh.
  cat <<_ACEOF
\`configure' configures this package to adapt to many kinds of systems.

Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print \`checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for \`--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or \`..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [$ac_default_prefix]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, \`make install' will install all the files in
\`$ac_default_prefix/bin', \`$ac_default_prefix/lib' etc.  You can specify
an installation prefix other than \`$ac_default_prefix' using \`--prefix',
for instance \`--prefix=\$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/PACKAGE]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]
_ACEOF

  cat <<\_ACEOF

X features:
  --x-includes=DIR    X include files are in DIR
  --x-libraries=DIR   X library files are in DIR

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-dumpflags[=no] list of flags to dump (i.e QT ICONV GUILE ...)
_ACEOF
fi

if test -n "$ac_init_help"; then

  cat <<\_ACEOF
  --enable-static[=no]    statically link libraries
  --disable-guile2=yes    enable compilation with Guile 2, for development
                          purposes
  --disable-gs[=DIR]      disable ghostscript support
  --disable-fastalloc     omit fast allocator for small objects
  --disable-macosx-extensions
                          do not use Mac specific services (spellchecker,
                          image handling, ...)
  --enable-console        enable windows console
  --disable-qt            replace Qt by X11 interface
  --enable-qtpipes        replace UNIX pipes by Qt pipes
  --enable-cocoa          replace X11 by Cocoa interface
  --disable-pdf-renderer  use hummus support for native pdf exports
  --enable-profile        enable gcc compilation flag for profiling with gprof
  --enable-debug[=ARG]    install a debugging enable executable [-ggdb]
  --enable-assert         exit on failed assertions in code
  --enable-warnings       print warning messages during compilation
  --enable-checks         more extensive sanity checking
  --enable-experimental   support new style rewriting code
  --enable-prepoc         generate preprocessing listing
  --enable-optimize[=ARG] compile with optimizations [guessed]
  --enable-sign[=ARG]     Code signing ID

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-tmrepo[=no]      absolute texmacs sdk path
  --with-guile[=system]   path to to find guile-config or [embedded] if any
                          tm-guile package included
  --with-iconv[=DIR]      where to find iconv []
  --with-freetype[DIR=]   where to find freetype-config []
  --with-cairo[=ARG]      with cairo support [ARG=no]
  --with-imlib2[=ARG]     with imlib2 support [ARG=no]
  --with-axel[=ARG]       with axel support [ARG=no]
  --with-sqlite3[=ARG]    with sqlite3 support [ARG=no]
  --with-sparkle[=ARG]    with Sparkle autoupdater [ARG=no or path for
                          winSparkle or yes for mac (framework should be in
                          the standard user frameworks location)]
  --with-appcast[=ARG]    path for the appcast updater file
  --with-sdk[=none]       Apple SDK level (i.e 10.6)
  --with-osx[=none]       targeted configuration (i.e 10.6)
  --with-qt[=ARG]         Qt support. ARG can be `yes' (the default), `no', or
                          a path to Qt binaries; if `yes' or empty, use PATH
                          and some default directories to find Qt binaries
  --with-x                use the X Window System

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  OBJC        Objective C compiler command
  OBJCFLAGS   Objective C compiler flags
  OBJCXX      Objective C++ compiler command
  OBJCXXFLAGS Objective C++ compiler flags
  CXXCPP      C++ preprocessor
  QT_PATH     Path to the Qt binaries
  QMAKE       Qt Makefile generator command
  MOC         Qt Meta Object Compiler command
  UIC         Qt User Interface Compiler command
  RCC         Qt Resource Compiler command
  XMKMF       Path to xmkmf, Makefile generator for X Window System

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
_ACEOF
ac_status=$?
fi

if test "$ac_init_help" = "recursive"; then
  # If there are subdirs, report their specific --help.
  for ac_dir in : $ac_subdirs_all; do test "x$ac_dir" = x: && continue
    test -d "$ac_dir" ||
      { cd "$srcdir" && ac_pwd=`pwd` && srcdir=. && test -d "$ac_dir"; } ||
      continue
    ac_builddir=.

case "$ac_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`$as_echo "$ac_dir" | sed 's|^\.[\\/]||'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix

    cd "$ac_dir" || { ac_status=$?; continue; }
    # Check for guested configure.
    if test -f "$ac_srcdir/configure.gnu"; then
      echo &&
      $SHELL "$ac_srcdir/configure.gnu" --help=recursive
    elif test -f "$ac_srcdir/configure"; then
      echo &&
      $SHELL "$ac_srcdir/configure" --help=recursive
    else
      $as_echo "$as_me: WARNING: no configuration information is in $ac_dir" >&2
    fi || ac_status=$?
    cd "$ac_pwd" || { ac_status=$?; break; }
  done
fi

test -n "$ac_init_help" && exit $ac_status
if $ac_init_version; then
  cat <<\_ACEOF
configure
generated by GNU Autoconf 2.69

Copyright (C) 2012 Free Software Foundation, Inc.
This configure script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it.
_ACEOF
  exit
fi

## ------------------------ ##
## Autoconf initialization. ##
## ------------------------ ##

# ac_fn_c_try_compile LINENO
# --------------------------
# Try to compile conftest.$ac_ext, and return whether this succeeded.
ac_fn_c_try_compile ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  rm -f conftest.$ac_objext
  if { { ac_try="$ac_compile"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compile") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && {
	 test -z "$ac_c_werror_flag" ||
	 test ! -s conftest.err
       } && test -s conftest.$ac_objext; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

	ac_retval=1
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_c_try_compile

# ac_fn_cxx_try_compile LINENO
# ----------------------------
# Try to compile conftest.$ac_ext, and return whether this succeeded.
ac_fn_cxx_try_compile ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  rm -f conftest.$ac_objext
  if { { ac_try="$ac_compile"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compile") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && {
	 test -z "$ac_cxx_werror_flag" ||
	 test ! -s conftest.err
       } && test -s conftest.$ac_objext; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

	ac_retval=1
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_cxx_try_compile

# ac_fn_objc_try_compile LINENO
# -----------------------------
# Try to compile conftest.$ac_ext, and return whether this succeeded.
ac_fn_objc_try_compile ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  rm -f conftest.$ac_objext
  if { { ac_try="$ac_compile"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compile") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && {
	 test -z "$ac_objc_werror_flag" ||
	 test ! -s conftest.err
       } && test -s conftest.$ac_objext; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

	ac_retval=1
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_objc_try_compile

# ac_fn_objcxx_try_compile LINENO
# -------------------------------
# Try to compile conftest.$ac_ext, and return whether this succeeded.
ac_fn_objcxx_try_compile ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  rm -f conftest.$ac_objext
  if { { ac_try="$ac_compile"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compile") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && {
	 test -z "$ac_objcxx_werror_flag" ||
	 test ! -s conftest.err
       } && test -s conftest.$ac_objext; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

	ac_retval=1
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_objcxx_try_compile

# ac_fn_cxx_try_run LINENO
# ------------------------
# Try to link conftest.$ac_ext, and return whether this succeeded. Assumes
# that executables *can* be run.
ac_fn_cxx_try_run ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  if { { ac_try="$ac_link"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && { ac_try='./conftest$ac_exeext'
  { { case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_try") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }; }; then :
  ac_retval=0
else
  $as_echo "$as_me: program exited with status $ac_status" >&5
       $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

       ac_retval=$ac_status
fi
  rm -rf conftest.dSYM conftest_ipa8_conftest.oo
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_cxx_try_run

# ac_fn_cxx_try_link LINENO
# -------------------------
# Try to link conftest.$ac_ext, and return whether this succeeded.
ac_fn_cxx_try_link ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  rm -f conftest.$ac_objext conftest$ac_exeext
  if { { ac_try="$ac_link"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && {
	 test -z "$ac_cxx_werror_flag" ||
	 test ! -s conftest.err
       } && test -s conftest$ac_exeext && {
	 test "$cross_compiling" = yes ||
	 test -x conftest$ac_exeext
       }; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

	ac_retval=1
fi
  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information
  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would
  # interfere with the next link command; also delete a directory that is
  # left behind by Apple's compiler.  We do this before executing the actions.
  rm -rf conftest.dSYM conftest_ipa8_conftest.oo
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_cxx_try_link

# ac_fn_cxx_check_type LINENO TYPE VAR INCLUDES
# ---------------------------------------------
# Tests whether TYPE exists after having included INCLUDES, setting cache
# variable VAR accordingly.
ac_fn_cxx_check_type ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
$as_echo_n "checking for $2... " >&6; }
if eval \${$3+:} false; then :
  $as_echo_n "(cached) " >&6
else
  eval "$3=no"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
int
main ()
{
if (sizeof ($2))
	 return 0;
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
int
main ()
{
if (sizeof (($2)))
	    return 0;
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :

else
  eval "$3=yes"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
eval ac_res=\$$3
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno

} # ac_fn_cxx_check_type

# ac_fn_cxx_try_cpp LINENO
# ------------------------
# Try to preprocess conftest.$ac_ext, and return whether this succeeded.
ac_fn_cxx_try_cpp ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  if { { ac_try="$ac_cpp conftest.$ac_ext"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_cpp conftest.$ac_ext") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } > conftest.i && {
	 test -z "$ac_cxx_preproc_warn_flag$ac_cxx_werror_flag" ||
	 test ! -s conftest.err
       }; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

    ac_retval=1
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_cxx_try_cpp

# ac_fn_cxx_check_header_compile LINENO HEADER VAR INCLUDES
# ---------------------------------------------------------
# Tests whether HEADER exists and can be compiled using the include files in
# INCLUDES, setting the cache variable VAR accordingly.
ac_fn_cxx_check_header_compile ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
$as_echo_n "checking for $2... " >&6; }
if eval \${$3+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
#include <$2>
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$3=yes"
else
  eval "$3=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
eval ac_res=\$$3
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno

} # ac_fn_cxx_check_header_compile

# ac_fn_cxx_check_header_mongrel LINENO HEADER VAR INCLUDES
# ---------------------------------------------------------
# Tests whether HEADER exists, giving a warning if it cannot be compiled using
# the include files in INCLUDES and setting the cache variable VAR
# accordingly.
ac_fn_cxx_check_header_mongrel ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  if eval \${$3+:} false; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
$as_echo_n "checking for $2... " >&6; }
if eval \${$3+:} false; then :
  $as_echo_n "(cached) " >&6
fi
eval ac_res=\$$3
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
else
  # Is the header compilable?
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking $2 usability" >&5
$as_echo_n "checking $2 usability... " >&6; }
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
#include <$2>
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_header_compiler=yes
else
  ac_header_compiler=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_header_compiler" >&5
$as_echo "$ac_header_compiler" >&6; }

# Is the header present?
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking $2 presence" >&5
$as_echo_n "checking $2 presence... " >&6; }
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <$2>
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  ac_header_preproc=yes
else
  ac_header_preproc=no
fi
rm -f conftest.err conftest.i conftest.$ac_ext
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_header_preproc" >&5
$as_echo "$ac_header_preproc" >&6; }

# So?  What about this header?
case $ac_header_compiler:$ac_header_preproc:$ac_cxx_preproc_warn_flag in #((
  yes:no: )
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: accepted by the compiler, rejected by the preprocessor!" >&5
$as_echo "$as_me: WARNING: $2: accepted by the compiler, rejected by the preprocessor!" >&2;}
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result" >&5
$as_echo "$as_me: WARNING: $2: proceeding with the compiler's result" >&2;}
    ;;
  no:yes:* )
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: present but cannot be compiled" >&5
$as_echo "$as_me: WARNING: $2: present but cannot be compiled" >&2;}
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2:     check for missing prerequisite headers?" >&5
$as_echo "$as_me: WARNING: $2:     check for missing prerequisite headers?" >&2;}
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: see the Autoconf documentation" >&5
$as_echo "$as_me: WARNING: $2: see the Autoconf documentation" >&2;}
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2:     section \"Present But Cannot Be Compiled\"" >&5
$as_echo "$as_me: WARNING: $2:     section \"Present But Cannot Be Compiled\"" >&2;}
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result" >&5
$as_echo "$as_me: WARNING: $2: proceeding with the compiler's result" >&2;}
    ;;
esac
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
$as_echo_n "checking for $2... " >&6; }
if eval \${$3+:} false; then :
  $as_echo_n "(cached) " >&6
else
  eval "$3=\$ac_header_compiler"
fi
eval ac_res=\$$3
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno

} # ac_fn_cxx_check_header_mongrel

# ac_fn_cxx_check_func LINENO FUNC VAR
# ------------------------------------
# Tests whether FUNC exists, setting the cache variable VAR accordingly
ac_fn_cxx_check_func ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
$as_echo_n "checking for $2... " >&6; }
if eval \${$3+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
/* Define $2 to an innocuous variant, in case <limits.h> declares $2.
   For example, HP-UX 11i <limits.h> declares gettimeofday.  */
#define $2 innocuous_$2

/* System header to define __stub macros and hopefully few prototypes,
    which can conflict with char $2 (); below.
    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
    <limits.h> exists even on freestanding compilers.  */

#ifdef __STDC__
# include <limits.h>
#else
# include <assert.h>
#endif

#undef $2

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char $2 ();
/* The GNU C library defines this for functions which it implements
    to always fail with ENOSYS.  Some functions are actually named
    something starting with __ and the normal name is an alias.  */
#if defined __stub_$2 || defined __stub___$2
choke me
#endif

int
main ()
{
return $2 ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  eval "$3=yes"
else
  eval "$3=no"
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
fi
eval ac_res=\$$3
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno

} # ac_fn_cxx_check_func

# ac_fn_cxx_compute_int LINENO EXPR VAR INCLUDES
# ----------------------------------------------
# Tries to find the compile-time value of EXPR in a program that includes
# INCLUDES, setting VAR accordingly. Returns whether the value could be
# computed
ac_fn_cxx_compute_int ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  if test "$cross_compiling" = yes; then
    # Depending upon the size, compute the lo and hi bounds.
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
int
main ()
{
static int test_array [1 - 2 * !(($2) >= 0)];
test_array [0] = 0;
return test_array [0];

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_lo=0 ac_mid=0
  while :; do
    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
int
main ()
{
static int test_array [1 - 2 * !(($2) <= $ac_mid)];
test_array [0] = 0;
return test_array [0];

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_hi=$ac_mid; break
else
  as_fn_arith $ac_mid + 1 && ac_lo=$as_val
			if test $ac_lo -le $ac_mid; then
			  ac_lo= ac_hi=
			  break
			fi
			as_fn_arith 2 '*' $ac_mid + 1 && ac_mid=$as_val
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  done
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
int
main ()
{
static int test_array [1 - 2 * !(($2) < 0)];
test_array [0] = 0;
return test_array [0];

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_hi=-1 ac_mid=-1
  while :; do
    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
int
main ()
{
static int test_array [1 - 2 * !(($2) >= $ac_mid)];
test_array [0] = 0;
return test_array [0];

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_lo=$ac_mid; break
else
  as_fn_arith '(' $ac_mid ')' - 1 && ac_hi=$as_val
			if test $ac_mid -le $ac_hi; then
			  ac_lo= ac_hi=
			  break
			fi
			as_fn_arith 2 '*' $ac_mid && ac_mid=$as_val
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  done
else
  ac_lo= ac_hi=
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
# Binary search between lo and hi bounds.
while test "x$ac_lo" != "x$ac_hi"; do
  as_fn_arith '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo && ac_mid=$as_val
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
int
main ()
{
static int test_array [1 - 2 * !(($2) <= $ac_mid)];
test_array [0] = 0;
return test_array [0];

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_hi=$ac_mid
else
  as_fn_arith '(' $ac_mid ')' + 1 && ac_lo=$as_val
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
done
case $ac_lo in #((
?*) eval "$3=\$ac_lo"; ac_retval=0 ;;
'') ac_retval=1 ;;
esac
  else
    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
$4
static long int longval () { return $2; }
static unsigned long int ulongval () { return $2; }
#include <stdio.h>
#include <stdlib.h>
int
main ()
{

  FILE *f = fopen ("conftest.val", "w");
  if (! f)
    return 1;
  if (($2) < 0)
    {
      long int i = longval ();
      if (i != ($2))
	return 1;
      fprintf (f, "%ld", i);
    }
  else
    {
      unsigned long int i = ulongval ();
      if (i != ($2))
	return 1;
      fprintf (f, "%lu", i);
    }
  /* Do not output a trailing newline, as this causes \r\n confusion
     on some platforms.  */
  return ferror (f) || fclose (f) != 0;

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :
  echo >>conftest.val; read $3 <conftest.val; ac_retval=0
else
  ac_retval=1
fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
rm -f conftest.val

  fi
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_cxx_compute_int

# ac_fn_cxx_check_header_preproc LINENO HEADER VAR
# ------------------------------------------------
# Tests whether HEADER is present, setting the cache variable VAR accordingly.
ac_fn_cxx_check_header_preproc ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
$as_echo_n "checking for $2... " >&6; }
if eval \${$3+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <$2>
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  eval "$3=yes"
else
  eval "$3=no"
fi
rm -f conftest.err conftest.i conftest.$ac_ext
fi
eval ac_res=\$$3
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno

} # ac_fn_cxx_check_header_preproc

# ac_fn_c_try_link LINENO
# -----------------------
# Try to link conftest.$ac_ext, and return whether this succeeded.
ac_fn_c_try_link ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  rm -f conftest.$ac_objext conftest$ac_exeext
  if { { ac_try="$ac_link"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && {
	 test -z "$ac_c_werror_flag" ||
	 test ! -s conftest.err
       } && test -s conftest$ac_exeext && {
	 test "$cross_compiling" = yes ||
	 test -x conftest$ac_exeext
       }; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

	ac_retval=1
fi
  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information
  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would
  # interfere with the next link command; also delete a directory that is
  # left behind by Apple's compiler.  We do this before executing the actions.
  rm -rf conftest.dSYM conftest_ipa8_conftest.oo
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_c_try_link

# ac_fn_objc_try_link LINENO
# --------------------------
# Try to link conftest.$ac_ext, and return whether this succeeded.
ac_fn_objc_try_link ()
{
  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
  rm -f conftest.$ac_objext conftest$ac_exeext
  if { { ac_try="$ac_link"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    grep -v '^ *+' conftest.err >conftest.er1
    cat conftest.er1 >&5
    mv -f conftest.er1 conftest.err
  fi
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; } && {
	 test -z "$ac_objc_werror_flag" ||
	 test ! -s conftest.err
       } && test -s conftest$ac_exeext && {
	 test "$cross_compiling" = yes ||
	 test -x conftest$ac_exeext
       }; then :
  ac_retval=0
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

	ac_retval=1
fi
  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information
  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would
  # interfere with the next link command; also delete a directory that is
  # left behind by Apple's compiler.  We do this before executing the actions.
  rm -rf conftest.dSYM conftest_ipa8_conftest.oo
  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
  as_fn_set_status $ac_retval

} # ac_fn_objc_try_link
cat >config.log <<_ACEOF
This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by $as_me, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ $0 $@

_ACEOF
exec 5>>config.log
{
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    $as_echo "PATH: $as_dir"
  done
IFS=$as_save_IFS

} >&5

cat >&5 <<_ACEOF


## ----------- ##
## Core tests. ##
## ----------- ##

_ACEOF


# Keep a trace of the command line.
# Strip out --no-create and --no-recursion so they do not pile up.
# Strip out --silent because we don't want to record it for future runs.
# Also quote any args containing shell meta-characters.
# Make two passes to allow for proper duplicate-argument suppression.
ac_configure_args=
ac_configure_args0=
ac_configure_args1=
ac_must_keep_next=false
for ac_pass in 1 2
do
  for ac_arg
  do
    case $ac_arg in
    -no-create | --no-c* | -n | -no-recursion | --no-r*) continue ;;
    -q | -quiet | --quiet | --quie | --qui | --qu | --q \
    | -silent | --silent | --silen | --sile | --sil)
      continue ;;
    *\'*)
      ac_arg=`$as_echo "$ac_arg" | sed "s/'/'\\\\\\\\''/g"` ;;
    esac
    case $ac_pass in
    1) as_fn_append ac_configure_args0 " '$ac_arg'" ;;
    2)
      as_fn_append ac_configure_args1 " '$ac_arg'"
      if test $ac_must_keep_next = true; then
	ac_must_keep_next=false # Got value, back to normal.
      else
	case $ac_arg in
	  *=* | --config-cache | -C | -disable-* | --disable-* \
	  | -enable-* | --enable-* | -gas | --g* | -nfp | --nf* \
	  | -q | -quiet | --q* | -silent | --sil* | -v | -verb* \
	  | -with-* | --with-* | -without-* | --without-* | --x)
	    case "$ac_configure_args0 " in
	      "$ac_configure_args1"*" '$ac_arg' "* ) continue ;;
	    esac
	    ;;
	  -* ) ac_must_keep_next=true ;;
	esac
      fi
      as_fn_append ac_configure_args " '$ac_arg'"
      ;;
    esac
  done
done
{ ac_configure_args0=; unset ac_configure_args0;}
{ ac_configure_args1=; unset ac_configure_args1;}

# When interrupted or exit'd, cleanup temporary files, and complete
# config.log.  We remove comments because anyway the quotes in there
# would cause problems or look ugly.
# WARNING: Use '\'' to represent an apostrophe within the trap.
# WARNING: Do not start the trap code with a newline, due to a FreeBSD 4.0 bug.
trap 'exit_status=$?
  # Save into config.log some information that might help in debugging.
  {
    echo

    $as_echo "## ---------------- ##
## Cache variables. ##
## ---------------- ##"
    echo
    # The following way of writing the cache mishandles newlines in values,
(
  for ac_var in `(set) 2>&1 | sed -n '\''s/^\([a-zA-Z_][a-zA-Z0-9_]*\)=.*/\1/p'\''`; do
    eval ac_val=\$$ac_var
    case $ac_val in #(
    *${as_nl}*)
      case $ac_var in #(
      *_cv_*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: cache variable $ac_var contains a newline" >&5
$as_echo "$as_me: WARNING: cache variable $ac_var contains a newline" >&2;} ;;
      esac
      case $ac_var in #(
      _ | IFS | as_nl) ;; #(
      BASH_ARGV | BASH_SOURCE) eval $ac_var= ;; #(
      *) { eval $ac_var=; unset $ac_var;} ;;
      esac ;;
    esac
  done
  (set) 2>&1 |
    case $as_nl`(ac_space='\'' '\''; set) 2>&1` in #(
    *${as_nl}ac_space=\ *)
      sed -n \
	"s/'\''/'\''\\\\'\'''\''/g;
	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\''\\2'\''/p"
      ;; #(
    *)
      sed -n "/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p"
      ;;
    esac |
    sort
)
    echo

    $as_echo "## ----------------- ##
## Output variables. ##
## ----------------- ##"
    echo
    for ac_var in $ac_subst_vars
    do
      eval ac_val=\$$ac_var
      case $ac_val in
      *\'\''*) ac_val=`$as_echo "$ac_val" | sed "s/'\''/'\''\\\\\\\\'\'''\''/g"`;;
      esac
      $as_echo "$ac_var='\''$ac_val'\''"
    done | sort
    echo

    if test -n "$ac_subst_files"; then
      $as_echo "## ------------------- ##
## File substitutions. ##
## ------------------- ##"
      echo
      for ac_var in $ac_subst_files
      do
	eval ac_val=\$$ac_var
	case $ac_val in
	*\'\''*) ac_val=`$as_echo "$ac_val" | sed "s/'\''/'\''\\\\\\\\'\'''\''/g"`;;
	esac
	$as_echo "$ac_var='\''$ac_val'\''"
      done | sort
      echo
    fi

    if test -s confdefs.h; then
      $as_echo "## ----------- ##
## confdefs.h. ##
## ----------- ##"
      echo
      cat confdefs.h
      echo
    fi
    test "$ac_signal" != 0 &&
      $as_echo "$as_me: caught signal $ac_signal"
    $as_echo "$as_me: exit $exit_status"
  } >&5
  rm -f core *.core core.conftest.* &&
    rm -f -r conftest* confdefs* conf$$* $ac_clean_files &&
    exit $exit_status
' 0
for ac_signal in 1 2 13 15; do
  trap 'ac_signal='$ac_signal'; as_fn_exit 1' $ac_signal
done
ac_signal=0

# confdefs.h avoids OS command line length limits that DEFS can exceed.
rm -f -r conftest* confdefs.h

$as_echo "/* confdefs.h */" > confdefs.h

# Predefined preprocessor variables.

cat >>confdefs.h <<_ACEOF
#define PACKAGE_NAME "$PACKAGE_NAME"
_ACEOF

cat >>confdefs.h <<_ACEOF
#define PACKAGE_TARNAME "$PACKAGE_TARNAME"
_ACEOF

cat >>confdefs.h <<_ACEOF
#define PACKAGE_VERSION "$PACKAGE_VERSION"
_ACEOF

cat >>confdefs.h <<_ACEOF
#define PACKAGE_STRING "$PACKAGE_STRING"
_ACEOF

cat >>confdefs.h <<_ACEOF
#define PACKAGE_BUGREPORT "$PACKAGE_BUGREPORT"
_ACEOF

cat >>confdefs.h <<_ACEOF
#define PACKAGE_URL "$PACKAGE_URL"
_ACEOF


# Let the site file select an alternate cache file if it wants to.
# Prefer an explicitly selected file to automatically selected ones.
ac_site_file1=NONE
ac_site_file2=NONE
if test -n "$CONFIG_SITE"; then
  # We do not want a PATH search for config.site.
  case $CONFIG_SITE in #((
    -*)  ac_site_file1=./$CONFIG_SITE;;
    */*) ac_site_file1=$CONFIG_SITE;;
    *)   ac_site_file1=./$CONFIG_SITE;;
  esac
elif test "x$prefix" != xNONE; then
  ac_site_file1=$prefix/share/config.site
  ac_site_file2=$prefix/etc/config.site
else
  ac_site_file1=$ac_default_prefix/share/config.site
  ac_site_file2=$ac_default_prefix/etc/config.site
fi
for ac_site_file in "$ac_site_file1" "$ac_site_file2"
do
  test "x$ac_site_file" = xNONE && continue
  if test /dev/null != "$ac_site_file" && test -r "$ac_site_file"; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: loading site script $ac_site_file" >&5
$as_echo "$as_me: loading site script $ac_site_file" >&6;}
    sed 's/^/| /' "$ac_site_file" >&5
    . "$ac_site_file" \
      || { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "failed to load site script $ac_site_file
See \`config.log' for more details" "$LINENO" 5; }
  fi
done

if test -r "$cache_file"; then
  # Some versions of bash will fail to source /dev/null (special files
  # actually), so we avoid doing that.  DJGPP emulates it as a regular file.
  if test /dev/null != "$cache_file" && test -f "$cache_file"; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: loading cache $cache_file" >&5
$as_echo "$as_me: loading cache $cache_file" >&6;}
    case $cache_file in
      [\\/]* | ?:[\\/]* ) . "$cache_file";;
      *)                      . "./$cache_file";;
    esac
  fi
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: creating cache $cache_file" >&5
$as_echo "$as_me: creating cache $cache_file" >&6;}
  >$cache_file
fi

# Check that the precious variables saved in the cache have kept the same
# value.
ac_cache_corrupted=false
for ac_var in $ac_precious_vars; do
  eval ac_old_set=\$ac_cv_env_${ac_var}_set
  eval ac_new_set=\$ac_env_${ac_var}_set
  eval ac_old_val=\$ac_cv_env_${ac_var}_value
  eval ac_new_val=\$ac_env_${ac_var}_value
  case $ac_old_set,$ac_new_set in
    set,)
      { $as_echo "$as_me:${as_lineno-$LINENO}: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&5
$as_echo "$as_me: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&2;}
      ac_cache_corrupted=: ;;
    ,set)
      { $as_echo "$as_me:${as_lineno-$LINENO}: error: \`$ac_var' was not set in the previous run" >&5
$as_echo "$as_me: error: \`$ac_var' was not set in the previous run" >&2;}
      ac_cache_corrupted=: ;;
    ,);;
    *)
      if test "x$ac_old_val" != "x$ac_new_val"; then
	# differences in whitespace do not lead to failure.
	ac_old_val_w=`echo x $ac_old_val`
	ac_new_val_w=`echo x $ac_new_val`
	if test "$ac_old_val_w" != "$ac_new_val_w"; then
	  { $as_echo "$as_me:${as_lineno-$LINENO}: error: \`$ac_var' has changed since the previous run:" >&5
$as_echo "$as_me: error: \`$ac_var' has changed since the previous run:" >&2;}
	  ac_cache_corrupted=:
	else
	  { $as_echo "$as_me:${as_lineno-$LINENO}: warning: ignoring whitespace changes in \`$ac_var' since the previous run:" >&5
$as_echo "$as_me: warning: ignoring whitespace changes in \`$ac_var' since the previous run:" >&2;}
	  eval $ac_var=\$ac_old_val
	fi
	{ $as_echo "$as_me:${as_lineno-$LINENO}:   former value:  \`$ac_old_val'" >&5
$as_echo "$as_me:   former value:  \`$ac_old_val'" >&2;}
	{ $as_echo "$as_me:${as_lineno-$LINENO}:   current value: \`$ac_new_val'" >&5
$as_echo "$as_me:   current value: \`$ac_new_val'" >&2;}
      fi;;
  esac
  # Pass precious variables to config.status.
  if test "$ac_new_set" = set; then
    case $ac_new_val in
    *\'*) ac_arg=$ac_var=`$as_echo "$ac_new_val" | sed "s/'/'\\\\\\\\''/g"` ;;
    *) ac_arg=$ac_var=$ac_new_val ;;
    esac
    case " $ac_configure_args " in
      *" '$ac_arg' "*) ;; # Avoid dups.  Use of quotes ensures accuracy.
      *) as_fn_append ac_configure_args " '$ac_arg'" ;;
    esac
  fi
done
if $ac_cache_corrupted; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: error: changes in the environment can compromise the build" >&5
$as_echo "$as_me: error: changes in the environment can compromise the build" >&2;}
  as_fn_error $? "run \`make distclean' and/or \`rm $cache_file' and start over" "$LINENO" 5
fi
## -------------------- ##
## Main body of script. ##
## -------------------- ##

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu


ac_config_headers="$ac_config_headers src/System/config.h:src/System/config.in"

ac_aux_dir=
for ac_dir in "$srcdir" "$srcdir/.." "$srcdir/../.."; do
  if test -f "$ac_dir/install-sh"; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/install-sh -c"
    break
  elif test -f "$ac_dir/install.sh"; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/install.sh -c"
    break
  elif test -f "$ac_dir/shtool"; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/shtool install -c"
    break
  fi
done
if test -z "$ac_aux_dir"; then
  as_fn_error $? "cannot find install-sh, install.sh, or shtool in \"$srcdir\" \"$srcdir/..\" \"$srcdir/../..\"" "$LINENO" 5
fi

# These three variables are undocumented and unsupported,
# and are intended to be withdrawn in a future Autoconf release.
# They can cause serious problems if a builder's source tree is in a directory
# whose full name contains unusual characters.
ac_config_guess="$SHELL $ac_aux_dir/config.guess"  # Please don't use this var.
ac_config_sub="$SHELL $ac_aux_dir/config.sub"  # Please don't use this var.
ac_configure="$SHELL $ac_aux_dir/configure"  # Please don't use this var.


# Make sure we can run config.sub.
$SHELL "$ac_aux_dir/config.sub" sun4 >/dev/null 2>&1 ||
  as_fn_error $? "cannot run $SHELL $ac_aux_dir/config.sub" "$LINENO" 5

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking build system type" >&5
$as_echo_n "checking build system type... " >&6; }
if ${ac_cv_build+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_build_alias=$build_alias
test "x$ac_build_alias" = x &&
  ac_build_alias=`$SHELL "$ac_aux_dir/config.guess"`
test "x$ac_build_alias" = x &&
  as_fn_error $? "cannot guess build type; you must specify one" "$LINENO" 5
ac_cv_build=`$SHELL "$ac_aux_dir/config.sub" $ac_build_alias` ||
  as_fn_error $? "$SHELL $ac_aux_dir/config.sub $ac_build_alias failed" "$LINENO" 5

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_build" >&5
$as_echo "$ac_cv_build" >&6; }
case $ac_cv_build in
*-*-*) ;;
*) as_fn_error $? "invalid value of canonical build" "$LINENO" 5;;
esac
build=$ac_cv_build
ac_save_IFS=$IFS; IFS='-'
set x $ac_cv_build
shift
build_cpu=$1
build_vendor=$2
shift; shift
# Remember, the first character of IFS is used to create $*,
# except with old shells:
build_os=$*
IFS=$ac_save_IFS
case $build_os in *\ *) build_os=`echo "$build_os" | sed 's/ /-/g'`;; esac


{ $as_echo "$as_me:${as_lineno-$LINENO}: checking host system type" >&5
$as_echo_n "checking host system type... " >&6; }
if ${ac_cv_host+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test "x$host_alias" = x; then
  ac_cv_host=$ac_cv_build
else
  ac_cv_host=`$SHELL "$ac_aux_dir/config.sub" $host_alias` ||
    as_fn_error $? "$SHELL $ac_aux_dir/config.sub $host_alias failed" "$LINENO" 5
fi

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_host" >&5
$as_echo "$ac_cv_host" >&6; }
case $ac_cv_host in
*-*-*) ;;
*) as_fn_error $? "invalid value of canonical host" "$LINENO" 5;;
esac
host=$ac_cv_host
ac_save_IFS=$IFS; IFS='-'
set x $ac_cv_host
shift
host_cpu=$1
host_vendor=$2
shift; shift
# Remember, the first character of IFS is used to create $*,
# except with old shells:
host_os=$*
IFS=$ac_save_IFS
case $host_os in *\ *) host_os=`echo "$host_os" | sed 's/ /-/g'`;; esac



# compare dotted numbers
# return true if the first is biggest
function cmp_dot_number {
  local -i n1 n2 i=0
  n1=(${1//./ })
  n2=(${2//./ })
  while test -n "${n1[$i]}" -a -n "${n2[$i]}"
  do ((${n1[$i]} > ${n2[$i]}))  && return 0
     ((${n1[$i]} < ${n2[$i]}))  && return 1
     i+=1
  done
  test -n ${n1[$i]} && return 0
  return 1
}


#--------------------------------------------------------------------
# Export version and package name
#--------------------------------------------------------------------


  PACKAGE="TeXmacs"
  DEBIAN_NAME="texmacs"

  VERSION_MAJOR="2"
  VERSION_MINOR="1"
  VERSION_BUILD="2"

  # the svn revision of this version
  DEVEL_REVISION="$Rev$:"

  if test -n "$VERSION_BUILD"
  then DEVEL_VERSION="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_BUILD"
  else DEVEL_VERSION="$VERSION_MAJOR.$VERSION_MINOR"
  fi
  DEVEL_RELEASE="1"         # I think we should use SVNREV here

  STABLE_VERSION=$DEVEL_VERSION
  STABLE_RELEASE=$DEVEL_RELEASE











  { $as_echo "$as_me:${as_lineno-$LINENO}: checking current Subversion revision number" >&5
$as_echo_n "checking current Subversion revision number... " >&6; }
  SVNREV=`svnversion -n . 2>/dev/null`
 if { test "$SVNREV" = "" || test "$SVNREV" = "exported" ; } ; then
    SVNREV=`cat $srcdir/SVNREV`
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $SVNREV" >&5
$as_echo "$SVNREV" >&6; }
  else
    echo "$SVNREV" > $srcdir/SVNREV
    echo "$SVNREV" > $srcdir/TeXmacs/SVNREV
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $SVNREV" >&5
$as_echo "$SVNREV" >&6; }
  fi


  SVNINT=${SVNREV#*:}
  SVNINT=$(echo ${SVNINT%%[^[:digit:]]*})

#Naming package strategy
#   if test "$SVNREV" != $DEVEL_REVISION
#   then AC_SUBST(REVISION,[-${SVNINT}])
#   else AC_SUBST(REVISION,[""])
#   fi
#Not Implemeted yet
  REVISION=""


  while read line
    do [[ $line =~ $(echo 'DEVEL_REVISION=[^[:digit:]]*([[:digit:]]+)') ]] &&
      DEVEL_REVISION=${BASH_REMATCH[1]}
  done <misc/m4/tm_version.m4
  { $as_echo "$as_me:${as_lineno-$LINENO}: $SVNREV" >&5
$as_echo "$as_me: $SVNREV" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: $DEVEL_REVISION" >&5
$as_echo "$as_me: $DEVEL_REVISION" >&6;}

  if test "$SVNREV" != "$DEVEL_REVISION"
  then
cat >>confdefs.h <<_ACEOF
#define TEXMACS_REVISION "Custom $SVNREV"
_ACEOF

  else
cat >>confdefs.h <<_ACEOF
#define TEXMACS_REVISION "$DEVEL_REVISION"
_ACEOF

  fi

  SVNPATCH=0
  test SVNINT != SVNREV && SVNPATCH=VS_FF_PATCHED



#--------------------------------------------------------------------
# Checks for C++ compiler
#--------------------------------------------------------------------

# define CFLAGS else it would assigned at -g -O2 later by autoconf
# but keep previous value if any
CFLAGS=${CFLAGS:=""}
CXXFLAGS=${CXXFLAGS:=""}

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu
if test -n "$ac_tool_prefix"; then
  for ac_prog in clang gcc
  do
    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
set dummy $ac_tool_prefix$ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_CC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$CC"; then
  ac_cv_prog_CC="$CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CC="$ac_tool_prefix$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
CC=$ac_cv_prog_CC
if test -n "$CC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
$as_echo "$CC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


    test -n "$CC" && break
  done
fi
if test -z "$CC"; then
  ac_ct_CC=$CC
  for ac_prog in clang gcc
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_ac_ct_CC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$ac_ct_CC"; then
  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_CC="$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
ac_ct_CC=$ac_cv_prog_ac_ct_CC
if test -n "$ac_ct_CC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
$as_echo "$ac_ct_CC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$ac_ct_CC" && break
done

  if test "x$ac_ct_CC" = x; then
    CC=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    CC=$ac_ct_CC
  fi
fi


test -z "$CC" && { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "no acceptable C compiler found in \$PATH
See \`config.log' for more details" "$LINENO" 5; }

# Provide some information about the compiler.
$as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler version" >&5
set X $ac_compile
ac_compiler=$2
for ac_option in --version -v -V -qversion; do
  { { ac_try="$ac_compiler $ac_option >&5"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    sed '10a\
... rest of stderr output deleted ...
         10q' conftest.err >conftest.er1
    cat conftest.er1 >&5
  fi
  rm -f conftest.er1 conftest.err
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }
done

cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
ac_clean_files_save=$ac_clean_files
ac_clean_files="$ac_clean_files a.out a.out.dSYM a.exe b.out"
# Try to create an executable without -o first, disregard a.out.
# It will help us diagnose broken compilers, and finding out an intuition
# of exeext.
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the C compiler works" >&5
$as_echo_n "checking whether the C compiler works... " >&6; }
ac_link_default=`$as_echo "$ac_link" | sed 's/ -o *conftest[^ ]*//'`

# The possible output files:
ac_files="a.out conftest.exe conftest a.exe a_out.exe b.out conftest.*"

ac_rmfiles=
for ac_file in $ac_files
do
  case $ac_file in
    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
    * ) ac_rmfiles="$ac_rmfiles $ac_file";;
  esac
done
rm -f $ac_rmfiles

if { { ac_try="$ac_link_default"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link_default") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }; then :
  # Autoconf-2.13 could set the ac_cv_exeext variable to `no'.
# So ignore a value of `no', otherwise this would lead to `EXEEXT = no'
# in a Makefile.  We should not override ac_cv_exeext if it was cached,
# so that the user can short-circuit this test for compilers unknown to
# Autoconf.
for ac_file in $ac_files ''
do
  test -f "$ac_file" || continue
  case $ac_file in
    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj )
	;;
    [ab].out )
	# We found the default executable, but exeext='' is most
	# certainly right.
	break;;
    *.* )
	if test "${ac_cv_exeext+set}" = set && test "$ac_cv_exeext" != no;
	then :; else
	   ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
	fi
	# We set ac_cv_exeext here because the later test for it is not
	# safe: cross compilers may not add the suffix if given an `-o'
	# argument, so we may need to know it at that point already.
	# Even if this section looks crufty: it has the advantage of
	# actually working.
	break;;
    * )
	break;;
  esac
done
test "$ac_cv_exeext" = no && ac_cv_exeext=

else
  ac_file=''
fi
if test -z "$ac_file"; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
$as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error 77 "C compiler cannot create executables
See \`config.log' for more details" "$LINENO" 5; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler default output file name" >&5
$as_echo_n "checking for C compiler default output file name... " >&6; }
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_file" >&5
$as_echo "$ac_file" >&6; }
ac_exeext=$ac_cv_exeext

rm -f -r a.out a.out.dSYM a.exe conftest$ac_cv_exeext b.out
ac_clean_files=$ac_clean_files_save
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of executables" >&5
$as_echo_n "checking for suffix of executables... " >&6; }
if { { ac_try="$ac_link"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }; then :
  # If both `conftest.exe' and `conftest' are `present' (well, observable)
# catch `conftest.exe'.  For instance with Cygwin, `ls conftest' will
# work properly (i.e., refer to `conftest.exe'), while it won't with
# `rm'.
for ac_file in conftest.exe conftest conftest.*; do
  test -f "$ac_file" || continue
  case $ac_file in
    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
    *.* ) ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
	  break;;
    * ) break;;
  esac
done
else
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot compute suffix of executables: cannot compile and link
See \`config.log' for more details" "$LINENO" 5; }
fi
rm -f conftest conftest$ac_cv_exeext
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_exeext" >&5
$as_echo "$ac_cv_exeext" >&6; }

rm -f conftest.$ac_ext
EXEEXT=$ac_cv_exeext
ac_exeext=$EXEEXT
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <stdio.h>
int
main ()
{
FILE *f = fopen ("conftest.out", "w");
 return ferror (f) || fclose (f) != 0;

  ;
  return 0;
}
_ACEOF
ac_clean_files="$ac_clean_files conftest.out"
# Check that the compiler produces executables we can run.  If not, either
# the compiler is broken, or we cross compile.
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are cross compiling" >&5
$as_echo_n "checking whether we are cross compiling... " >&6; }
if test "$cross_compiling" != yes; then
  { { ac_try="$ac_link"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_link") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }
  if { ac_try='./conftest$ac_cv_exeext'
  { { case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_try") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }; }; then
    cross_compiling=no
  else
    if test "$cross_compiling" = maybe; then
	cross_compiling=yes
    else
	{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run C compiled programs.
If you meant to cross compile, use \`--host'.
See \`config.log' for more details" "$LINENO" 5; }
    fi
  fi
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $cross_compiling" >&5
$as_echo "$cross_compiling" >&6; }

rm -f conftest.$ac_ext conftest$ac_cv_exeext conftest.out
ac_clean_files=$ac_clean_files_save
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of object files" >&5
$as_echo_n "checking for suffix of object files... " >&6; }
if ${ac_cv_objext+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.o conftest.obj
if { { ac_try="$ac_compile"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compile") 2>&5
  ac_status=$?
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }; then :
  for ac_file in conftest.o conftest.obj conftest.*; do
  test -f "$ac_file" || continue;
  case $ac_file in
    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM ) ;;
    *) ac_cv_objext=`expr "$ac_file" : '.*\.\(.*\)'`
       break;;
  esac
done
else
  $as_echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot compute suffix of object files: cannot compile
See \`config.log' for more details" "$LINENO" 5; }
fi
rm -f conftest.$ac_cv_objext conftest.$ac_ext
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_objext" >&5
$as_echo "$ac_cv_objext" >&6; }
OBJEXT=$ac_cv_objext
ac_objext=$OBJEXT
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C compiler" >&5
$as_echo_n "checking whether we are using the GNU C compiler... " >&6; }
if ${ac_cv_c_compiler_gnu+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{
#ifndef __GNUC__
       choke me
#endif

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  ac_compiler_gnu=yes
else
  ac_compiler_gnu=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
ac_cv_c_compiler_gnu=$ac_compiler_gnu

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_compiler_gnu" >&5
$as_echo "$ac_cv_c_compiler_gnu" >&6; }
if test $ac_compiler_gnu = yes; then
  GCC=yes
else
  GCC=
fi
ac_test_CFLAGS=${CFLAGS+set}
ac_save_CFLAGS=$CFLAGS
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC accepts -g" >&5
$as_echo_n "checking whether $CC accepts -g... " >&6; }
if ${ac_cv_prog_cc_g+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_save_c_werror_flag=$ac_c_werror_flag
   ac_c_werror_flag=yes
   ac_cv_prog_cc_g=no
   CFLAGS="-g"
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  ac_cv_prog_cc_g=yes
else
  CFLAGS=""
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :

else
  ac_c_werror_flag=$ac_save_c_werror_flag
	 CFLAGS="-g"
	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  ac_cv_prog_cc_g=yes
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
   ac_c_werror_flag=$ac_save_c_werror_flag
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_g" >&5
$as_echo "$ac_cv_prog_cc_g" >&6; }
if test "$ac_test_CFLAGS" = set; then
  CFLAGS=$ac_save_CFLAGS
elif test $ac_cv_prog_cc_g = yes; then
  if test "$GCC" = yes; then
    CFLAGS="-g -O2"
  else
    CFLAGS="-g"
  fi
else
  if test "$GCC" = yes; then
    CFLAGS="-O2"
  else
    CFLAGS=
  fi
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $CC option to accept ISO C89" >&5
$as_echo_n "checking for $CC option to accept ISO C89... " >&6; }
if ${ac_cv_prog_cc_c89+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_cv_prog_cc_c89=no
ac_save_CC=$CC
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <stdarg.h>
#include <stdio.h>
struct stat;
/* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
struct buf { int x; };
FILE * (*rcsopen) (struct buf *, struct stat *, int);
static char *e (p, i)
     char **p;
     int i;
{
  return p[i];
}
static char *f (char * (*g) (char **, int), char **p, ...)
{
  char *s;
  va_list v;
  va_start (v,p);
  s = g (p, va_arg (v,int));
  va_end (v);
  return s;
}

/* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
   function prototypes and stuff, but not '\xHH' hex character constants.
   These don't provoke an error unfortunately, instead are silently treated
   as 'x'.  The following induces an error, until -std is added to get
   proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
   array size at least.  It's necessary to write '\x00'==0 to get something
   that's true only with -std.  */
int osf4_cc_array ['\x00' == 0 ? 1 : -1];

/* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
   inside strings and character constants.  */
#define FOO(x) 'x'
int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];

int test (int i, double x);
struct s1 {int (*f) (int a);};
struct s2 {int (*f) (double a);};
int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
int argc;
char **argv;
int
main ()
{
return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
  ;
  return 0;
}
_ACEOF
for ac_arg in '' -qlanglvl=extc89 -qlanglvl=ansi -std \
	-Ae "-Aa -D_HPUX_SOURCE" "-Xc -D__EXTENSIONS__"
do
  CC="$ac_save_CC $ac_arg"
  if ac_fn_c_try_compile "$LINENO"; then :
  ac_cv_prog_cc_c89=$ac_arg
fi
rm -f core conftest.err conftest.$ac_objext
  test "x$ac_cv_prog_cc_c89" != "xno" && break
done
rm -f conftest.$ac_ext
CC=$ac_save_CC

fi
# AC_CACHE_VAL
case "x$ac_cv_prog_cc_c89" in
  x)
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: none needed" >&5
$as_echo "none needed" >&6; } ;;
  xno)
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: unsupported" >&5
$as_echo "unsupported" >&6; } ;;
  *)
    CC="$CC $ac_cv_prog_cc_c89"
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_c89" >&5
$as_echo "$ac_cv_prog_cc_c89" >&6; } ;;
esac
if test "x$ac_cv_prog_cc_c89" != xno; then :

fi

ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

ac_ext=cpp
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
if test -z "$CXX"; then
  if test -n "$CCC"; then
    CXX=$CCC
  else
    if test -n "$ac_tool_prefix"; then
  for ac_prog in clang++ g++
  do
    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
set dummy $ac_tool_prefix$ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_CXX+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$CXX"; then
  ac_cv_prog_CXX="$CXX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_CXX="$ac_tool_prefix$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
CXX=$ac_cv_prog_CXX
if test -n "$CXX"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CXX" >&5
$as_echo "$CXX" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


    test -n "$CXX" && break
  done
fi
if test -z "$CXX"; then
  ac_ct_CXX=$CXX
  for ac_prog in clang++ g++
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_ac_ct_CXX+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$ac_ct_CXX"; then
  ac_cv_prog_ac_ct_CXX="$ac_ct_CXX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_CXX="$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
ac_ct_CXX=$ac_cv_prog_ac_ct_CXX
if test -n "$ac_ct_CXX"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CXX" >&5
$as_echo "$ac_ct_CXX" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$ac_ct_CXX" && break
done

  if test "x$ac_ct_CXX" = x; then
    CXX="g++"
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    CXX=$ac_ct_CXX
  fi
fi

  fi
fi
# Provide some information about the compiler.
$as_echo "$as_me:${as_lineno-$LINENO}: checking for C++ compiler version" >&5
set X $ac_compile
ac_compiler=$2
for ac_option in --version -v -V -qversion; do
  { { ac_try="$ac_compiler $ac_option >&5"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    sed '10a\
... rest of stderr output deleted ...
         10q' conftest.err >conftest.er1
    cat conftest.er1 >&5
  fi
  rm -f conftest.er1 conftest.err
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }
done

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C++ compiler" >&5
$as_echo_n "checking whether we are using the GNU C++ compiler... " >&6; }
if ${ac_cv_cxx_compiler_gnu+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{
#ifndef __GNUC__
       choke me
#endif

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_compiler_gnu=yes
else
  ac_compiler_gnu=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
ac_cv_cxx_compiler_gnu=$ac_compiler_gnu

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_cxx_compiler_gnu" >&5
$as_echo "$ac_cv_cxx_compiler_gnu" >&6; }
if test $ac_compiler_gnu = yes; then
  GXX=yes
else
  GXX=
fi
ac_test_CXXFLAGS=${CXXFLAGS+set}
ac_save_CXXFLAGS=$CXXFLAGS
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CXX accepts -g" >&5
$as_echo_n "checking whether $CXX accepts -g... " >&6; }
if ${ac_cv_prog_cxx_g+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_save_cxx_werror_flag=$ac_cxx_werror_flag
   ac_cxx_werror_flag=yes
   ac_cv_prog_cxx_g=no
   CXXFLAGS="-g"
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_cv_prog_cxx_g=yes
else
  CXXFLAGS=""
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :

else
  ac_cxx_werror_flag=$ac_save_cxx_werror_flag
	 CXXFLAGS="-g"
	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_cv_prog_cxx_g=yes
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
   ac_cxx_werror_flag=$ac_save_cxx_werror_flag
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cxx_g" >&5
$as_echo "$ac_cv_prog_cxx_g" >&6; }
if test "$ac_test_CXXFLAGS" = set; then
  CXXFLAGS=$ac_save_CXXFLAGS
elif test $ac_cv_prog_cxx_g = yes; then
  if test "$GXX" = yes; then
    CXXFLAGS="-g -O2"
  else
    CXXFLAGS="-g"
  fi
else
  if test "$GXX" = yes; then
    CXXFLAGS="-O2"
  else
    CXXFLAGS=
  fi
fi
ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

ac_ext=m
ac_cpp='$OBJCPP $CPPFLAGS'
ac_compile='$OBJC -c $OBJCFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$OBJC -o conftest$ac_exeext $OBJCFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_objc_compiler_gnu
if test -n "$ac_tool_prefix"; then
  for ac_prog in clang gcc
  do
    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
set dummy $ac_tool_prefix$ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_OBJC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$OBJC"; then
  ac_cv_prog_OBJC="$OBJC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_OBJC="$ac_tool_prefix$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
OBJC=$ac_cv_prog_OBJC
if test -n "$OBJC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OBJC" >&5
$as_echo "$OBJC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


    test -n "$OBJC" && break
  done
fi
if test -z "$OBJC"; then
  ac_ct_OBJC=$OBJC
  for ac_prog in clang gcc
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_ac_ct_OBJC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$ac_ct_OBJC"; then
  ac_cv_prog_ac_ct_OBJC="$ac_ct_OBJC" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_OBJC="$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
ac_ct_OBJC=$ac_cv_prog_ac_ct_OBJC
if test -n "$ac_ct_OBJC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_OBJC" >&5
$as_echo "$ac_ct_OBJC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$ac_ct_OBJC" && break
done

  if test "x$ac_ct_OBJC" = x; then
    OBJC="gcc"
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    OBJC=$ac_ct_OBJC
  fi
fi

# Provide some information about the compiler.
$as_echo "$as_me:${as_lineno-$LINENO}: checking for Objective C compiler version" >&5
set X $ac_compile
ac_compiler=$2
for ac_option in --version -v -V -qversion; do
  { { ac_try="$ac_compiler $ac_option >&5"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    sed '10a\
... rest of stderr output deleted ...
         10q' conftest.err >conftest.er1
    cat conftest.er1 >&5
  fi
  rm -f conftest.er1 conftest.err
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }
done

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU Objective C compiler" >&5
$as_echo_n "checking whether we are using the GNU Objective C compiler... " >&6; }
if ${ac_cv_objc_compiler_gnu+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{
#ifndef __GNUC__
       choke me
#endif

  ;
  return 0;
}
_ACEOF
if ac_fn_objc_try_compile "$LINENO"; then :
  ac_compiler_gnu=yes
else
  ac_compiler_gnu=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
ac_cv_objc_compiler_gnu=$ac_compiler_gnu

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_objc_compiler_gnu" >&5
$as_echo "$ac_cv_objc_compiler_gnu" >&6; }
if test $ac_compiler_gnu = yes; then
  GOBJC=yes
else
  GOBJC=
fi
ac_test_OBJCFLAGS=${OBJCFLAGS+set}
ac_save_OBJCFLAGS=$OBJCFLAGS
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $OBJC accepts -g" >&5
$as_echo_n "checking whether $OBJC accepts -g... " >&6; }
if ${ac_cv_prog_objc_g+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_save_objc_werror_flag=$ac_objc_werror_flag
   ac_objc_werror_flag=yes
   ac_cv_prog_objc_g=no
   OBJCFLAGS="-g"
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_objc_try_compile "$LINENO"; then :
  ac_cv_prog_objc_g=yes
else
  OBJCFLAGS=""
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_objc_try_compile "$LINENO"; then :

else
  ac_objc_werror_flag=$ac_save_objc_werror_flag
	 OBJCFLAGS="-g"
	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_objc_try_compile "$LINENO"; then :
  ac_cv_prog_objc_g=yes
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
   ac_objc_werror_flag=$ac_save_objc_werror_flag
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_objc_g" >&5
$as_echo "$ac_cv_prog_objc_g" >&6; }
if test "$ac_test_OBJCFLAGS" = set; then
  OBJCFLAGS=$ac_save_OBJCFLAGS
elif test $ac_cv_prog_objc_g = yes; then
  if test "$GOBJC" = yes; then
    OBJCFLAGS="-g -O2"
  else
    OBJCFLAGS="-g"
  fi
else
  if test "$GOBJC" = yes; then
    OBJCFLAGS="-O2"
  else
    OBJCFLAGS=
  fi
fi
ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

ac_ext=mm
ac_cpp='$OBJCXXCPP $CPPFLAGS'
ac_compile='$OBJCXX -c $OBJCXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$OBJCXX -o conftest$ac_exeext $OBJCXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_objcxx_compiler_gnu
if test -n "$ac_tool_prefix"; then
  for ac_prog in clang++ g++
  do
    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
set dummy $ac_tool_prefix$ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_OBJCXX+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$OBJCXX"; then
  ac_cv_prog_OBJCXX="$OBJCXX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_OBJCXX="$ac_tool_prefix$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
OBJCXX=$ac_cv_prog_OBJCXX
if test -n "$OBJCXX"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OBJCXX" >&5
$as_echo "$OBJCXX" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


    test -n "$OBJCXX" && break
  done
fi
if test -z "$OBJCXX"; then
  ac_ct_OBJCXX=$OBJCXX
  for ac_prog in clang++ g++
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_ac_ct_OBJCXX+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$ac_ct_OBJCXX"; then
  ac_cv_prog_ac_ct_OBJCXX="$ac_ct_OBJCXX" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_ac_ct_OBJCXX="$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
ac_ct_OBJCXX=$ac_cv_prog_ac_ct_OBJCXX
if test -n "$ac_ct_OBJCXX"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_OBJCXX" >&5
$as_echo "$ac_ct_OBJCXX" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$ac_ct_OBJCXX" && break
done

  if test "x$ac_ct_OBJCXX" = x; then
    OBJCXX="g++"
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    OBJCXX=$ac_ct_OBJCXX
  fi
fi

# Provide some information about the compiler.
$as_echo "$as_me:${as_lineno-$LINENO}: checking for Objective C++ compiler version" >&5
set X $ac_compile
ac_compiler=$2
for ac_option in --version -v -V -qversion; do
  { { ac_try="$ac_compiler $ac_option >&5"
case "(($ac_try" in
  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
  *) ac_try_echo=$ac_try;;
esac
eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
$as_echo "$ac_try_echo"; } >&5
  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
  ac_status=$?
  if test -s conftest.err; then
    sed '10a\
... rest of stderr output deleted ...
         10q' conftest.err >conftest.er1
    cat conftest.er1 >&5
  fi
  rm -f conftest.er1 conftest.err
  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
  test $ac_status = 0; }
done

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU Objective C++ compiler" >&5
$as_echo_n "checking whether we are using the GNU Objective C++ compiler... " >&6; }
if ${ac_cv_objcxx_compiler_gnu+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{
#ifndef __GNUC__
       choke me
#endif

  ;
  return 0;
}
_ACEOF
if ac_fn_objcxx_try_compile "$LINENO"; then :
  ac_compiler_gnu=yes
else
  ac_compiler_gnu=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
ac_cv_objcxx_compiler_gnu=$ac_compiler_gnu

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_objcxx_compiler_gnu" >&5
$as_echo "$ac_cv_objcxx_compiler_gnu" >&6; }
if test $ac_compiler_gnu = yes; then
  GOBJCXX=yes
else
  GOBJCXX=
fi
ac_test_OBJCXXFLAGS=${OBJCXXFLAGS+set}
ac_save_OBJCXXFLAGS=$OBJCXXFLAGS
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $OBJCXX accepts -g" >&5
$as_echo_n "checking whether $OBJCXX accepts -g... " >&6; }
if ${ac_cv_prog_objcxx_g+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_save_objcxx_werror_flag=$ac_objcxx_werror_flag
   ac_objcxx_werror_flag=yes
   ac_cv_prog_objcxx_g=no
   OBJCXXFLAGS="-g"
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_objcxx_try_compile "$LINENO"; then :
  ac_cv_prog_objcxx_g=yes
else
  OBJCXXFLAGS=""
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_objcxx_try_compile "$LINENO"; then :

else
  ac_objcxx_werror_flag=$ac_save_objcxx_werror_flag
	 OBJCXXFLAGS="-g"
	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_objcxx_try_compile "$LINENO"; then :
  ac_cv_prog_objcxx_g=yes
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
   ac_objcxx_werror_flag=$ac_save_objcx_werror_flag
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_objcxx_g" >&5
$as_echo "$ac_cv_prog_objcxx_g" >&6; }
if test "$ac_test_OBJCXXFLAGS" = set; then
  OBJCXXFLAGS=$ac_save_OBJCXXFLAGS
elif test $ac_cv_prog_objcxx_g = yes; then
  if test "$GOBJCXX" = yes; then
    OBJCXXFLAGS="-g -O2"
  else
    OBJCXXFLAGS="-g"
  fi
else
  if test "$GOBJCXX" = yes; then
    OBJCXXFLAGS="-O2"
  else
    OBJCXXFLAGS=
  fi
fi
ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu

ac_ext=cpp
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu


{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether GNU C++ compiler is default" >&5
$as_echo_n "checking whether GNU C++ compiler is default... " >&6; }
case "$GXX" in
  yes )
    GCC_VERSION=`$CC -dumpversion`
    GXX_VERSION=`$CXX -dumpversion`
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking version of gcc" >&5
$as_echo_n "checking version of gcc... " >&6; }
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $GCC_VERSION" >&5
$as_echo "$GCC_VERSION" >&6; }
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking version of g++" >&5
$as_echo_n "checking version of g++... " >&6; }
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $GXX_VERSION" >&5
$as_echo "$GXX_VERSION" >&6; }
    case "$GXX_VERSION" in
      0.* | 1.* | 2.*)
        { $as_echo "$as_me:${as_lineno-$LINENO}: old style GNU compiler" >&5
$as_echo "$as_me: old style GNU compiler" >&6;}
        $as_echo "#define OLD_GNU_COMPILER /**/" >>confdefs.h

      ;;
    esac
  ;;
  *)
    GCC_VERSION="none"
    GXX_VERSION="none"
    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: cannot find GNU C++ compiler" >&5
$as_echo "$as_me: WARNING: cannot find GNU C++ compiler" >&2;}
  ;;
esac


  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for C++ stack backtrace support" >&5
$as_echo_n "checking for C++ stack backtrace support... " >&6; }
  if test "$cross_compiling" = yes; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }

else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <stdio.h>
#include <stdlib.h>
#include <execinfo.h>
#include <cxxabi.h>

int
main ()
{

    FILE* out= stderr;
    unsigned int max_frames= 63;
    fprintf(out, "stack trace:\n");
    void* addrlist[max_frames+1];
    int addrlen = backtrace(addrlist, sizeof(addrlist) / sizeof(void*));
    if (addrlen == 0) return 1;
    char** symbollist = backtrace_symbols(addrlist, addrlen);
    size_t funcnamesize = 256;
    char* funcname = (char*)malloc(funcnamesize);
    for (int i = 1; i < addrlen; i++) {
        char *begin_name = 0, *begin_offset = 0, *end_offset = 0;
        for (char *p = symbollist[i]; *p; ++p) {
            if (*p == '(')
                begin_name = p;
            else if (*p == '+')
                begin_offset = p;
            else if (*p == ')' && begin_offset) {
                end_offset = p;
                break;
            }
        }
        if (begin_name && begin_offset && end_offset
            && begin_name < begin_offset)
        {
            *begin_name++ = '\0';
            *begin_offset++ = '\0';
            *end_offset = '\0';
            int status;
            char* ret = abi::__cxa_demangle(begin_name,
                                            funcname, &funcnamesize, &status);
            if (status == 0) {
                funcname = ret;
                fprintf(out, "  %s : %s+%s\n",
                        symbollist[i], funcname, begin_offset);
            }
            else {
                fprintf(out, "  %s : %s()+%s\n",
                        symbollist[i], begin_name, begin_offset);
            }
        }
        else fprintf(out, "  %s\n", symbollist[i]);
    }
    free(funcname);
    free(symbollist);
    return 0;

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }

$as_echo "#define USE_STACK_TRACE 1" >>confdefs.h


else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }

fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi



#--------------------------------------------------------------------
# Checks for standard functionality
#--------------------------------------------------------------------

# Standard C++ library


if test -n "$STDC_HEADERS";then
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts -stdlib=libstdc++" >&5
$as_echo_n "checking whether C++ compiler accepts -stdlib=libstdc++... " >&6; }
if ${ax_cv_check_cxxflags___stdlib_libstdcpp+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  -stdlib=libstdc++"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ax_cv_check_cxxflags___stdlib_libstdcpp=yes
else
  ax_cv_check_cxxflags___stdlib_libstdcpp=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cxxflags___stdlib_libstdcpp" >&5
$as_echo "$ax_cv_check_cxxflags___stdlib_libstdcpp" >&6; }
if test "x$ax_cv_check_cxxflags___stdlib_libstdcpp" = xyes; then :


  if [[ "-stdlib=libstdc++" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" -stdlib=libstdc++"
  elif [[ "-stdlib=libstdc++" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-stdlib=libstdc++"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" -stdlib=libstdc++"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])-stdlib=libstdc++($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -stdlib=libstdc++" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -stdlib=libstdc++" >&2;}
    else CXXFLAGS+=" -stdlib=libstdc++"
    fi
  fi


  if [[ "-stdlib=libstdc++" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" -stdlib=libstdc++"
  elif [[ "-stdlib=libstdc++" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-stdlib=libstdc++"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" -stdlib=libstdc++"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])-stdlib=libstdc++($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -stdlib=libstdc++" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -stdlib=libstdc++" >&2;}
    else CFLAGS+=" -stdlib=libstdc++"
    fi
  fi

	{ $as_echo "$as_me:${as_lineno-$LINENO}: added libstdc++ in compile flags" >&5
$as_echo "$as_me: added libstdc++ in compile flags" >&6;}
else
  :
fi



  { $as_echo "$as_me:${as_lineno-$LINENO}: checking stdlibc++ linking" >&5
$as_echo_n "checking stdlibc++ linking... " >&6; }
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <string>
#include <iostream>

int
main ()
{

std::string t="CompileMe";
std::cout <<t.size();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }

	{ $as_echo "$as_me:${as_lineno-$LINENO}: compiler has stdlibc++ support" >&5
$as_echo "$as_me: compiler has stdlibc++ support" >&6;}


else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
    as_fn_error $? "Not able to link with libstdc++" "$LINENO" 5

fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
fi

ac_ext=cpp
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking how to run the C++ preprocessor" >&5
$as_echo_n "checking how to run the C++ preprocessor... " >&6; }
if test -z "$CXXCPP"; then
  if ${ac_cv_prog_CXXCPP+:} false; then :
  $as_echo_n "(cached) " >&6
else
      # Double quotes because CXXCPP needs to be expanded
    for CXXCPP in "$CXX -E" "/lib/cpp"
    do
      ac_preproc_ok=false
for ac_cxx_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
  # <limits.h> exists even on freestanding compilers.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#ifdef __STDC__
# include <limits.h>
#else
# include <assert.h>
#endif
		     Syntax error
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :

else
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.i conftest.$ac_ext

  # OK, works on sane cases.  Now check whether nonexistent headers
  # can be detected and how.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <ac_nonexistent.h>
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  # Broken: success on invalid input.
continue
else
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.i conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.i conftest.err conftest.$ac_ext
if $ac_preproc_ok; then :
  break
fi

    done
    ac_cv_prog_CXXCPP=$CXXCPP

fi
  CXXCPP=$ac_cv_prog_CXXCPP
else
  ac_cv_prog_CXXCPP=$CXXCPP
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $CXXCPP" >&5
$as_echo "$CXXCPP" >&6; }
ac_preproc_ok=false
for ac_cxx_preproc_warn_flag in '' yes
do
  # Use a header file that comes with gcc, so configuring glibc
  # with a fresh cross-compiler works.
  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
  # <limits.h> exists even on freestanding compilers.
  # On the NeXT, cc -E runs the code through the compiler's parser,
  # not just through cpp. "Syntax error" is here to catch this case.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#ifdef __STDC__
# include <limits.h>
#else
# include <assert.h>
#endif
		     Syntax error
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :

else
  # Broken: fails on valid input.
continue
fi
rm -f conftest.err conftest.i conftest.$ac_ext

  # OK, works on sane cases.  Now check whether nonexistent headers
  # can be detected and how.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <ac_nonexistent.h>
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  # Broken: success on invalid input.
continue
else
  # Passes both tests.
ac_preproc_ok=:
break
fi
rm -f conftest.err conftest.i conftest.$ac_ext

done
# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
rm -f conftest.i conftest.err conftest.$ac_ext
if $ac_preproc_ok; then :

else
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "C++ preprocessor \"$CXXCPP\" fails sanity check
See \`config.log' for more details" "$LINENO" 5; }
fi

ac_ext=cpp
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu


{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for grep that handles long lines and -e" >&5
$as_echo_n "checking for grep that handles long lines and -e... " >&6; }
if ${ac_cv_path_GREP+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -z "$GREP"; then
  ac_path_GREP_found=false
  # Loop through the user's path and test for each of PROGNAME-LIST
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_prog in grep ggrep; do
    for ac_exec_ext in '' $ac_executable_extensions; do
      ac_path_GREP="$as_dir/$ac_prog$ac_exec_ext"
      as_fn_executable_p "$ac_path_GREP" || continue
# Check for GNU ac_path_GREP and select it if it is found.
  # Check for GNU $ac_path_GREP
case `"$ac_path_GREP" --version 2>&1` in
*GNU*)
  ac_cv_path_GREP="$ac_path_GREP" ac_path_GREP_found=:;;
*)
  ac_count=0
  $as_echo_n 0123456789 >"conftest.in"
  while :
  do
    cat "conftest.in" "conftest.in" >"conftest.tmp"
    mv "conftest.tmp" "conftest.in"
    cp "conftest.in" "conftest.nl"
    $as_echo 'GREP' >> "conftest.nl"
    "$ac_path_GREP" -e 'GREP$' -e '-(cannot match)-' < "conftest.nl" >"conftest.out" 2>/dev/null || break
    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
    as_fn_arith $ac_count + 1 && ac_count=$as_val
    if test $ac_count -gt ${ac_path_GREP_max-0}; then
      # Best one so far, save it but keep looking for a better one
      ac_cv_path_GREP="$ac_path_GREP"
      ac_path_GREP_max=$ac_count
    fi
    # 10*(2^10) chars as input seems more than enough
    test $ac_count -gt 10 && break
  done
  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
esac

      $ac_path_GREP_found && break 3
    done
  done
  done
IFS=$as_save_IFS
  if test -z "$ac_cv_path_GREP"; then
    as_fn_error $? "no acceptable grep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin" "$LINENO" 5
  fi
else
  ac_cv_path_GREP=$GREP
fi

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_GREP" >&5
$as_echo "$ac_cv_path_GREP" >&6; }
 GREP="$ac_cv_path_GREP"


{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for egrep" >&5
$as_echo_n "checking for egrep... " >&6; }
if ${ac_cv_path_EGREP+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if echo a | $GREP -E '(a|b)' >/dev/null 2>&1
   then ac_cv_path_EGREP="$GREP -E"
   else
     if test -z "$EGREP"; then
  ac_path_EGREP_found=false
  # Loop through the user's path and test for each of PROGNAME-LIST
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_prog in egrep; do
    for ac_exec_ext in '' $ac_executable_extensions; do
      ac_path_EGREP="$as_dir/$ac_prog$ac_exec_ext"
      as_fn_executable_p "$ac_path_EGREP" || continue
# Check for GNU ac_path_EGREP and select it if it is found.
  # Check for GNU $ac_path_EGREP
case `"$ac_path_EGREP" --version 2>&1` in
*GNU*)
  ac_cv_path_EGREP="$ac_path_EGREP" ac_path_EGREP_found=:;;
*)
  ac_count=0
  $as_echo_n 0123456789 >"conftest.in"
  while :
  do
    cat "conftest.in" "conftest.in" >"conftest.tmp"
    mv "conftest.tmp" "conftest.in"
    cp "conftest.in" "conftest.nl"
    $as_echo 'EGREP' >> "conftest.nl"
    "$ac_path_EGREP" 'EGREP$' < "conftest.nl" >"conftest.out" 2>/dev/null || break
    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
    as_fn_arith $ac_count + 1 && ac_count=$as_val
    if test $ac_count -gt ${ac_path_EGREP_max-0}; then
      # Best one so far, save it but keep looking for a better one
      ac_cv_path_EGREP="$ac_path_EGREP"
      ac_path_EGREP_max=$ac_count
    fi
    # 10*(2^10) chars as input seems more than enough
    test $ac_count -gt 10 && break
  done
  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
esac

      $ac_path_EGREP_found && break 3
    done
  done
  done
IFS=$as_save_IFS
  if test -z "$ac_cv_path_EGREP"; then
    as_fn_error $? "no acceptable egrep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin" "$LINENO" 5
  fi
else
  ac_cv_path_EGREP=$EGREP
fi

   fi
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_EGREP" >&5
$as_echo "$ac_cv_path_EGREP" >&6; }
 EGREP="$ac_cv_path_EGREP"


{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for ANSI C header files" >&5
$as_echo_n "checking for ANSI C header files... " >&6; }
if ${ac_cv_header_stdc+:} false; then :
  $as_echo_n "(cached) " >&6
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <float.h>

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  ac_cv_header_stdc=yes
else
  ac_cv_header_stdc=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext

if test $ac_cv_header_stdc = yes; then
  # SunOS 4.x string.h does not declare mem*, contrary to ANSI.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <string.h>

_ACEOF
if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
  $EGREP "memchr" >/dev/null 2>&1; then :

else
  ac_cv_header_stdc=no
fi
rm -f conftest*

fi

if test $ac_cv_header_stdc = yes; then
  # ISC 2.0.2 stdlib.h does not declare free, contrary to ANSI.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <stdlib.h>

_ACEOF
if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
  $EGREP "free" >/dev/null 2>&1; then :

else
  ac_cv_header_stdc=no
fi
rm -f conftest*

fi

if test $ac_cv_header_stdc = yes; then
  # /bin/cc in Irix-4.0.5 gets non-ANSI ctype macros unless using -ansi.
  if test "$cross_compiling" = yes; then :
  :
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <ctype.h>
#include <stdlib.h>
#if ((' ' & 0x0FF) == 0x020)
# define ISLOWER(c) ('a' <= (c) && (c) <= 'z')
# define TOUPPER(c) (ISLOWER(c) ? 'A' + ((c) - 'a') : (c))
#else
# define ISLOWER(c) \
		   (('a' <= (c) && (c) <= 'i') \
		     || ('j' <= (c) && (c) <= 'r') \
		     || ('s' <= (c) && (c) <= 'z'))
# define TOUPPER(c) (ISLOWER(c) ? ((c) | 0x40) : (c))
#endif

#define XOR(e, f) (((e) && !(f)) || (!(e) && (f)))
int
main ()
{
  int i;
  for (i = 0; i < 256; i++)
    if (XOR (islower (i), ISLOWER (i))
	|| toupper (i) != TOUPPER (i))
      return 2;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

else
  ac_cv_header_stdc=no
fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

fi
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_header_stdc" >&5
$as_echo "$ac_cv_header_stdc" >&6; }
if test $ac_cv_header_stdc = yes; then

$as_echo "#define STDC_HEADERS 1" >>confdefs.h

fi

# On IRIX 5.3, sys/types and inttypes.h are conflicting.
for ac_header in sys/types.h sys/stat.h stdlib.h string.h memory.h strings.h \
		  inttypes.h stdint.h unistd.h
do :
  as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
ac_fn_cxx_check_header_compile "$LINENO" "$ac_header" "$as_ac_Header" "$ac_includes_default
"
if eval test \"x\$"$as_ac_Header"\" = x"yes"; then :
  cat >>confdefs.h <<_ACEOF
#define `$as_echo "HAVE_$ac_header" | $as_tr_cpp` 1
_ACEOF

fi

done


ac_fn_cxx_check_type "$LINENO" "FILE" "ac_cv_type_FILE" "$ac_includes_default"
if test "x$ac_cv_type_FILE" = xyes; then :

cat >>confdefs.h <<_ACEOF
#define HAVE_FILE 1
_ACEOF


fi

ac_fn_cxx_check_type "$LINENO" "intptr_t" "ac_cv_type_intptr_t" "$ac_includes_default"
if test "x$ac_cv_type_intptr_t" = xyes; then :

cat >>confdefs.h <<_ACEOF
#define HAVE_INTPTR_T 1
_ACEOF


fi

ac_fn_cxx_check_type "$LINENO" "time_t" "ac_cv_type_time_t" "$ac_includes_default"
if test "x$ac_cv_type_time_t" = xyes; then :

cat >>confdefs.h <<_ACEOF
#define HAVE_TIME_T 1
_ACEOF


fi

for ac_header in pty.h util.h
do :
  as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
ac_fn_cxx_check_header_mongrel "$LINENO" "$ac_header" "$as_ac_Header" "$ac_includes_default"
if eval test \"x\$"$as_ac_Header"\" = x"yes"; then :
  cat >>confdefs.h <<_ACEOF
#define `$as_echo "HAVE_$ac_header" | $as_tr_cpp` 1
_ACEOF

fi

done

for ac_func in gettimeofday
do :
  ac_fn_cxx_check_func "$LINENO" "gettimeofday" "ac_cv_func_gettimeofday"
if test "x$ac_cv_func_gettimeofday" = xyes; then :
  cat >>confdefs.h <<_ACEOF
#define HAVE_GETTIMEOFDAY 1
_ACEOF

fi
done




# Check whether --with-tmrepo was given.
if test "${with_tmrepo+set}" = set; then :
  withval=$with_tmrepo; TMREPO=${withval%%/}
fi


  if test -n "$TMREPO" -a "$TMREPO" != no
  then
    if test -d "$TMREPO"; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: Using TeXmacs SDK at $TMREPO" >&5
$as_echo "$as_me: Using TeXmacs SDK at $TMREPO" >&6;}
else
  as_fn_error $? "tmrepo path not found" "$LINENO" 5
fi
    PATH=$TMREPO/bin:$PATH

    # memorize current pkgconfig location
    if test -x "$(type -P pkg-config)"
    then oldpkgdefault=$(pkg-config --variable pc_path pkg-config)
      if test -n "$oldpkgdefault"
      then oldpkgconfig="$oldpkgdefault"
      else oldpkgconfig=/usr/lib/pkgconfig:/usr/share/lib/pkgconfig
      fi
    else { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: pkg-config not found : configuration may fail" >&5
$as_echo "$as_me: WARNING: pkg-config not found : configuration may fail" >&2;}
    fi

    export PKG_CONFIG_PATH="$TMREPO/lib/pkgconfig:$PKG_CONFIG_PATH:$oldpkgconfig"

  LC_MERGE_FLAGS_list="-I$TMREPO/include"
  if [[ "CPPFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-I$TMREPO/include"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CPPFLAGS)" # remove unnecessary spaces and add a heading space
  CPPFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CPPFLAGS" = "$LC_GETPOP_FLAG_1"
  then CPPFLAGS=${CPPFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CPPFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CPPFLAGS=$(echo $CPPFLAGS)
    else CPPFLAGS=$(echo $CPPFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CPPFLAGS)" # remove unnecessary spaces and add a heading space
  CPPFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CPPFLAGS" = "$LC_GETPOP_FLAG_1"
  then CPPFLAGS=${CPPFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CPPFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CPPFLAGS=$(echo $CPPFLAGS)
    else CPPFLAGS=$(echo $CPPFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CPPFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CPPFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CPPFLAGS

  unset STRIP_ARG_memo
  if test "$CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CPPFLAGS=
  else  while test "$CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CPPFLAGS"
        CPPFLAGS="${CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CPPFLAGS="${CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CPPFLAGS="${CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CPPFLAGS=$(echo $CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CPPFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CPPFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

    # LC_SCATTER_FLAGS([-I$TMREPO/include],[BASE])

  LC_MERGE_FLAGS_list="-L$TMREPO/lib"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-L$TMREPO/lib"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


    REPOPATH="export PATH=$PATH"

    PKGPATH="export PKG_CONFIG_PATH=$PKG_CONFIG_PATH"

  fi


  CONFIG_OS_SUFFIX="${host}"
  CONFIG_OS_COMPAT="Unix"
  CONFIG_MACOS=""
  CONFIG_CXXFLAGS=""
  CONFIG_CXXTEMPLATE=""
  CONFIG_STD_SETENV="#define STD_SETENV"
  CONFIG_SO="so"
  CONFIG_LIB_PATH="LD_LIBRARY_PATH"
  CONFIG_CHMOD="chmod -f"
  CONFIG_CXXOPTIMIZE="-O2"
  CONFIG_BSTATIC="-lXdmcp -lXau -lXrender"
  CONFIG_BSHARED="-Wl,-Bdynamic"
  CONFIG_BFLAGS=""
  CONFIG_BPATH="-Wl,-rpath,"
  CONFIG_HOST_OS="$host_os"
  CONFIG_HOST_VENDOR="$host_vendor"
  CONFIG_HOST_CPU="$host_cpu"
  CONFIG_USER="$USER"
  CONFIG_DATE="`date`"
  CONFIG_QTPIPES="no"
  type rsync && CONFIG_CP="rsync -a --exclude='.*'" || CONFIG_CP="cp -f -R -p"
  # tweak for XCode project
  CONFIG_ARCHS='$(NATIVE_ARCH)'

  X11_CFLAGS="$X_CFLAGS"
  X11_LDFLAGS="$X_LIBS -lXext -lX11"



  CFLAGS__ax_save_flags=$CFLAGS



  CPPFLAGS__ax_save_flags=$CPPFLAGS



  CXXFLAGS__ax_save_flags=$CXXFLAGS



  LDFLAGS__ax_save_flags=$LDFLAGS



  LIBS__ax_save_flags=$LIBS



  OBJCFLAGS__ax_save_flags=$OBJCFLAGS



  OBJCXXFLAGS__ax_save_flags=$OBJCXXFLAGS





  unset CFLAGS;unset CXXFLAGS;unset CPPFLAGS;unset LDFLAGS;unset LIBS;
  # The cast to long int works around a bug in the HP C Compiler
# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects
# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.
# This bug is HP SR number 8606223364.
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking size of void *" >&5
$as_echo_n "checking size of void *... " >&6; }
if ${ac_cv_sizeof_void_p+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if ac_fn_cxx_compute_int "$LINENO" "(long int) (sizeof (void *))" "ac_cv_sizeof_void_p"        "$ac_includes_default"; then :

else
  if test "$ac_cv_type_void_p" = yes; then
     { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error 77 "cannot compute sizeof (void *)
See \`config.log' for more details" "$LINENO" 5; }
   else
     ac_cv_sizeof_void_p=0
   fi
fi

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_void_p" >&5
$as_echo "$ac_cv_sizeof_void_p" >&6; }



cat >>confdefs.h <<_ACEOF
#define SIZEOF_VOID_P $ac_cv_sizeof_void_p
_ACEOF


  # The cast to long int works around a bug in the HP C Compiler,
# see AC_CHECK_SIZEOF for more information.
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking alignment of void *" >&5
$as_echo_n "checking alignment of void *... " >&6; }
if ${ac_cv_alignof_void_p+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if ac_fn_cxx_compute_int "$LINENO" "(long int) offsetof (ac__type_alignof_, y)" "ac_cv_alignof_void_p"        "$ac_includes_default
#ifndef offsetof
# define offsetof(type, member) ((char *) &((type *) 0)->member - (char *) 0)
#endif
typedef struct { char x; void * y; } ac__type_alignof_;"; then :

else
  if test "$ac_cv_type_void_p" = yes; then
     { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error 77 "cannot compute alignment of void *
See \`config.log' for more details" "$LINENO" 5; }
   else
     ac_cv_alignof_void_p=0
   fi
fi

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_alignof_void_p" >&5
$as_echo "$ac_cv_alignof_void_p" >&6; }



cat >>confdefs.h <<_ACEOF
#define ALIGNOF_VOID_P $ac_cv_alignof_void_p
_ACEOF


  if [[ $ac_cv_sizeof_void_p -eq 0 || $ac_cv_alignof_void_p -eq 0 ]]
  then as_fn_error $? "Cannot determine the machine size" "$LINENO" 5
  fi

cat >>confdefs.h <<_ACEOF
#define WORD_LENGTH $ac_cv_sizeof_void_p
_ACEOF


cat >>confdefs.h <<_ACEOF
#define WORD_LENGTH_INC $(($ac_cv_sizeof_void_p - 1))
_ACEOF


  { $as_echo "$as_me:${as_lineno-$LINENO}: Sizeof integer: $ac_cv_sizeof_void_p" >&5
$as_echo "$as_me: Sizeof integer: $ac_cv_sizeof_void_p" >&6;}

cat >>confdefs.h <<_ACEOF
#define WORD_MASK $( printf 0x%x $(( (~($ac_cv_alignof_void_p - 1)) & ((256 ** ac_cv_sizeof_void_p) -1) )))
_ACEOF


$as_echo "#define MAX_FAST 264 " >>confdefs.h


  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags






  { $as_echo "$as_me:${as_lineno-$LINENO}: checking final adjustments for" >&5
$as_echo_n "checking final adjustments for... " >&6; }
  case "${host}" in
    x86_64-*-linux*)
      CONFIG_OS_SUFFIX="x86_64-pc-linux-gnu"

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: an Intel or AMD GNU/Linux host" >&5
$as_echo "an Intel or AMD GNU/Linux host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_PACKAGE=GENERIC_PACKAGE

      CONFIG_OS="GNU_LINUX"
      CONFIG_CXXOPTIMIZE="-O3 -fexpensive-optimizations"
      CONFIG_QTPIPES="yes"

$as_echo "#define STACK_SIZE 0x1000000" >>confdefs.h

      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for XML_ParserCreate in -lexpat" >&5
$as_echo_n "checking for XML_ParserCreate in -lexpat... " >&6; }
if ${ac_cv_lib_expat_XML_ParserCreate+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lexpat  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char XML_ParserCreate ();
int
main ()
{
return XML_ParserCreate ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_expat_XML_ParserCreate=yes
else
  ac_cv_lib_expat_XML_ParserCreate=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_expat_XML_ParserCreate" >&5
$as_echo "$ac_cv_lib_expat_XML_ParserCreate" >&6; }
if test "x$ac_cv_lib_expat_XML_ParserCreate" = xyes; then :
  CONFIG_BSTATIC="-lexpat $CONFIG_BSTATIC";CONFIG_STYPE=A
fi

      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for xcb_disconnect in -lxcb" >&5
$as_echo_n "checking for xcb_disconnect in -lxcb... " >&6; }
if ${ac_cv_lib_xcb_xcb_disconnect+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lxcb  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char xcb_disconnect ();
int
main ()
{
return xcb_disconnect ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_xcb_xcb_disconnect=yes
else
  ac_cv_lib_xcb_xcb_disconnect=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_xcb_xcb_disconnect" >&5
$as_echo "$ac_cv_lib_xcb_xcb_disconnect" >&6; }
if test "x$ac_cv_lib_xcb_xcb_disconnect" = xyes; then :
  CONFIG_BSTATIC="-lxcb $CONFIG_BSTATIC";CONFIG_STYPE=B
fi


    ;;
    i*86-*-linux*)
      CONFIG_OS_SUFFIX="i386-pc-linux-gnu"

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: an Intel or AMD GNU/Linux host" >&5
$as_echo "an Intel or AMD GNU/Linux host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_PACKAGE=GENERIC_PACKAGE

      CONFIG_OS="GNU_LINUX"
      CONFIG_CXXOPTIMIZE="-O3 -fexpensive-optimizations"
      CONFIG_QTPIPES="yes"

$as_echo "#define STACK_SIZE 0x1000000" >>confdefs.h

      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for XML_ParserCreate in -lexpat" >&5
$as_echo_n "checking for XML_ParserCreate in -lexpat... " >&6; }
if ${ac_cv_lib_expat_XML_ParserCreate+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lexpat  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char XML_ParserCreate ();
int
main ()
{
return XML_ParserCreate ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_expat_XML_ParserCreate=yes
else
  ac_cv_lib_expat_XML_ParserCreate=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_expat_XML_ParserCreate" >&5
$as_echo "$ac_cv_lib_expat_XML_ParserCreate" >&6; }
if test "x$ac_cv_lib_expat_XML_ParserCreate" = xyes; then :
  CONFIG_BSTATIC="-lexpat $CONFIG_BSTATIC";CONFIG_STYPE=A
fi

      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for xcb_disconnect in -lxcb" >&5
$as_echo_n "checking for xcb_disconnect in -lxcb... " >&6; }
if ${ac_cv_lib_xcb_xcb_disconnect+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lxcb  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char xcb_disconnect ();
int
main ()
{
return xcb_disconnect ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_xcb_xcb_disconnect=yes
else
  ac_cv_lib_xcb_xcb_disconnect=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_xcb_xcb_disconnect" >&5
$as_echo "$ac_cv_lib_xcb_xcb_disconnect" >&6; }
if test "x$ac_cv_lib_xcb_xcb_disconnect" = xyes; then :
  CONFIG_BSTATIC="-lxcb $CONFIG_BSTATIC";CONFIG_STYPE=B
fi


    ;;
    i*86-*-freebsd* | x86_64-*-freebsd*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: an Intel or AMD GNU/BSD host" >&5
$as_echo "an Intel or AMD GNU/BSD host" >&6; }

$as_echo "#define OS_FREEBSD 1" >>confdefs.h

      CONFIG_OS="FREEBSD"
      CONFIG_QTPIPES="yes"
      CPPFLAGS="$CPPFLAGS -I/usr/local/include -I."
      CONFIG_CXXOPTIMIZE="-O3 -fexpensive-optimizations"
    ;;
    i*86-*-solaris*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: an Intel or AMS Solaris host" >&5
$as_echo "an Intel or AMS Solaris host" >&6; }

$as_echo "#define OS_SOLARIS 1" >>confdefs.h

      CONFIG_OS="SOLARIS"
      CONFIG_CXXOPTIMIZE="-O3"
      CONFIG_BPATH="-Wl,-R,"
      X11_LDFLAGS="$X_LIBS -lXext -lX11 -lsocket"
    ;;
    *mingw*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: for mingw host" >&5
$as_echo "for mingw host" >&6; }

$as_echo "#define OS_MINGW (defined (__MINGW__) || defined (__MINGW32__))" >>confdefs.h

      CONFIG_BUNDLE=WINDOWS_BUNDLE

      CONFIG_PACKAGE=WINDOWS_PACKAGE

      CONFIG_OS=MINGW
      CONFIG_CXXOPTIMIZE="-O3 -fexpensive-optimizations"
      CONFIG_QTPIPES="yes"
      CONFIG_OS_COMPAT="Windows"
      CPPFLAGS="$CPPFLAGS -I/usr/local/include -IPlugins/Windows -I."
      GUILE_LDFLAGS="-lmingwex $GUILE_LDFLAGS -lintl" #added mingwex to mask the internal guile readdir function

  if [[ "-Wl,--stack=16777216" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" -Wl,--stack=16777216"
  elif [[ "-Wl,--stack=16777216" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-Wl,--stack=16777216"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" -Wl,--stack=16777216"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])-Wl,--stack=16777216($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -Wl" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -Wl" >&2;}
    else LDFLAGS+=" -Wl,--stack=16777216"
    fi
  fi

    ;;
    *-*-cygwin)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: cygwin host" >&5
$as_echo "cygwin host" >&6; }

$as_echo "#define OS_CYGWIN 1" >>confdefs.h

      CONFIG_OS="CYGWIN"
      CONFIG_QTPIPES="yes"
      CONFIG_BFLAGS="-Wl,-stack,8388608"
    ;;
    *apple*darwin*)
      echo "$ac_t""for a MacOS host" 1>&6

$as_echo "#define OS_MACOS 1" >>confdefs.h

      CONFIG_BUNDLE=MACOS_BUNDLE

      CONFIG_PACKAGE=MACOS_PACKAGE

      CONFIG_OS="MACOS"
      CONFIG_QTPIPES="yes"
      CONFIG_CXXFLAGS="-I${prefix}/include"
      CONFIG_CXXOPTIMIZE="-O2 -mfpmath=sse -msse2"
      CONFIG_BSHARED=""
      CONFIG_BFLAGS="-framework Cocoa -framework IOKit"
      CONFIG_BPATH=""
      CONFIG_SO="dylib"
      CONFIG_LIB_PATH="DYLD_LIBRARY_PATH"

  if [[ "-Wl,-stack_size,0x1000000,-headerpad_max_install_names" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" -Wl,-stack_size,0x1000000,-headerpad_max_install_names"
  elif [[ "-Wl,-stack_size,0x1000000,-headerpad_max_install_names" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-Wl,-stack_size,0x1000000,-headerpad_max_install_names"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" -Wl,-stack_size,0x1000000,-headerpad_max_install_names"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])-Wl,-stack_size,0x1000000,-headerpad_max_install_names($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -Wl" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -Wl" >&2;}
    else LDFLAGS+=" -Wl,-stack_size,0x1000000,-headerpad_max_install_names"
    fi
  fi

      test -z "$with_tmrepo" -a -d /sw/include -a -d /sw/lib &&

  LC_SCATTER_FLAGS_list="-I/sw/include -L/sw/lib"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CPPFLAGS

  unset STRIP_ARG_memo
  if test "$CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CPPFLAGS=
  else  while test "$CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CPPFLAGS"
        CPPFLAGS="${CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CPPFLAGS="${CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CPPFLAGS="${CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CPPFLAGS=$(echo $CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CPPFLAGS

  unset STRIP_ARG_memo
  if test "$CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CPPFLAGS=
  else  while test "$CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CPPFLAGS"
        CPPFLAGS="${CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CPPFLAGS="${CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CPPFLAGS="${CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CPPFLAGS=$(echo $CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib " >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib " >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

      test -z "$with_tmrepo" -a -d /opt/local/include -a -d /opt/local/lib &&

  LC_SCATTER_FLAGS_list="-I/opt/local/include -L/opt/local/lib"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CPPFLAGS

  unset STRIP_ARG_memo
  if test "$CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CPPFLAGS=
  else  while test "$CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CPPFLAGS"
        CPPFLAGS="${CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CPPFLAGS="${CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CPPFLAGS="${CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CPPFLAGS=$(echo $CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CPPFLAGS

  unset STRIP_ARG_memo
  if test "$CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CPPFLAGS=
  else  while test "$CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CPPFLAGS"
        CPPFLAGS="${CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CPPFLAGS="${CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CPPFLAGS="${CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CPPFLAGS=$(echo $CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib " >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib " >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

    ;;
    *darwin*)
      echo "$ac_t""for a generic Darwin host" 1>&6

$as_echo "#define OS_DARWIN 1" >>confdefs.h

      CONFIG_OS="DARWIN"
      CONFIG_CXXFLAGS="-I${prefix}/include"
      CONFIG_BSHARED=""
      CONFIG_BPATH=""
      CONFIG_SO="dylib"
      CONFIG_LIB_PATH="DYLD_LIBRARY_PATH"
    ;;
    *haiku*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: a generic Haiku host" >&5
$as_echo "a generic Haiku host" >&6; }

$as_echo "#define OS_HAIKU 1" >>confdefs.h

      CONFIG_OS="HAIKU"
      CONFIG_QTPIPES="yes"
      CONFIG_CXXOPTIMIZE="-O3 -fexpensive-optimizations"
    ;;
    powerpc-*-linux*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: a PowerPC/GNU-linux host" >&5
$as_echo "a PowerPC/GNU-linux host" >&6; }

$as_echo "#define OS_POWERPC_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="POWERPC_GNU_LINUX"
      CONFIG_CXXOPTIMIZE="-O3 -fexpensive-optimizations"
    ;;
    *sun*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: a SUN/solaris host" >&5
$as_echo "a SUN/solaris host" >&6; }

$as_echo "#define OS_SUN 1" >>confdefs.h

      CONFIG_OS="SUN"
      CONFIG_BSTATIC=""
      CONFIG_BSHARED=""
      CONFIG_BPATH="-Wl,-R,"
      X11_LDFLAGS="$X_LIBS -lXext -lX11 -lsocket"

cat >>confdefs.h <<_ACEOF
#define WORD_LENGTH 8
_ACEOF


cat >>confdefs.h <<_ACEOF
#define WORD_LENGTH_INC 7
_ACEOF


cat >>confdefs.h <<_ACEOF
#define WORD_MASK $( printf 0x%x 0xfffffff8)
_ACEOF

      CONFIG_MAX_FAST="264 // WORD_LENGTH more than power of 2"
      CONFIG_STD_SETENV=""
    ;;
    sparc*-*-linux*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: a Sparc host running GNU/Linux" >&5
$as_echo "a Sparc host running GNU/Linux" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="GNU_LINUX"
      CONFIG_CXXOPTIMIZE="-O3 -fexpensive-optimizations"

cat >>confdefs.h <<_ACEOF
#define WORD_LENGTH 8
_ACEOF


cat >>confdefs.h <<_ACEOF
#define WORD_LENGTH_INC 7
_ACEOF


cat >>confdefs.h <<_ACEOF
#define WORD_MASK $( printf 0x%x 0xfffffff8)
_ACEOF

      CONFIG_MAX_FAST="264 // WORD_LENGTH more than power of 2"
      CONFIG_STD_SETENV=""
    ;;
    *dec*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: a DEC/alpha host" >&5
$as_echo "a DEC/alpha host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="GNU_LINUX"
      CONFIG_BSTATIC=""
      CONFIG_BSHARED="-shared"
      CONFIG_STD_SETENV=""
    ;;
    *alpha*-*-linux*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: an Alpha GNU/Linux host" >&5
$as_echo "an Alpha GNU/Linux host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="GNU_LINUX"
      CONFIG_BSTATIC=""
      CONFIG_BSHARED="-shared"
    ;;
    s390-*-linux*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: an IBM S/390 GNU/Linux host" >&5
$as_echo "an IBM S/390 GNU/Linux host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="GNU_LINUX"
      CONFIG_STD_SETENV=""
    ;;
    ia64-*-linux*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: an Itanium GNU/Linux host" >&5
$as_echo "an Itanium GNU/Linux host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="GNU_LINUX"
      CONFIG_BSTATIC=""
      CONFIG_BSHARED="-shared"
    ;;
    hppa*-*-linux*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: an HP PA_RISC GNU/Linux host" >&5
$as_echo "an HP PA_RISC GNU/Linux host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="GNU_LINUX"
      CONFIG_CXXFLAGS="$CONFIG_CXXFLAGS -fPIC"
      CONFIG_BSTATIC=""
      CONFIG_BSHARED="-shared"
    ;;
    *sgi-irix*)
      echo "$ac_t""for a SGI/Irix host" 1>&6

$as_echo "#define OS_IRIX 1" >>confdefs.h

      CONFIG_OS="IRIX"
      CONFIG_CXXFLAGS=""
      X_LIBS=-L/usr/lib32
      CONFIG_BSTATIC=""
      CONFIG_BSHARED=""
      CONFIG_BPATH=""
      X11_LDFLAGS="$X_LIBS -lX11"

cat >>confdefs.h <<_ACEOF
#define WORD_MASK $( printf 0x%x 0xfffffff8)
_ACEOF

      CONFIG_STD_SETENV=""
      CONFIG_CHMOD="chmod"
      CONFIG_LIB_PATH="LD_LIBRARYN32_PATH"
    ;;
    m68k-*-linux* | mips-*-linux* | mipsel-*-linux* | arm*-*-linux*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: a supported GNU/Linux host" >&5
$as_echo "a supported GNU/Linux host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="GNU_LINUX"
    ;;
    *-linux*)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: a generic GNU/Linux host" >&5
$as_echo "a generic GNU/Linux host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="GNU_LINUX"
    ;;
    *)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: a generic host" >&5
$as_echo "a generic host" >&6; }

$as_echo "#define OS_GNU_LINUX 1" >>confdefs.h

      CONFIG_OS="GNU_LINUX"
    ;;
  esac

  case "${host}" in
    *apple*darwin10*)
      echo "$ac_t""Xcode 3.2 project tweak (only MacOSX 10.6)" 1>&6
      CONFIG_ARCHS='$(NATIVE_ARCH_ACTUAL)'
    ;;
    arm*apple*darwin*)
      echo "$ac_t""Adjust optimization flag for Apple M1" 1>&6
      CONFIG_CXXOPTIMIZE="-O2"
    ;;
  esac

  case "$GXX_VERSION" in
    3.* | 4.*)
#     CONFIG_BSTATIC="-static"
      CONFIG_BSHARED="-dynamic"
    ;;
  esac































  # Check whether --enable-static was given.
if test "${enable_static+set}" = set; then :
  enableval=$enable_static; { $as_echo "$as_me:${as_lineno-$LINENO}: Link with static librairies enabled" >&5
$as_echo "$as_me: Link with static librairies enabled" >&6;}
else

    if test -n "$TMREPO" -a $CONFIG_OS == MACOS
      then enableval="yes"
      else enableval="no"
    fi

fi


  unset LNSTATIC SEMISTATIC SEMIDYNAMIC MAC
  if [[ "$enableval" != no ]]
  then case $CONFIG_OS in
    LINUX|MINGW)
      LNSTATIC="-static"

  if [[ "-static" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" -static"
  elif [[ "-static" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-static"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" -static"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])-static($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -static" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -static" >&2;}
    else CFLAGS+=" -static"
    fi
  fi


  if [[ "-static" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" -static"
  elif [[ "-static" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-static"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" -static"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])-static($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -static" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -static" >&2;}
    else CXXFLAGS+=" -static"
    fi
  fi

      { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: statically link main libraries for linux" >&5
$as_echo "$as_me: WARNING: statically link main libraries for linux" >&2;}
      ;;
    MACOS)

  if [[ "-Wl,-search_paths_first" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" -Wl,-search_paths_first"
  elif [[ "-Wl,-search_paths_first" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-Wl,-search_paths_first"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" -Wl,-search_paths_first"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])-Wl,-search_paths_first($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -Wl" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -Wl" >&2;}
    else LDFLAGS+=" -Wl,-search_paths_first"
    fi
  fi

      { $as_echo "$as_me:${as_lineno-$LINENO}: statically link main libraries for MacOS X" >&5
$as_echo "$as_me: statically link main libraries for MacOS X" >&6;}
      ;;
    *) as_fn_error $? "static link not supported" "$LINENO" 5;;
    esac
  fi


#--------------------------------------------------------------------
# External libraries, functions and binaries
#--------------------------------------------------------------------





# Check whether --with-guile was given.
if test "${with_guile+set}" = set; then :
  withval=$with_guile; if test "$withval" == no; then :
  as_fn_error $? "cannot work without Guile" "$LINENO" 5
elif test "$withval" = yes; then :
  unset withval
fi
else
  unset withval
fi



  location=$withval





  if test "$location" = "embedded"; then :
  unset location
elif test -z $location; then :

    # build the prefered guile version search line

    for ac_prog in guile18-config guile1.8-config guile16-config guile1.6-config guile1-config guile-config guile20-config guile2.0-config guile2-config
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_prog_GUILE_CONFIG+:} false; then :
  $as_echo_n "(cached) " >&6
else
  if test -n "$GUILE_CONFIG"; then
  ac_cv_prog_GUILE_CONFIG="$GUILE_CONFIG" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_prog_GUILE_CONFIG="$ac_prog"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

fi
fi
GUILE_CONFIG=$ac_cv_prog_GUILE_CONFIG
if test -n "$GUILE_CONFIG"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $GUILE_CONFIG" >&5
$as_echo "$GUILE_CONFIG" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$GUILE_CONFIG" && break
done


else
  GUILE_CONFIG=$location
fi

  if test -n "$GUILE_CONFIG"; then :

    GUILE_CONFIG=$(type -p $GUILE_CONFIG)
    LC_WITH_GUILE_tmp1="$($GUILE_CONFIG link)"
    LC_WITH_GUILE_tmp1="$LC_WITH_GUILE_tmp1 $($GUILE_CONFIG compile)"
    LC_WITH_GUILE_tmp1="$LC_WITH_GUILE_tmp1 -I$($GUILE_CONFIG info includedir)"
    LC_WITH_GUILE_tmp1="$LC_WITH_GUILE_tmp1 -I$($GUILE_CONFIG info pkgincludedir)"
    # get th version with guile-config or guile. keep the same naming with guile version
    # ie: guile18-config -> guile18
    { GUILE_VERSION=$($GUILE_CONFIG info guileversion) ||     GUILE_VERSION=$(${GUILE_CONFIG%%-*} -c '(display (version))'); }
    GUILE_VERSION=${GUILE_VERSION:-0}
    GUILE_VERSION_TAIL=${GUILE_VERSION#*.*.}
    GUILE_VERSION=${GUILE_VERSION%.$GUILE_VERSION_TAIL}
    GUILE_DATA_PATH=$($GUILE_CONFIG info pkgdatadir)/${GUILE_VERSION}



  unset GUILE_CFLAGS;unset GUILE_CXXFLAGS;unset GUILE_CPPFLAGS;unset GUILE_LDFLAGS;unset GUILE_LIBS;

  LC_SCATTER_FLAGS_list="$LC_WITH_GUILE_tmp1"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $GUILE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_LDFLAGS=
  else  while test "$GUILE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_LDFLAGS"
        GUILE_LDFLAGS="${GUILE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_LDFLAGS="${GUILE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_LDFLAGS="${GUILE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_LDFLAGS=$(echo $GUILE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$GUILE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then GUILE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $GUILE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_CPPFLAGS=
  else  while test "$GUILE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_CPPFLAGS"
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_CPPFLAGS=$(echo $GUILE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$GUILE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else GUILE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then GUILE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $GUILE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_CPPFLAGS=
  else  while test "$GUILE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_CPPFLAGS"
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_CPPFLAGS=$(echo $GUILE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$GUILE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else GUILE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $GUILE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_LDFLAGS=
  else  while test "$GUILE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_LDFLAGS"
        GUILE_LDFLAGS="${GUILE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_LDFLAGS="${GUILE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_LDFLAGS="${GUILE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_LDFLAGS=$(echo $GUILE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$GUILE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $GUILE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_LDFLAGS=
  else  while test "$GUILE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_LDFLAGS"
        GUILE_LDFLAGS="${GUILE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_LDFLAGS="${GUILE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_LDFLAGS="${GUILE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_LDFLAGS=$(echo $GUILE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$GUILE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $GUILE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_LDFLAGS=
  else  while test "$GUILE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_LDFLAGS"
        GUILE_LDFLAGS="${GUILE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_LDFLAGS="${GUILE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_LDFLAGS="${GUILE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_LDFLAGS=$(echo $GUILE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$GUILE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else GUILE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib GUILE" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib GUILE" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then GUILE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $GUILE_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_CXXFLAGS=
  else  while test "$GUILE_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_CXXFLAGS"
        GUILE_CXXFLAGS="${GUILE_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_CXXFLAGS="${GUILE_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_CXXFLAGS="${GUILE_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_CXXFLAGS=$(echo $GUILE_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$GUILE_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else GUILE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then GUILE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $GUILE_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_CFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_CFLAGS=
  else  while test "$GUILE_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_CFLAGS"
        GUILE_CFLAGS="${GUILE_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_CFLAGS="${GUILE_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_CFLAGS="${GUILE_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_CFLAGS=$(echo $GUILE_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$GUILE_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else GUILE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $GUILE_LIBS)" # remove unnecessary spaces and add a heading space
  GUILE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$GUILE_LIBS" = "$LC_GETPOP_FLAG_1"
  then GUILE_LIBS=${GUILE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$GUILE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then GUILE_LIBS=$(echo $GUILE_LIBS)
    else GUILE_LIBS=$(echo $GUILE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $GUILE_LIBS)" # remove unnecessary spaces and add a heading space
  GUILE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$GUILE_LIBS" = "$LC_GETPOP_FLAG_1"
  then GUILE_LIBS=${GUILE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$GUILE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then GUILE_LIBS=$(echo $GUILE_LIBS)
    else GUILE_LIBS=$(echo $GUILE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  GUILE_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}


    # complete include path according the library name

    if [[ "$GUILE_CPPFLAGS" =~ $(echo "(^|[[:space:]]+)-I(=?|[[:space:]]*)(.*)$") ]]
    then LC_WITH_GUILE_tmp2=${BASH_REMATCH[3]%% -*}
         LC_WITH_GUILE_tmp2=${LC_WITH_GUILE_tmp2%% }  # strip tailing blanks
    else unset LC_WITH_GUILE_tmp2
    fi


    if [[ "$GUILE_LIBS" =~ $(echo "(^|[[:space:]]+)-l(=?|[[:space:]]*)(.*)$") ]]
    then GUILE_LIB=${BASH_REMATCH[3]%% -*}
         GUILE_LIB=${GUILE_LIB%% }  # strip tailing blanks
    else unset GUILE_LIB
    fi


  if [[ "-I$LC_WITH_GUILE_tmp2/$GUILE_LIB" =~ $(echo '^-Wl,') ]]
  then GUILE_CPPFLAGS+=" -I$LC_WITH_GUILE_tmp2/$GUILE_LIB"
  elif [[ "-I$LC_WITH_GUILE_tmp2/$GUILE_LIB" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-I$LC_WITH_GUILE_tmp2/$GUILE_LIB"
  do  while [[ $GUILE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_CPPFLAGS=
  else  while test "$GUILE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_CPPFLAGS"
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_CPPFLAGS=$(echo $GUILE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_CPPFLAGS+=" -I$LC_WITH_GUILE_tmp2/$GUILE_LIB"
  else
    if [[ "$GUILE_CPPFLAGS" =~ $(echo "(^|[[:space:]])-I$LC_WITH_GUILE_tmp2/$GUILE_LIB($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -I$LC_WITH_GUILE_tmp2/$GUILE_LIB" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -I$LC_WITH_GUILE_tmp2/$GUILE_LIB" >&2;}
    else GUILE_CPPFLAGS+=" -I$LC_WITH_GUILE_tmp2/$GUILE_LIB"
    fi
  fi



    unset LC_WITH_GUILE_tmp1 LC_WITH_GUILE_tmp2

elif test -z "$location" -a -d tm-guile168; then :

      { $as_echo "$as_me:${as_lineno-$LINENO}: use embedded guile" >&5
$as_echo "$as_me: use embedded guile" >&6;}
      MKGUILE=tm-guile168/build/lib/libguile.a

      DIRGUILE=tm-guile168

      CLNGUILE=CLNGUILE

      LC_WITH_GUILE_use_embedded_guile=1


  # Various preliminary checks.





    ax_dir="tm-guile168"

                    # Do not complain, so a configure script can configure whichever parts of a
    # large source tree are present.
    if test -d "$srcdir/$ax_dir"; then
      ac_builddir=.

case "$ax_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`$as_echo "$ax_dir" | sed 's|^\.[\\/]||'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix

      # Remove --cache-file, --srcdir, and --disable-option-checking arguments
      # so they do not pile up.
      ax_args=
      ax_prev=
      eval "set x $ac_configure_args"
      shift
      for ax_arg; do
        if test -n "$ax_prev"; then
          ax_prev=
          continue
        fi
        case $ax_arg in
          -cache-file | --cache-file | --cache-fil | --cache-fi | --cache-f \
          | --cache- | --cache | --cach | --cac | --ca | --c)
            ax_prev=cache_file ;;
          -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \
          | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* \
          | --c=*)
            ;;
          --config-cache | -C)
            ;;
          -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)
            ax_prev=srcdir ;;
          -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)
            ;;
          -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
            ax_prev=prefix ;;
          -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* \
          | --p=*)
            ;;
          --disable-option-checking)
            ;;
          *) case $ax_arg in
              *\'*) ax_arg=$($as_echo "$ax_arg" | sed "s/'/'\\\\\\\\''/g");;
            esac
            as_fn_append ax_args " '$ax_arg'" ;;
        esac
      done
      # Always prepend --disable-option-checking to silence warnings, since
      # different subdirs can have different --enable and --with options.
      ax_args="--disable-option-checking $ax_args"
      # Options that must be added as they are provided.
      as_fn_append ax_args " '--without-guile-readline'"

      # New options that may need to be merged with existing options.
      ax_candidate="--disable-shared"
           ax_candidate_flag="${ax_candidate%%=*}"
           ax_candidate_content="${ax_candidate#*=}"
           if test "x$ax_candidate" != "x" -a "x$ax_candidate_flag" != "x"; then
             if echo "$ax_args" | grep -- "${ax_candidate_flag}=" >/dev/null 2>&1; then
               ax_args=$(echo $ax_args | sed "s,\(${ax_candidate_flag}=[^']*\),\1 ${ax_candidate_content},")
             else
               as_fn_append ax_args " '--disable-shared'"
             fi
           fi

      # New options that must replace existing options.
      ax_candidate="--prefix=$(pwd)/tm-guile168/build"
           ax_candidate_flag="${ax_candidate%%=*}"
           ax_candidate_content="${ax_candidate#*=}"
           if test "x$ax_candidate" != "x" -a "x$ax_candidate_flag" != "x"; then
             if echo "$ax_args" | grep -- "${ax_candidate_flag}=" >/dev/null 2>&1; then
               ax_args=$(echo $ax_args | sed "s,${ax_candidate_flag}=[^']*,${ax_candidate},")
             else
               as_fn_append ax_args " '--prefix=$(pwd)/tm-guile168/build'"
             fi
           fi

      # Options that must be removed.
      ax_args=$(echo $ax_args | sed "s,'--with-tmrepo=',,")

      as_fn_append ax_args " '--srcdir=$ac_srcdir'"

      # Add the subdirectory to the list of target subdirectories.
      ax_subconfigures="$ax_subconfigures $ax_dir"
      # Save the argument list for this subdirectory.
                              ax_var=$(printf "$ax_dir" | tr -c "0-9a-zA-Z_" "_")
      eval "ax_sub_configure_args_$ax_var=\"$ax_args\""
      eval "ax_sub_configure_$ax_var=\"yes\""
    else
      { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: could not find source tree for $ax_dir" >&5
$as_echo "$as_me: WARNING: could not find source tree for $ax_dir" >&2;}
    fi




      GUILE_STATIC='$(shell ../tm-guile168/guile-config/guile-config link)'


  if [[ "-I$(pwd)/tm-guile168/build/include" =~ $(echo '^-Wl,') ]]
  then GUILE_CPPFLAGS+=" -I$(pwd)/tm-guile168/build/include"
  elif [[ "-I$(pwd)/tm-guile168/build/include" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-I$(pwd)/tm-guile168/build/include"
  do  while [[ $GUILE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_CPPFLAGS=
  else  while test "$GUILE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_CPPFLAGS"
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_CPPFLAGS=$(echo $GUILE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_CPPFLAGS+=" -I$(pwd)/tm-guile168/build/include"
  else
    if [[ "$GUILE_CPPFLAGS" =~ $(echo "(^|[[:space:]])-I$(pwd)/tm-guile168/build/include($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -I$(pwd)/tm-guile168/build/include" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -I$(pwd)/tm-guile168/build/include" >&2;}
    else GUILE_CPPFLAGS+=" -I$(pwd)/tm-guile168/build/include"
    fi
  fi


  if [[ "-I$(pwd)/tm-guile168/build/include/guile" =~ $(echo '^-Wl,') ]]
  then GUILE_CPPFLAGS+=" -I$(pwd)/tm-guile168/build/include/guile"
  elif [[ "-I$(pwd)/tm-guile168/build/include/guile" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-I$(pwd)/tm-guile168/build/include/guile"
  do  while [[ $GUILE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$GUILE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$GUILE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then GUILE_CPPFLAGS=
  else  while test "$GUILE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$GUILE_CPPFLAGS"
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        GUILE_CPPFLAGS="${GUILE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  GUILE_CPPFLAGS=$(echo $GUILE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       GUILE_CPPFLAGS+=" -I$(pwd)/tm-guile168/build/include/guile"
  else
    if [[ "$GUILE_CPPFLAGS" =~ $(echo "(^|[[:space:]])-I$(pwd)/tm-guile168/build/include/guile($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -I$(pwd)/tm-guile168/build/include/guile" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -I$(pwd)/tm-guile168/build/include/guile" >&2;}
    else GUILE_CPPFLAGS+=" -I$(pwd)/tm-guile168/build/include/guile"
    fi
  fi

      GUILE_VERSION=1.6
      GUILE_DATA_PATH=$(pwd)/tm-guile168/build/share/guile/${GUILE_VERSION}

else
  as_fn_error $? "cannot find guile-config; is Guile installed?" "$LINENO" 5

fi


  if test -n "$GUILE_VERSION"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: Guile version $GUILE_VERSION" >&5
$as_echo "$as_me: Guile version $GUILE_VERSION" >&6;}
    case "$GUILE_VERSION" in
      (1.0 | 1.1 | 1.2 | 1.3 | 1.4 | 1.5)
$as_echo "#define GUILE_A 1" >>confdefs.h
 ;;
      (1.6 | 1.7)
$as_echo "#define GUILE_B 1" >>confdefs.h
 ;;
      (1.8 | 1.9)
$as_echo "#define GUILE_C 1" >>confdefs.h
 ;;
      (2.* | 3.*)
$as_echo "#define GUILE_D 1" >>confdefs.h

            # Check whether --enable-guile2 was given.
if test "${enable_guile2+set}" = set; then :
  enableval=$enable_guile2; if test "$enableval" != "yes"; then :
  as_fn_error $? "Guile2 disabled" "$LINENO" 5
fi
else
  as_fn_error $? "TeXmacs is incompatible with Guile 2. If you know what you are doing, run configure with --enable-guile2" "$LINENO" 5

fi

        ;;
      (0) as_fn_error $? "Cannot determine Guile version." "$LINENO" 5 ;;
      (*) as_fn_error $? "Guile version unmanaged." "$LINENO" 5 ;;
    esac

    { $as_echo "$as_me:${as_lineno-$LINENO}: Guile data path: $GUILE_DATA_PATH" >&5
$as_echo "$as_me: Guile data path: $GUILE_DATA_PATH" >&6;}


cat >>confdefs.h <<_ACEOF
#define GUILE_VERSION $GUILE_VERSION
_ACEOF



else
  as_fn_error $? "Guile nor found" "$LINENO" 5
fi

  if test -z "LC_GUILE_use_embedded_guile"; then :



  CFLAGS__ax_save_flags=$CFLAGS



  CPPFLAGS__ax_save_flags=$CPPFLAGS



  CXXFLAGS__ax_save_flags=$CXXFLAGS



  LDFLAGS__ax_save_flags=$LDFLAGS



  LIBS__ax_save_flags=$LIBS



  OBJCFLAGS__ax_save_flags=$OBJCFLAGS



  OBJCXXFLAGS__ax_save_flags=$OBJCXXFLAGS






    CFLAGS="$BASE_CFLAGS $GUILE_CFLAGS"

    CXXFLAGS="$BASE_CXXFLAGS $GUILE_CXXFLAGS"

    CPPFLAGS="$BASE_CPPFLAGS $GUILE_CPPFLAGS"

    LIBS="$BASE_LIBS $GUILE_LIBS"


  LC_MERGE_FLAGS_list="$GUILE_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$GUILE_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}




    unset g_success
    ac_fn_cxx_check_header_mongrel "$LINENO" "gh.h" "ac_cv_header_gh_h" "$ac_includes_default"
if test "x$ac_cv_header_gh_h" = xyes; then :

      as_ac_Header=`$as_echo "ac_cv_header_lib$GUILE_LIB.h" | $as_tr_sh`
ac_fn_cxx_check_header_mongrel "$LINENO" "lib$GUILE_LIB.h" "$as_ac_Header" "$ac_includes_default"
if eval test \"x\$"$as_ac_Header"\" = x"yes"; then :

        case lib$GUILE_LIB in
          (libguile) ;;
          (libguile16)
$as_echo "#define GUILE_HEADER_16 1" >>confdefs.h
 ;;
          (libguile18)
$as_echo "#define GUILE_HEADER_18 1" >>confdefs.h
 ;;
          (*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Strange guile header name lib$GUILE_LIB.h" >&5
$as_echo "$as_me: WARNING: Strange guile header name lib$GUILE_LIB.h" >&2;} ;;
        esac

  as_ac_Lib=`$as_echo "ac_cv_lib_${GUILE_LIB}''_gh_scm2newstr" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gh_scm2newstr in -l${GUILE_LIB}" >&5
$as_echo_n "checking for gh_scm2newstr in -l${GUILE_LIB}... " >&6; }
if eval \${$as_ac_Lib+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-l${GUILE_LIB}  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gh_scm2newstr ();
int
main ()
{
return gh_scm2newstr ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  eval "$as_ac_Lib=yes"
else
  eval "$as_ac_Lib=no"
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
eval ac_res=\$$as_ac_Lib
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_ac_Lib"\" = x"yes"; then :

          g_success=1

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile DOTS linking" >&5
$as_echo_n "checking Guile DOTS linking... " >&6; }
  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

typedef SCM (*FN)(...);

static SCM identity (SCM x) { return x; }
void declare () { gh_new_procedure ("identity", (FN) identity, 1, 0, 0); }

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


$as_echo "#define DOTS_OK 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }


fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

          { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile size type" >&5
$as_echo_n "checking Guile size type... " >&6; }
          if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

void print_string (SCM s) {
  int len_r;
  char* r= gh_scm2newstr (s, &len_r);
}

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :


$as_echo "#define guile_str_size_t int" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: int" >&5
$as_echo "int" >&6; }

else


$as_echo "#define guile_str_size_t size_t" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: size_t" >&5
$as_echo "size_t" >&6; }

fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi


else



    unset ac_cv_lib_${GUILE_LIB}_gh_scm2newstr
# For system variable in ${GUILE_LIB}
    unset ac_cv_lib_${GUILE_LIB}___gh_scm2newstr

    { $as_echo "$as_me:${as_lineno-$LINENO}: check ${GUILE_LIB} with extra libs -lintl" >&5
$as_echo "$as_me: check ${GUILE_LIB} with extra libs -lintl" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lintl"
    as_ac_Lib=`$as_echo "ac_cv_lib_${GUILE_LIB}''_gh_scm2newstr" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gh_scm2newstr in -l${GUILE_LIB}" >&5
$as_echo_n "checking for gh_scm2newstr in -l${GUILE_LIB}... " >&6; }
if eval \${$as_ac_Lib+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-l${GUILE_LIB}  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gh_scm2newstr ();
int
main ()
{
return gh_scm2newstr ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  eval "$as_ac_Lib=yes"
else
  eval "$as_ac_Lib=no"
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
eval ac_res=\$$as_ac_Lib
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_ac_Lib"\" = x"yes"; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_GUILE_extralibs="-lintl"

          g_success=1

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile DOTS linking" >&5
$as_echo_n "checking Guile DOTS linking... " >&6; }
  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

typedef SCM (*FN)(...);

static SCM identity (SCM x) { return x; }
void declare () { gh_new_procedure ("identity", (FN) identity, 1, 0, 0); }

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


$as_echo "#define DOTS_OK 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }


fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

          { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile size type" >&5
$as_echo_n "checking Guile size type... " >&6; }
          if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

void print_string (SCM s) {
  int len_r;
  char* r= gh_scm2newstr (s, &len_r);
}

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :


$as_echo "#define guile_str_size_t int" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: int" >&5
$as_echo "int" >&6; }

else


$as_echo "#define guile_str_size_t size_t" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: size_t" >&5
$as_echo "size_t" >&6; }

fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_${GUILE_LIB}_gh_scm2newstr
# For system variable in ${GUILE_LIB}
    unset ac_cv_lib_${GUILE_LIB}___gh_scm2newstr

    { $as_echo "$as_me:${as_lineno-$LINENO}: check ${GUILE_LIB} with extra libs -liconv" >&5
$as_echo "$as_me: check ${GUILE_LIB} with extra libs -liconv" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -liconv"
    as_ac_Lib=`$as_echo "ac_cv_lib_${GUILE_LIB}''_gh_scm2newstr" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gh_scm2newstr in -l${GUILE_LIB}" >&5
$as_echo_n "checking for gh_scm2newstr in -l${GUILE_LIB}... " >&6; }
if eval \${$as_ac_Lib+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-l${GUILE_LIB}  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gh_scm2newstr ();
int
main ()
{
return gh_scm2newstr ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  eval "$as_ac_Lib=yes"
else
  eval "$as_ac_Lib=no"
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
eval ac_res=\$$as_ac_Lib
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_ac_Lib"\" = x"yes"; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_GUILE_extralibs="-liconv"

          g_success=1

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile DOTS linking" >&5
$as_echo_n "checking Guile DOTS linking... " >&6; }
  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

typedef SCM (*FN)(...);

static SCM identity (SCM x) { return x; }
void declare () { gh_new_procedure ("identity", (FN) identity, 1, 0, 0); }

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


$as_echo "#define DOTS_OK 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }


fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

          { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile size type" >&5
$as_echo_n "checking Guile size type... " >&6; }
          if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

void print_string (SCM s) {
  int len_r;
  char* r= gh_scm2newstr (s, &len_r);
}

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :


$as_echo "#define guile_str_size_t int" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: int" >&5
$as_echo "int" >&6; }

else


$as_echo "#define guile_str_size_t size_t" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: size_t" >&5
$as_echo "size_t" >&6; }

fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_${GUILE_LIB}_gh_scm2newstr
# For system variable in ${GUILE_LIB}
    unset ac_cv_lib_${GUILE_LIB}___gh_scm2newstr

    { $as_echo "$as_me:${as_lineno-$LINENO}: check ${GUILE_LIB} with extra libs -ltre" >&5
$as_echo "$as_me: check ${GUILE_LIB} with extra libs -ltre" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -ltre"
    as_ac_Lib=`$as_echo "ac_cv_lib_${GUILE_LIB}''_gh_scm2newstr" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gh_scm2newstr in -l${GUILE_LIB}" >&5
$as_echo_n "checking for gh_scm2newstr in -l${GUILE_LIB}... " >&6; }
if eval \${$as_ac_Lib+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-l${GUILE_LIB}  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gh_scm2newstr ();
int
main ()
{
return gh_scm2newstr ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  eval "$as_ac_Lib=yes"
else
  eval "$as_ac_Lib=no"
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
eval ac_res=\$$as_ac_Lib
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_ac_Lib"\" = x"yes"; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_GUILE_extralibs="-ltre"

          g_success=1

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile DOTS linking" >&5
$as_echo_n "checking Guile DOTS linking... " >&6; }
  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

typedef SCM (*FN)(...);

static SCM identity (SCM x) { return x; }
void declare () { gh_new_procedure ("identity", (FN) identity, 1, 0, 0); }

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


$as_echo "#define DOTS_OK 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }


fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

          { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile size type" >&5
$as_echo_n "checking Guile size type... " >&6; }
          if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

void print_string (SCM s) {
  int len_r;
  char* r= gh_scm2newstr (s, &len_r);
}

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :


$as_echo "#define guile_str_size_t int" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: int" >&5
$as_echo "int" >&6; }

else


$as_echo "#define guile_str_size_t size_t" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: size_t" >&5
$as_echo "size_t" >&6; }

fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_${GUILE_LIB}_gh_scm2newstr
# For system variable in ${GUILE_LIB}
    unset ac_cv_lib_${GUILE_LIB}___gh_scm2newstr

    { $as_echo "$as_me:${as_lineno-$LINENO}: check ${GUILE_LIB} with extra libs -lintl -liconv" >&5
$as_echo "$as_me: check ${GUILE_LIB} with extra libs -lintl -liconv" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lintl -liconv"
    as_ac_Lib=`$as_echo "ac_cv_lib_${GUILE_LIB}''_gh_scm2newstr" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gh_scm2newstr in -l${GUILE_LIB}" >&5
$as_echo_n "checking for gh_scm2newstr in -l${GUILE_LIB}... " >&6; }
if eval \${$as_ac_Lib+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-l${GUILE_LIB}  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gh_scm2newstr ();
int
main ()
{
return gh_scm2newstr ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  eval "$as_ac_Lib=yes"
else
  eval "$as_ac_Lib=no"
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
eval ac_res=\$$as_ac_Lib
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_ac_Lib"\" = x"yes"; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_GUILE_extralibs="-lintl -liconv"

          g_success=1

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile DOTS linking" >&5
$as_echo_n "checking Guile DOTS linking... " >&6; }
  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

typedef SCM (*FN)(...);

static SCM identity (SCM x) { return x; }
void declare () { gh_new_procedure ("identity", (FN) identity, 1, 0, 0); }

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


$as_echo "#define DOTS_OK 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }


fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

          { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile size type" >&5
$as_echo_n "checking Guile size type... " >&6; }
          if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

void print_string (SCM s) {
  int len_r;
  char* r= gh_scm2newstr (s, &len_r);
}

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :


$as_echo "#define guile_str_size_t int" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: int" >&5
$as_echo "int" >&6; }

else


$as_echo "#define guile_str_size_t size_t" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: size_t" >&5
$as_echo "size_t" >&6; }

fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_${GUILE_LIB}_gh_scm2newstr
# For system variable in ${GUILE_LIB}
    unset ac_cv_lib_${GUILE_LIB}___gh_scm2newstr

    { $as_echo "$as_me:${as_lineno-$LINENO}: check ${GUILE_LIB} with extra libs -lintl -ltre" >&5
$as_echo "$as_me: check ${GUILE_LIB} with extra libs -lintl -ltre" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lintl -ltre"
    as_ac_Lib=`$as_echo "ac_cv_lib_${GUILE_LIB}''_gh_scm2newstr" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gh_scm2newstr in -l${GUILE_LIB}" >&5
$as_echo_n "checking for gh_scm2newstr in -l${GUILE_LIB}... " >&6; }
if eval \${$as_ac_Lib+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-l${GUILE_LIB}  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gh_scm2newstr ();
int
main ()
{
return gh_scm2newstr ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  eval "$as_ac_Lib=yes"
else
  eval "$as_ac_Lib=no"
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
eval ac_res=\$$as_ac_Lib
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_ac_Lib"\" = x"yes"; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_GUILE_extralibs="-lintl -ltre"

          g_success=1

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile DOTS linking" >&5
$as_echo_n "checking Guile DOTS linking... " >&6; }
  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

typedef SCM (*FN)(...);

static SCM identity (SCM x) { return x; }
void declare () { gh_new_procedure ("identity", (FN) identity, 1, 0, 0); }

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


$as_echo "#define DOTS_OK 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }


fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

          { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile size type" >&5
$as_echo_n "checking Guile size type... " >&6; }
          if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

void print_string (SCM s) {
  int len_r;
  char* r= gh_scm2newstr (s, &len_r);
}

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :


$as_echo "#define guile_str_size_t int" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: int" >&5
$as_echo "int" >&6; }

else


$as_echo "#define guile_str_size_t size_t" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: size_t" >&5
$as_echo "size_t" >&6; }

fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_${GUILE_LIB}_gh_scm2newstr
# For system variable in ${GUILE_LIB}
    unset ac_cv_lib_${GUILE_LIB}___gh_scm2newstr

    { $as_echo "$as_me:${as_lineno-$LINENO}: check ${GUILE_LIB} with extra libs -liconv -ltre" >&5
$as_echo "$as_me: check ${GUILE_LIB} with extra libs -liconv -ltre" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -liconv -ltre"
    as_ac_Lib=`$as_echo "ac_cv_lib_${GUILE_LIB}''_gh_scm2newstr" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gh_scm2newstr in -l${GUILE_LIB}" >&5
$as_echo_n "checking for gh_scm2newstr in -l${GUILE_LIB}... " >&6; }
if eval \${$as_ac_Lib+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-l${GUILE_LIB}  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gh_scm2newstr ();
int
main ()
{
return gh_scm2newstr ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  eval "$as_ac_Lib=yes"
else
  eval "$as_ac_Lib=no"
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
eval ac_res=\$$as_ac_Lib
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_ac_Lib"\" = x"yes"; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_GUILE_extralibs="-liconv -ltre"

          g_success=1

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile DOTS linking" >&5
$as_echo_n "checking Guile DOTS linking... " >&6; }
  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

typedef SCM (*FN)(...);

static SCM identity (SCM x) { return x; }
void declare () { gh_new_procedure ("identity", (FN) identity, 1, 0, 0); }

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


$as_echo "#define DOTS_OK 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }


fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

          { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile size type" >&5
$as_echo_n "checking Guile size type... " >&6; }
          if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

void print_string (SCM s) {
  int len_r;
  char* r= gh_scm2newstr (s, &len_r);
}

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :


$as_echo "#define guile_str_size_t int" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: int" >&5
$as_echo "int" >&6; }

else


$as_echo "#define guile_str_size_t size_t" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: size_t" >&5
$as_echo "size_t" >&6; }

fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_${GUILE_LIB}_gh_scm2newstr
# For system variable in ${GUILE_LIB}
    unset ac_cv_lib_${GUILE_LIB}___gh_scm2newstr

    { $as_echo "$as_me:${as_lineno-$LINENO}: check ${GUILE_LIB} with extra libs -lintl -liconv -ltre" >&5
$as_echo "$as_me: check ${GUILE_LIB} with extra libs -lintl -liconv -ltre" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lintl -liconv -ltre"
    as_ac_Lib=`$as_echo "ac_cv_lib_${GUILE_LIB}''_gh_scm2newstr" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gh_scm2newstr in -l${GUILE_LIB}" >&5
$as_echo_n "checking for gh_scm2newstr in -l${GUILE_LIB}... " >&6; }
if eval \${$as_ac_Lib+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-l${GUILE_LIB}  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gh_scm2newstr ();
int
main ()
{
return gh_scm2newstr ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  eval "$as_ac_Lib=yes"
else
  eval "$as_ac_Lib=no"
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
eval ac_res=\$$as_ac_Lib
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_ac_Lib"\" = x"yes"; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_GUILE_extralibs="-lintl -liconv -ltre"

          g_success=1

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile DOTS linking" >&5
$as_echo_n "checking Guile DOTS linking... " >&6; }
  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

typedef SCM (*FN)(...);

static SCM identity (SCM x) { return x; }
void declare () { gh_new_procedure ("identity", (FN) identity, 1, 0, 0); }

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


$as_echo "#define DOTS_OK 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }


fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

          { $as_echo "$as_me:${as_lineno-$LINENO}: checking Guile size type" >&5
$as_echo_n "checking Guile size type... " >&6; }
          if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <gh.h>
#include <lib$GUILE_LIB.h>

void print_string (SCM s) {
  int len_r;
  char* r= gh_scm2newstr (s, &len_r);
}

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :


$as_echo "#define guile_str_size_t int" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: int" >&5
$as_echo "int" >&6; }

else


$as_echo "#define guile_str_size_t size_t" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: size_t" >&5
$as_echo "size_t" >&6; }

fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi



else

      LIBS=$_LC_CHECK_LIB_libs

  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot use guile" >&5
$as_echo "$as_me: WARNING: Cannot use guile" >&2;}


fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi



fi



fi


    # AC_CHECK_LIB might have completed LIBS we need to complete GUILE_LIBS
    GUILE_LIBS+=${LC_GUILE_extralibs:+ ${LC_GUILE_extralibs}}
    if [ ! $g_success ];then
      as_fn_error $? "It seems that guile-config does not provide the right parameters.
      Consult the config.log for error details and check your guile installation" "$LINENO" 5
      unset g_success
    fi

  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags




else


$as_echo "#define guile_str_size_t size_t" >>confdefs.h


fi





  LC_MERGE_FLAGS_list="$GUILE_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$GUILE_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

  LC_MERGE_FLAGS_list="$GUILE_LIBS"
  if [[ "LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$GUILE_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LIBS

  unset STRIP_ARG_memo
  if test "$LIBS" = "$STRIP_ALL_ARGS_arg"
  then LIBS=
  else  while test "$LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LIBS"
        LIBS="${LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LIBS="${LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LIBS="${LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LIBS=$(echo $LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}




  GUILE_CXX=$GUILE_CXXFLAGS

  GUILE_CPP=$GUILE_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(GUILE|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: GUILE_CFLAGS:$GUILE_CFLAGS" >&5
$as_echo "$as_me: GUILE_CFLAGS:$GUILE_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: GUILE_CXXFLAGS:$GUILE_CXXFLAGS" >&5
$as_echo "$as_me: GUILE_CXXFLAGS:$GUILE_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: GUILE_CPPFLAGS:$GUILE_CPPFLAGS" >&5
$as_echo "$as_me: GUILE_CPPFLAGS:$GUILE_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: GUILE_LIBS:$GUILE_LIBS" >&5
$as_echo "$as_me: GUILE_LIBS:$GUILE_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: GUILE_LDFLAGS:$GUILE_LDFLAGS" >&5
$as_echo "$as_me: GUILE_LDFLAGS:$GUILE_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  GUILE_CFLAGS="$GUILE_CXXFLAGS $GUILE_CPPFLAGS"




  unset ${!LC_GUILE_*}


  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for library containing dlopen" >&5
$as_echo_n "checking for library containing dlopen... " >&6; }
if ${ac_cv_search_dlopen+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_func_search_save_LIBS=$LIBS
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char dlopen ();
int
main ()
{
return dlopen ();
  ;
  return 0;
}
_ACEOF
for ac_lib in '' libdl libdld; do
  if test -z "$ac_lib"; then
    ac_res="none required"
  else
    ac_res=-l$ac_lib
    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
  fi
  if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_search_dlopen=$ac_res
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext
  if ${ac_cv_search_dlopen+:} false; then :
  break
fi
done
if ${ac_cv_search_dlopen+:} false; then :

else
  ac_cv_search_dlopen=no
fi
rm conftest.$ac_ext
LIBS=$ac_func_search_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_dlopen" >&5
$as_echo "$ac_cv_search_dlopen" >&6; }
ac_res=$ac_cv_search_dlopen
if test "$ac_res" != no; then :
  test "$ac_res" = "none required" || LIBS="$ac_res $LIBS"

$as_echo "#define TM_DYNAMIC_LINKING dlopen" >>confdefs.h

else

    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for library containing dld_link" >&5
$as_echo_n "checking for library containing dld_link... " >&6; }
if ${ac_cv_search_dld_link+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_func_search_save_LIBS=$LIBS
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char dld_link ();
int
main ()
{
return dld_link ();
  ;
  return 0;
}
_ACEOF
for ac_lib in '' libdl libdld; do
  if test -z "$ac_lib"; then
    ac_res="none required"
  else
    ac_res=-l$ac_lib
    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
  fi
  if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_search_dld_link=$ac_res
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext
  if ${ac_cv_search_dld_link+:} false; then :
  break
fi
done
if ${ac_cv_search_dld_link+:} false; then :

else
  ac_cv_search_dld_link=no
fi
rm conftest.$ac_ext
LIBS=$ac_func_search_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_dld_link" >&5
$as_echo "$ac_cv_search_dld_link" >&6; }
ac_res=$ac_cv_search_dld_link
if test "$ac_res" != no; then :
  test "$ac_res" = "none required" || LIBS="$ac_res $LIBS"

$as_echo "#define TM_DYNAMIC_LINKING dld_link" >>confdefs.h

else

      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for library containing shl_load" >&5
$as_echo_n "checking for library containing shl_load... " >&6; }
if ${ac_cv_search_shl_load+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_func_search_save_LIBS=$LIBS
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char shl_load ();
int
main ()
{
return shl_load ();
  ;
  return 0;
}
_ACEOF
for ac_lib in '' libdl libdld; do
  if test -z "$ac_lib"; then
    ac_res="none required"
  else
    ac_res=-l$ac_lib
    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
  fi
  if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_search_shl_load=$ac_res
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext
  if ${ac_cv_search_shl_load+:} false; then :
  break
fi
done
if ${ac_cv_search_shl_load+:} false; then :

else
  ac_cv_search_shl_load=no
fi
rm conftest.$ac_ext
LIBS=$ac_func_search_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_shl_load" >&5
$as_echo "$ac_cv_search_shl_load" >&6; }
ac_res=$ac_cv_search_shl_load
if test "$ac_res" != no; then :
  test "$ac_res" = "none required" || LIBS="$ac_res $LIBS"

$as_echo "#define TM_DYNAMIC_LINKING shl_load" >>confdefs.h

else

        { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: dynamic linking using dlopen will not work" >&5
$as_echo "$as_me: WARNING: dynamic linking using dlopen will not work" >&2;}

fi


fi


fi




# Check whether --with-iconv was given.
if test "${with_iconv+set}" = set; then :
  withval=$with_iconv;
else
  unset withval;
fi


if [[ "$withval" != no ]]
then
  _LC_ICONV_TEMP=$(mktemp -t texmacsXXXXXX)

  _LC_ICONV_PATH=$(echo ${LDFLAGS//\/lib/\/include})


  CFLAGS__ax_save_flags=$CFLAGS



  CPPFLAGS__ax_save_flags=$CPPFLAGS



  CXXFLAGS__ax_save_flags=$CXXFLAGS



  LDFLAGS__ax_save_flags=$LDFLAGS



  LIBS__ax_save_flags=$LIBS



  OBJCFLAGS__ax_save_flags=$OBJCFLAGS



  OBJCXXFLAGS__ax_save_flags=$OBJCXXFLAGS



  # try to find a header somewhere in this path and ask for its location
  CPPFLAGS="${_LC_ICONV_PATH//-L/-I} -I$withval/include -I/opt/local/include -I/sw/include -MM -MF $_LC_ICONV_TEMP"



  unset ICONV_CFLAGS;unset ICONV_CXXFLAGS;unset ICONV_CPPFLAGS;unset ICONV_LDFLAGS;unset ICONV_LIBS; # no previous iconv definition allowed
  ac_fn_cxx_check_header_preproc "$LINENO" "iconv.h" "ac_cv_header_iconv_h"
if test "x$ac_cv_header_iconv_h" = xyes; then :

    _LC_ICONV_DEPEND=$(<$_LC_ICONV_TEMP)
    _LC_ICONV_ICONV=${_LC_ICONV_DEPEND%/include/iconv.h*}
    if  [[ "$_LC_ICONV_DEPEND" == "$_LC_ICONV_ICONV" ]]
    then
      # don't add the default path to the LDFLAGS
      { $as_echo "$as_me:${as_lineno-$LINENO}: iconv found in default compiler location" >&5
$as_echo "$as_me: iconv found in default compiler location" >&6;}

  LC_MERGE_FLAGS_list="-liconv"
  if [[ "ICONV_LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-liconv"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  ICONV_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $ICONV_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LIBS

  unset STRIP_ARG_memo
  if test "$ICONV_LIBS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LIBS=
  else  while test "$ICONV_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LIBS"
        ICONV_LIBS="${ICONV_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LIBS="${ICONV_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LIBS="${ICONV_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LIBS=$(echo $ICONV_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$ICONV_LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else ICONV_LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

    else
      _LC_ICONV_ICONV=${_LC_ICONV_ICONV##* }
      { $as_echo "$as_me:${as_lineno-$LINENO}: iconv found in $_LC_ICONV_ICONV" >&5
$as_echo "$as_me: iconv found in $_LC_ICONV_ICONV" >&6;}

if [ "$_LC_ICONV_ICONV" ]
then

  LC_SCATTER_FLAGS_list="-I$_LC_ICONV_ICONV/include -L$_LC_ICONV_ICONV/lib -liconv"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CPPFLAGS=
  else  while test "$ICONV_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CPPFLAGS"
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CPPFLAGS=$(echo $ICONV_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CPPFLAGS=
  else  while test "$ICONV_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CPPFLAGS"
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CPPFLAGS=$(echo $ICONV_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib ICONV" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib ICONV" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CXXFLAGS=
  else  while test "$ICONV_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CXXFLAGS"
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CXXFLAGS=$(echo $ICONV_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CFLAGS=
  else  while test "$ICONV_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CFLAGS"
        ICONV_CFLAGS="${ICONV_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CFLAGS="${ICONV_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CFLAGS="${ICONV_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CFLAGS=$(echo $ICONV_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  ICONV_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

else

  LC_SCATTER_FLAGS_list="-liconv"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CPPFLAGS=
  else  while test "$ICONV_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CPPFLAGS"
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CPPFLAGS=$(echo $ICONV_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CPPFLAGS=
  else  while test "$ICONV_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CPPFLAGS"
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CPPFLAGS=$(echo $ICONV_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib ICONV" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib ICONV" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CXXFLAGS=
  else  while test "$ICONV_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CXXFLAGS"
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CXXFLAGS=$(echo $ICONV_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CFLAGS=
  else  while test "$ICONV_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CFLAGS"
        ICONV_CFLAGS="${ICONV_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CFLAGS="${ICONV_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CFLAGS="${ICONV_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CFLAGS=$(echo $ICONV_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  ICONV_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

fi

    fi

  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags






    CFLAGS="$BASE_CFLAGS $ICONV_CFLAGS"

    CXXFLAGS="$BASE_CXXFLAGS $ICONV_CXXFLAGS"

    CPPFLAGS="$BASE_CPPFLAGS $ICONV_CPPFLAGS"

    LIBS="$BASE_LIBS $ICONV_LIBS"


  LC_MERGE_FLAGS_list="$ICONV_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$ICONV_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}



    rm $_LC_ICONV_TEMP
    ac_fn_cxx_check_header_mongrel "$LINENO" "iconv.h" "ac_cv_header_iconv_h" "$ac_includes_default"
if test "x$ac_cv_header_iconv_h" = xyes; then :


  { $as_echo "$as_me:${as_lineno-$LINENO}: checking iconv linking" >&5
$as_echo_n "checking iconv linking... " >&6; }
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <iconv.h>
int
main ()
{
iconv_open("","");
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags







  LC_MERGE_FLAGS_list="$ICONV_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$ICONV_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

  LC_MERGE_FLAGS_list="$ICONV_LIBS"
  if [[ "LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$ICONV_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LIBS

  unset STRIP_ARG_memo
  if test "$LIBS" = "$STRIP_ALL_ARGS_arg"
  then LIBS=
  else  while test "$LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LIBS"
        LIBS="${LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LIBS="${LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LIBS="${LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LIBS=$(echo $LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}




$as_echo "#define USE_ICONV 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }

        # it could be a bug this default locations management, try to force them


  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags



          unset ac_cv_header_iconv_h  # clear the cache....
          { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Try to force default location" >&5
$as_echo "$as_me: WARNING: Try to force default location" >&2;}

  _LC_ICONV_TEMP=$(mktemp -t texmacsXXXXXX)

  _LC_ICONV_PATH=$(echo ${LDFLAGS//\/lib/\/include})


  CFLAGS__ax_save_flags=$CFLAGS



  CPPFLAGS__ax_save_flags=$CPPFLAGS



  CXXFLAGS__ax_save_flags=$CXXFLAGS



  LDFLAGS__ax_save_flags=$LDFLAGS



  LIBS__ax_save_flags=$LIBS



  OBJCFLAGS__ax_save_flags=$OBJCFLAGS



  OBJCXXFLAGS__ax_save_flags=$OBJCXXFLAGS



  # try to find a header somewhere in this path and ask for its location
  CPPFLAGS="${_LC_ICONV_PATH//-L/-I} -I$withval/include -I/opt/local/include -I/sw/include -M -MF $_LC_ICONV_TEMP"



  unset ICONV_CFLAGS;unset ICONV_CXXFLAGS;unset ICONV_CPPFLAGS;unset ICONV_LDFLAGS;unset ICONV_LIBS; # no previous iconv definition allowed
  ac_fn_cxx_check_header_preproc "$LINENO" "iconv.h" "ac_cv_header_iconv_h"
if test "x$ac_cv_header_iconv_h" = xyes; then :

    _LC_ICONV_DEPEND=$(<$_LC_ICONV_TEMP)
    _LC_ICONV_ICONV=${_LC_ICONV_DEPEND%/include/iconv.h*}
    if  [[ "$_LC_ICONV_DEPEND" == "$_LC_ICONV_ICONV" ]]
    then
      # don't add the default path to the LDFLAGS
      { $as_echo "$as_me:${as_lineno-$LINENO}: iconv found in default compiler location" >&5
$as_echo "$as_me: iconv found in default compiler location" >&6;}

  LC_MERGE_FLAGS_list="-liconv"
  if [[ "ICONV_LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-liconv"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  ICONV_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $ICONV_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LIBS

  unset STRIP_ARG_memo
  if test "$ICONV_LIBS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LIBS=
  else  while test "$ICONV_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LIBS"
        ICONV_LIBS="${ICONV_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LIBS="${ICONV_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LIBS="${ICONV_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LIBS=$(echo $ICONV_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$ICONV_LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else ICONV_LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

    else
      _LC_ICONV_ICONV=${_LC_ICONV_ICONV##* }
      { $as_echo "$as_me:${as_lineno-$LINENO}: iconv found in $_LC_ICONV_ICONV" >&5
$as_echo "$as_me: iconv found in $_LC_ICONV_ICONV" >&6;}

if [ "$_LC_ICONV_ICONV" ]
then

  LC_SCATTER_FLAGS_list="-I$_LC_ICONV_ICONV/include -L$_LC_ICONV_ICONV/lib -liconv"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CPPFLAGS=
  else  while test "$ICONV_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CPPFLAGS"
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CPPFLAGS=$(echo $ICONV_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CPPFLAGS=
  else  while test "$ICONV_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CPPFLAGS"
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CPPFLAGS=$(echo $ICONV_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib ICONV" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib ICONV" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CXXFLAGS=
  else  while test "$ICONV_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CXXFLAGS"
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CXXFLAGS=$(echo $ICONV_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CFLAGS=
  else  while test "$ICONV_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CFLAGS"
        ICONV_CFLAGS="${ICONV_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CFLAGS="${ICONV_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CFLAGS="${ICONV_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CFLAGS=$(echo $ICONV_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  ICONV_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

else

  LC_SCATTER_FLAGS_list="-liconv"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CPPFLAGS=
  else  while test "$ICONV_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CPPFLAGS"
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CPPFLAGS=$(echo $ICONV_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CPPFLAGS=
  else  while test "$ICONV_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CPPFLAGS"
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CPPFLAGS="${ICONV_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CPPFLAGS=$(echo $ICONV_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_LDFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_LDFLAGS=
  else  while test "$ICONV_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_LDFLAGS"
        ICONV_LDFLAGS="${ICONV_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_LDFLAGS="${ICONV_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_LDFLAGS="${ICONV_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_LDFLAGS=$(echo $ICONV_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib ICONV" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib ICONV" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CXXFLAGS=
  else  while test "$ICONV_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CXXFLAGS"
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CXXFLAGS="${ICONV_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CXXFLAGS=$(echo $ICONV_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $ICONV_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$ICONV_CFLAGS

  unset STRIP_ARG_memo
  if test "$ICONV_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then ICONV_CFLAGS=
  else  while test "$ICONV_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$ICONV_CFLAGS"
        ICONV_CFLAGS="${ICONV_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        ICONV_CFLAGS="${ICONV_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        ICONV_CFLAGS="${ICONV_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  ICONV_CFLAGS=$(echo $ICONV_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$ICONV_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else ICONV_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $ICONV_LIBS)" # remove unnecessary spaces and add a heading space
  ICONV_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$ICONV_LIBS" = "$LC_GETPOP_FLAG_1"
  then ICONV_LIBS=${ICONV_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$ICONV_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then ICONV_LIBS=$(echo $ICONV_LIBS)
    else ICONV_LIBS=$(echo $ICONV_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  ICONV_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

fi

    fi

  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags






    CFLAGS="$BASE_CFLAGS $ICONV_CFLAGS"

    CXXFLAGS="$BASE_CXXFLAGS $ICONV_CXXFLAGS"

    CPPFLAGS="$BASE_CPPFLAGS $ICONV_CPPFLAGS"

    LIBS="$BASE_LIBS $ICONV_LIBS"


  LC_MERGE_FLAGS_list="$ICONV_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$ICONV_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}



    rm $_LC_ICONV_TEMP
    ac_fn_cxx_check_header_mongrel "$LINENO" "iconv.h" "ac_cv_header_iconv_h" "$ac_includes_default"
if test "x$ac_cv_header_iconv_h" = xyes; then :


  { $as_echo "$as_me:${as_lineno-$LINENO}: checking iconv linking" >&5
$as_echo_n "checking iconv linking... " >&6; }
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <iconv.h>
int
main ()
{
iconv_open("","");
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags







  LC_MERGE_FLAGS_list="$ICONV_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$ICONV_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

  LC_MERGE_FLAGS_list="$ICONV_LIBS"
  if [[ "LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$ICONV_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LIBS

  unset STRIP_ARG_memo
  if test "$LIBS" = "$STRIP_ALL_ARGS_arg"
  then LIBS=
  else  while test "$LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LIBS"
        LIBS="${LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LIBS="${LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LIBS="${LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LIBS=$(echo $LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}




$as_echo "#define USE_ICONV 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }

        # it could be a bug this default locations management, try to force them

          # iconv must be include in LIBC
          unset LIBS ICONV_LIBS

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking iconv in default libs linking" >&5
$as_echo_n "checking iconv in default libs linking... " >&6; }
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <iconv.h>
int
main ()
{
iconv_open("","");
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }


  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags







  LC_MERGE_FLAGS_list="$ICONV_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$ICONV_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

  LC_MERGE_FLAGS_list="$ICONV_LIBS"
  if [[ "LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$ICONV_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LIBS

  unset STRIP_ARG_memo
  if test "$LIBS" = "$STRIP_ALL_ARGS_arg"
  then LIBS=
  else  while test "$LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LIBS"
        LIBS="${LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LIBS="${LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LIBS="${LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LIBS=$(echo $LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}




$as_echo "#define USE_ICONV 1" >>confdefs.h



else

    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }

            #no iconv


  unset ICONV_CFLAGS;unset ICONV_CXXFLAGS;unset ICONV_CPPFLAGS;unset ICONV_LDFLAGS;unset ICONV_LIBS;
            { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot use iconv.h." >&5
$as_echo "$as_me: WARNING: Cannot use iconv.h." >&2;}


fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext



fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext

else

      as_fn_error $? "libiconv does not match header." "$LINENO" 5
fi



else

    rm $_LC_ICONV_TEMP
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Use --with-iconv=iconv_base_path (i.e /usr/local) to specify your icon location" >&5
$as_echo "$as_me: WARNING: Use --with-iconv=iconv_base_path (i.e /usr/local) to specify your icon location" >&2;}

fi


  unset ${!_LC_ICONV_*}




fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext

else

      as_fn_error $? "libiconv does not match header." "$LINENO" 5
fi



else

    rm $_LC_ICONV_TEMP
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Use --with-iconv=iconv_base_path (i.e /usr/local) to specify your icon location" >&5
$as_echo "$as_me: WARNING: Use --with-iconv=iconv_base_path (i.e /usr/local) to specify your icon location" >&2;}

fi


  unset ${!_LC_ICONV_*}

else { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: absence of iconv may crash HTML import or prevent the build" >&5
$as_echo "$as_me: WARNING: absence of iconv may crash HTML import or prevent the build" >&2;}
fi

  ICONV_CXX=$ICONV_CXXFLAGS

  ICONV_CPP=$ICONV_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(ICONV|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: ICONV_CFLAGS:$ICONV_CFLAGS" >&5
$as_echo "$as_me: ICONV_CFLAGS:$ICONV_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: ICONV_CXXFLAGS:$ICONV_CXXFLAGS" >&5
$as_echo "$as_me: ICONV_CXXFLAGS:$ICONV_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: ICONV_CPPFLAGS:$ICONV_CPPFLAGS" >&5
$as_echo "$as_me: ICONV_CPPFLAGS:$ICONV_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: ICONV_LIBS:$ICONV_LIBS" >&5
$as_echo "$as_me: ICONV_LIBS:$ICONV_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: ICONV_LDFLAGS:$ICONV_LDFLAGS" >&5
$as_echo "$as_me: ICONV_LDFLAGS:$ICONV_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  ICONV_CFLAGS="$ICONV_CXXFLAGS $ICONV_CPPFLAGS"







# Check whether --with-freetype was given.
if test "${with_freetype+set}" = set; then :
  withval=$with_freetype;
else
  unset withval
fi


  if [[ "$withval" != no ]]
  then
    unset USE_FREETYPE

  # Extract the first word of "freetype-config", so it can be a program name with args.
set dummy freetype-config; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_FREETYPE_tmp1+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $FREETYPE_tmp1 in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_FREETYPE_tmp1="$FREETYPE_tmp1" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="${withval:-$PATH}"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_FREETYPE_tmp1="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
FREETYPE_tmp1=$ac_cv_path_FREETYPE_tmp1
if test -n "$FREETYPE_tmp1"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $FREETYPE_tmp1" >&5
$as_echo "$FREETYPE_tmp1" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  if test -n "$FREETYPE_tmp1"
  then

  LC_SCATTER_FLAGS_list="$($FREETYPE_tmp1 --libs) $($FREETYPE_tmp1 --cflags)"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_LDFLAGS=
  else  while test "$FREETYPE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_LDFLAGS"
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_LDFLAGS=$(echo $FREETYPE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_CPPFLAGS=
  else  while test "$FREETYPE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_CPPFLAGS"
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_CPPFLAGS=$(echo $FREETYPE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_CPPFLAGS=
  else  while test "$FREETYPE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_CPPFLAGS"
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_CPPFLAGS=$(echo $FREETYPE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_LDFLAGS=
  else  while test "$FREETYPE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_LDFLAGS"
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_LDFLAGS=$(echo $FREETYPE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_LDFLAGS=
  else  while test "$FREETYPE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_LDFLAGS"
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_LDFLAGS=$(echo $FREETYPE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_LDFLAGS=
  else  while test "$FREETYPE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_LDFLAGS"
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_LDFLAGS=$(echo $FREETYPE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib FREETYPE" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib FREETYPE" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_CXXFLAGS=
  else  while test "$FREETYPE_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_CXXFLAGS"
        FREETYPE_CXXFLAGS="${FREETYPE_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_CXXFLAGS="${FREETYPE_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_CXXFLAGS="${FREETYPE_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_CXXFLAGS=$(echo $FREETYPE_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_CFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_CFLAGS=
  else  while test "$FREETYPE_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_CFLAGS"
        FREETYPE_CFLAGS="${FREETYPE_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_CFLAGS="${FREETYPE_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_CFLAGS="${FREETYPE_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_CFLAGS=$(echo $FREETYPE_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $FREETYPE_LIBS)" # remove unnecessary spaces and add a heading space
  FREETYPE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$FREETYPE_LIBS" = "$LC_GETPOP_FLAG_1"
  then FREETYPE_LIBS=${FREETYPE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$FREETYPE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then FREETYPE_LIBS=$(echo $FREETYPE_LIBS)
    else FREETYPE_LIBS=$(echo $FREETYPE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $FREETYPE_LIBS)" # remove unnecessary spaces and add a heading space
  FREETYPE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$FREETYPE_LIBS" = "$LC_GETPOP_FLAG_1"
  then FREETYPE_LIBS=${FREETYPE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$FREETYPE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then FREETYPE_LIBS=$(echo $FREETYPE_LIBS)
    else FREETYPE_LIBS=$(echo $FREETYPE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  FREETYPE_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

  else

  LC_SCATTER_FLAGS_list="$(pkg-config --libs --cflags freetype2)"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_LDFLAGS=
  else  while test "$FREETYPE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_LDFLAGS"
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_LDFLAGS=$(echo $FREETYPE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_CPPFLAGS=
  else  while test "$FREETYPE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_CPPFLAGS"
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_CPPFLAGS=$(echo $FREETYPE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_CPPFLAGS=
  else  while test "$FREETYPE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_CPPFLAGS"
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_CPPFLAGS="${FREETYPE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_CPPFLAGS=$(echo $FREETYPE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_LDFLAGS=
  else  while test "$FREETYPE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_LDFLAGS"
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_LDFLAGS=$(echo $FREETYPE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_LDFLAGS=
  else  while test "$FREETYPE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_LDFLAGS"
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_LDFLAGS=$(echo $FREETYPE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_LDFLAGS=
  else  while test "$FREETYPE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_LDFLAGS"
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_LDFLAGS="${FREETYPE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_LDFLAGS=$(echo $FREETYPE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib FREETYPE" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib FREETYPE" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_CXXFLAGS=
  else  while test "$FREETYPE_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_CXXFLAGS"
        FREETYPE_CXXFLAGS="${FREETYPE_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_CXXFLAGS="${FREETYPE_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_CXXFLAGS="${FREETYPE_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_CXXFLAGS=$(echo $FREETYPE_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then FREETYPE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $FREETYPE_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$FREETYPE_CFLAGS

  unset STRIP_ARG_memo
  if test "$FREETYPE_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then FREETYPE_CFLAGS=
  else  while test "$FREETYPE_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$FREETYPE_CFLAGS"
        FREETYPE_CFLAGS="${FREETYPE_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        FREETYPE_CFLAGS="${FREETYPE_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        FREETYPE_CFLAGS="${FREETYPE_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  FREETYPE_CFLAGS=$(echo $FREETYPE_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       FREETYPE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$FREETYPE_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else FREETYPE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $FREETYPE_LIBS)" # remove unnecessary spaces and add a heading space
  FREETYPE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$FREETYPE_LIBS" = "$LC_GETPOP_FLAG_1"
  then FREETYPE_LIBS=${FREETYPE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$FREETYPE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then FREETYPE_LIBS=$(echo $FREETYPE_LIBS)
    else FREETYPE_LIBS=$(echo $FREETYPE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $FREETYPE_LIBS)" # remove unnecessary spaces and add a heading space
  FREETYPE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$FREETYPE_LIBS" = "$LC_GETPOP_FLAG_1"
  then FREETYPE_LIBS=${FREETYPE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$FREETYPE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then FREETYPE_LIBS=$(echo $FREETYPE_LIBS)
    else FREETYPE_LIBS=$(echo $FREETYPE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  FREETYPE_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

  fi
  unset FREETYPE_tmp1
 #init FLAGS


  CFLAGS__ax_save_flags=$CFLAGS



  CPPFLAGS__ax_save_flags=$CPPFLAGS



  CXXFLAGS__ax_save_flags=$CXXFLAGS



  LDFLAGS__ax_save_flags=$LDFLAGS



  LIBS__ax_save_flags=$LIBS



  OBJCFLAGS__ax_save_flags=$OBJCFLAGS



  OBJCXXFLAGS__ax_save_flags=$OBJCXXFLAGS






    CFLAGS="$BASE_CFLAGS $FREETYPE_CFLAGS"

    CXXFLAGS="$BASE_CXXFLAGS $FREETYPE_CXXFLAGS"

    CPPFLAGS="$BASE_CPPFLAGS $FREETYPE_CPPFLAGS"

    LIBS="$BASE_LIBS $FREETYPE_LIBS"


  LC_MERGE_FLAGS_list="$FREETYPE_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$FREETYPE_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}




    ac_fn_cxx_check_header_mongrel "$LINENO" "ft2build.h" "ac_cv_header_ft2build_h" "$ac_includes_default"
if test "x$ac_cv_header_ft2build_h" = xyes; then :


  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Init_FreeType in -lfreetype" >&5
$as_echo_n "checking for FT_Init_FreeType in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Init_FreeType+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Init_FreeType ();
int
main ()
{
return FT_Init_FreeType ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Init_FreeType=yes
else
  ac_cv_lib_freetype_FT_Init_FreeType=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Init_FreeType" >&5
$as_echo "$ac_cv_lib_freetype_FT_Init_FreeType" >&6; }
if test "x$ac_cv_lib_freetype_FT_Init_FreeType" = xyes; then :

        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Get_PS_Font_Value in -lfreetype" >&5
$as_echo_n "checking for FT_Get_PS_Font_Value in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Get_PS_Font_Value+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype $LC_FREETYPE_extralibs $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Get_PS_Font_Value ();
int
main ()
{
return FT_Get_PS_Font_Value ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=yes
else
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&5
$as_echo "$ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&6; }
if test "x$ac_cv_lib_freetype_FT_Get_PS_Font_Value" = xyes; then :


  typeset USE_FREETYPE="3"

$as_echo "#define USE_FREETYPE 3" >>confdefs.h



else


  typeset USE_FREETYPE="2"

$as_echo "#define USE_FREETYPE 2" >>confdefs.h



fi


else



    unset ac_cv_lib_freetype_FT_Init_FreeType
# For system variable in freetype
    unset ac_cv_lib_freetype___FT_Init_FreeType

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng" >&5
$as_echo "$as_me: check freetype with extra libs -lpng" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Init_FreeType in -lfreetype" >&5
$as_echo_n "checking for FT_Init_FreeType in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Init_FreeType+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Init_FreeType ();
int
main ()
{
return FT_Init_FreeType ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Init_FreeType=yes
else
  ac_cv_lib_freetype_FT_Init_FreeType=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Init_FreeType" >&5
$as_echo "$ac_cv_lib_freetype_FT_Init_FreeType" >&6; }
if test "x$ac_cv_lib_freetype_FT_Init_FreeType" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng"

        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Get_PS_Font_Value in -lfreetype" >&5
$as_echo_n "checking for FT_Get_PS_Font_Value in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Get_PS_Font_Value+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype $LC_FREETYPE_extralibs $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Get_PS_Font_Value ();
int
main ()
{
return FT_Get_PS_Font_Value ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=yes
else
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&5
$as_echo "$ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&6; }
if test "x$ac_cv_lib_freetype_FT_Get_PS_Font_Value" = xyes; then :


  typeset USE_FREETYPE="3"

$as_echo "#define USE_FREETYPE 3" >>confdefs.h



else


  typeset USE_FREETYPE="2"

$as_echo "#define USE_FREETYPE 2" >>confdefs.h



fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_FT_Init_FreeType
# For system variable in freetype
    unset ac_cv_lib_freetype___FT_Init_FreeType

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng16" >&5
$as_echo "$as_me: check freetype with extra libs -lpng16" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng16"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Init_FreeType in -lfreetype" >&5
$as_echo_n "checking for FT_Init_FreeType in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Init_FreeType+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Init_FreeType ();
int
main ()
{
return FT_Init_FreeType ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Init_FreeType=yes
else
  ac_cv_lib_freetype_FT_Init_FreeType=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Init_FreeType" >&5
$as_echo "$ac_cv_lib_freetype_FT_Init_FreeType" >&6; }
if test "x$ac_cv_lib_freetype_FT_Init_FreeType" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng16"

        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Get_PS_Font_Value in -lfreetype" >&5
$as_echo_n "checking for FT_Get_PS_Font_Value in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Get_PS_Font_Value+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype $LC_FREETYPE_extralibs $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Get_PS_Font_Value ();
int
main ()
{
return FT_Get_PS_Font_Value ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=yes
else
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&5
$as_echo "$ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&6; }
if test "x$ac_cv_lib_freetype_FT_Get_PS_Font_Value" = xyes; then :


  typeset USE_FREETYPE="3"

$as_echo "#define USE_FREETYPE 3" >>confdefs.h



else


  typeset USE_FREETYPE="2"

$as_echo "#define USE_FREETYPE 2" >>confdefs.h



fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_FT_Init_FreeType
# For system variable in freetype
    unset ac_cv_lib_freetype___FT_Init_FreeType

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lz" >&5
$as_echo "$as_me: check freetype with extra libs -lz" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lz"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Init_FreeType in -lfreetype" >&5
$as_echo_n "checking for FT_Init_FreeType in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Init_FreeType+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Init_FreeType ();
int
main ()
{
return FT_Init_FreeType ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Init_FreeType=yes
else
  ac_cv_lib_freetype_FT_Init_FreeType=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Init_FreeType" >&5
$as_echo "$ac_cv_lib_freetype_FT_Init_FreeType" >&6; }
if test "x$ac_cv_lib_freetype_FT_Init_FreeType" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lz"

        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Get_PS_Font_Value in -lfreetype" >&5
$as_echo_n "checking for FT_Get_PS_Font_Value in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Get_PS_Font_Value+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype $LC_FREETYPE_extralibs $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Get_PS_Font_Value ();
int
main ()
{
return FT_Get_PS_Font_Value ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=yes
else
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&5
$as_echo "$ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&6; }
if test "x$ac_cv_lib_freetype_FT_Get_PS_Font_Value" = xyes; then :


  typeset USE_FREETYPE="3"

$as_echo "#define USE_FREETYPE 3" >>confdefs.h



else


  typeset USE_FREETYPE="2"

$as_echo "#define USE_FREETYPE 2" >>confdefs.h



fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_FT_Init_FreeType
# For system variable in freetype
    unset ac_cv_lib_freetype___FT_Init_FreeType

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng -lpng16" >&5
$as_echo "$as_me: check freetype with extra libs -lpng -lpng16" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng -lpng16"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Init_FreeType in -lfreetype" >&5
$as_echo_n "checking for FT_Init_FreeType in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Init_FreeType+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Init_FreeType ();
int
main ()
{
return FT_Init_FreeType ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Init_FreeType=yes
else
  ac_cv_lib_freetype_FT_Init_FreeType=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Init_FreeType" >&5
$as_echo "$ac_cv_lib_freetype_FT_Init_FreeType" >&6; }
if test "x$ac_cv_lib_freetype_FT_Init_FreeType" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng -lpng16"

        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Get_PS_Font_Value in -lfreetype" >&5
$as_echo_n "checking for FT_Get_PS_Font_Value in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Get_PS_Font_Value+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype $LC_FREETYPE_extralibs $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Get_PS_Font_Value ();
int
main ()
{
return FT_Get_PS_Font_Value ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=yes
else
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&5
$as_echo "$ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&6; }
if test "x$ac_cv_lib_freetype_FT_Get_PS_Font_Value" = xyes; then :


  typeset USE_FREETYPE="3"

$as_echo "#define USE_FREETYPE 3" >>confdefs.h



else


  typeset USE_FREETYPE="2"

$as_echo "#define USE_FREETYPE 2" >>confdefs.h



fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_FT_Init_FreeType
# For system variable in freetype
    unset ac_cv_lib_freetype___FT_Init_FreeType

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng -lz" >&5
$as_echo "$as_me: check freetype with extra libs -lpng -lz" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng -lz"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Init_FreeType in -lfreetype" >&5
$as_echo_n "checking for FT_Init_FreeType in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Init_FreeType+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Init_FreeType ();
int
main ()
{
return FT_Init_FreeType ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Init_FreeType=yes
else
  ac_cv_lib_freetype_FT_Init_FreeType=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Init_FreeType" >&5
$as_echo "$ac_cv_lib_freetype_FT_Init_FreeType" >&6; }
if test "x$ac_cv_lib_freetype_FT_Init_FreeType" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng -lz"

        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Get_PS_Font_Value in -lfreetype" >&5
$as_echo_n "checking for FT_Get_PS_Font_Value in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Get_PS_Font_Value+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype $LC_FREETYPE_extralibs $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Get_PS_Font_Value ();
int
main ()
{
return FT_Get_PS_Font_Value ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=yes
else
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&5
$as_echo "$ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&6; }
if test "x$ac_cv_lib_freetype_FT_Get_PS_Font_Value" = xyes; then :


  typeset USE_FREETYPE="3"

$as_echo "#define USE_FREETYPE 3" >>confdefs.h



else


  typeset USE_FREETYPE="2"

$as_echo "#define USE_FREETYPE 2" >>confdefs.h



fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_FT_Init_FreeType
# For system variable in freetype
    unset ac_cv_lib_freetype___FT_Init_FreeType

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng16 -lz" >&5
$as_echo "$as_me: check freetype with extra libs -lpng16 -lz" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng16 -lz"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Init_FreeType in -lfreetype" >&5
$as_echo_n "checking for FT_Init_FreeType in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Init_FreeType+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Init_FreeType ();
int
main ()
{
return FT_Init_FreeType ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Init_FreeType=yes
else
  ac_cv_lib_freetype_FT_Init_FreeType=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Init_FreeType" >&5
$as_echo "$ac_cv_lib_freetype_FT_Init_FreeType" >&6; }
if test "x$ac_cv_lib_freetype_FT_Init_FreeType" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng16 -lz"

        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Get_PS_Font_Value in -lfreetype" >&5
$as_echo_n "checking for FT_Get_PS_Font_Value in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Get_PS_Font_Value+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype $LC_FREETYPE_extralibs $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Get_PS_Font_Value ();
int
main ()
{
return FT_Get_PS_Font_Value ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=yes
else
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&5
$as_echo "$ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&6; }
if test "x$ac_cv_lib_freetype_FT_Get_PS_Font_Value" = xyes; then :


  typeset USE_FREETYPE="3"

$as_echo "#define USE_FREETYPE 3" >>confdefs.h



else


  typeset USE_FREETYPE="2"

$as_echo "#define USE_FREETYPE 2" >>confdefs.h



fi



else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_FT_Init_FreeType
# For system variable in freetype
    unset ac_cv_lib_freetype___FT_Init_FreeType

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng -lpng16 -lz" >&5
$as_echo "$as_me: check freetype with extra libs -lpng -lpng16 -lz" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng -lpng16 -lz"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Init_FreeType in -lfreetype" >&5
$as_echo_n "checking for FT_Init_FreeType in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Init_FreeType+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Init_FreeType ();
int
main ()
{
return FT_Init_FreeType ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Init_FreeType=yes
else
  ac_cv_lib_freetype_FT_Init_FreeType=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Init_FreeType" >&5
$as_echo "$ac_cv_lib_freetype_FT_Init_FreeType" >&6; }
if test "x$ac_cv_lib_freetype_FT_Init_FreeType" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng -lpng16 -lz"

        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for FT_Get_PS_Font_Value in -lfreetype" >&5
$as_echo_n "checking for FT_Get_PS_Font_Value in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_FT_Get_PS_Font_Value+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype $LC_FREETYPE_extralibs $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char FT_Get_PS_Font_Value ();
int
main ()
{
return FT_Get_PS_Font_Value ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=yes
else
  ac_cv_lib_freetype_FT_Get_PS_Font_Value=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&5
$as_echo "$ac_cv_lib_freetype_FT_Get_PS_Font_Value" >&6; }
if test "x$ac_cv_lib_freetype_FT_Get_PS_Font_Value" = xyes; then :


  typeset USE_FREETYPE="3"

$as_echo "#define USE_FREETYPE 3" >>confdefs.h



else


  typeset USE_FREETYPE="2"

$as_echo "#define USE_FREETYPE 2" >>confdefs.h



fi



else

      LIBS=$_LC_CHECK_LIB_libs

  :


fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi



else

      ac_fn_cxx_check_header_mongrel "$LINENO" "freetype.h" "ac_cv_header_freetype_h" "$ac_includes_default"
if test "x$ac_cv_header_freetype_h" = xyes; then :


  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ft_init_freetype in -lfreetype" >&5
$as_echo_n "checking for ft_init_freetype in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_ft_init_freetype+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char ft_init_freetype ();
int
main ()
{
return ft_init_freetype ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_ft_init_freetype=yes
else
  ac_cv_lib_freetype_ft_init_freetype=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_ft_init_freetype" >&5
$as_echo "$ac_cv_lib_freetype_ft_init_freetype" >&6; }
if test "x$ac_cv_lib_freetype_ft_init_freetype" = xyes; then :


  typeset USE_FREETYPE="1"

$as_echo "#define USE_FREETYPE 1" >>confdefs.h



else



    unset ac_cv_lib_freetype_ft_init_freetype
# For system variable in freetype
    unset ac_cv_lib_freetype___ft_init_freetype

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng" >&5
$as_echo "$as_me: check freetype with extra libs -lpng" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ft_init_freetype in -lfreetype" >&5
$as_echo_n "checking for ft_init_freetype in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_ft_init_freetype+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char ft_init_freetype ();
int
main ()
{
return ft_init_freetype ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_ft_init_freetype=yes
else
  ac_cv_lib_freetype_ft_init_freetype=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_ft_init_freetype" >&5
$as_echo "$ac_cv_lib_freetype_ft_init_freetype" >&6; }
if test "x$ac_cv_lib_freetype_ft_init_freetype" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng"


  typeset USE_FREETYPE="1"

$as_echo "#define USE_FREETYPE 1" >>confdefs.h




else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_ft_init_freetype
# For system variable in freetype
    unset ac_cv_lib_freetype___ft_init_freetype

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng16" >&5
$as_echo "$as_me: check freetype with extra libs -lpng16" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng16"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ft_init_freetype in -lfreetype" >&5
$as_echo_n "checking for ft_init_freetype in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_ft_init_freetype+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char ft_init_freetype ();
int
main ()
{
return ft_init_freetype ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_ft_init_freetype=yes
else
  ac_cv_lib_freetype_ft_init_freetype=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_ft_init_freetype" >&5
$as_echo "$ac_cv_lib_freetype_ft_init_freetype" >&6; }
if test "x$ac_cv_lib_freetype_ft_init_freetype" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng16"


  typeset USE_FREETYPE="1"

$as_echo "#define USE_FREETYPE 1" >>confdefs.h




else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_ft_init_freetype
# For system variable in freetype
    unset ac_cv_lib_freetype___ft_init_freetype

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lz" >&5
$as_echo "$as_me: check freetype with extra libs -lz" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lz"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ft_init_freetype in -lfreetype" >&5
$as_echo_n "checking for ft_init_freetype in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_ft_init_freetype+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char ft_init_freetype ();
int
main ()
{
return ft_init_freetype ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_ft_init_freetype=yes
else
  ac_cv_lib_freetype_ft_init_freetype=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_ft_init_freetype" >&5
$as_echo "$ac_cv_lib_freetype_ft_init_freetype" >&6; }
if test "x$ac_cv_lib_freetype_ft_init_freetype" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lz"


  typeset USE_FREETYPE="1"

$as_echo "#define USE_FREETYPE 1" >>confdefs.h




else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_ft_init_freetype
# For system variable in freetype
    unset ac_cv_lib_freetype___ft_init_freetype

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng -lpng16" >&5
$as_echo "$as_me: check freetype with extra libs -lpng -lpng16" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng -lpng16"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ft_init_freetype in -lfreetype" >&5
$as_echo_n "checking for ft_init_freetype in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_ft_init_freetype+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char ft_init_freetype ();
int
main ()
{
return ft_init_freetype ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_ft_init_freetype=yes
else
  ac_cv_lib_freetype_ft_init_freetype=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_ft_init_freetype" >&5
$as_echo "$ac_cv_lib_freetype_ft_init_freetype" >&6; }
if test "x$ac_cv_lib_freetype_ft_init_freetype" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng -lpng16"


  typeset USE_FREETYPE="1"

$as_echo "#define USE_FREETYPE 1" >>confdefs.h




else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_ft_init_freetype
# For system variable in freetype
    unset ac_cv_lib_freetype___ft_init_freetype

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng -lz" >&5
$as_echo "$as_me: check freetype with extra libs -lpng -lz" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng -lz"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ft_init_freetype in -lfreetype" >&5
$as_echo_n "checking for ft_init_freetype in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_ft_init_freetype+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char ft_init_freetype ();
int
main ()
{
return ft_init_freetype ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_ft_init_freetype=yes
else
  ac_cv_lib_freetype_ft_init_freetype=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_ft_init_freetype" >&5
$as_echo "$ac_cv_lib_freetype_ft_init_freetype" >&6; }
if test "x$ac_cv_lib_freetype_ft_init_freetype" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng -lz"


  typeset USE_FREETYPE="1"

$as_echo "#define USE_FREETYPE 1" >>confdefs.h




else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_ft_init_freetype
# For system variable in freetype
    unset ac_cv_lib_freetype___ft_init_freetype

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng16 -lz" >&5
$as_echo "$as_me: check freetype with extra libs -lpng16 -lz" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng16 -lz"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ft_init_freetype in -lfreetype" >&5
$as_echo_n "checking for ft_init_freetype in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_ft_init_freetype+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char ft_init_freetype ();
int
main ()
{
return ft_init_freetype ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_ft_init_freetype=yes
else
  ac_cv_lib_freetype_ft_init_freetype=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_ft_init_freetype" >&5
$as_echo "$ac_cv_lib_freetype_ft_init_freetype" >&6; }
if test "x$ac_cv_lib_freetype_ft_init_freetype" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng16 -lz"


  typeset USE_FREETYPE="1"

$as_echo "#define USE_FREETYPE 1" >>confdefs.h




else

      LIBS=$_LC_CHECK_LIB_libs


    unset ac_cv_lib_freetype_ft_init_freetype
# For system variable in freetype
    unset ac_cv_lib_freetype___ft_init_freetype

    { $as_echo "$as_me:${as_lineno-$LINENO}: check freetype with extra libs -lpng -lpng16 -lz" >&5
$as_echo "$as_me: check freetype with extra libs -lpng -lpng16 -lz" >&6;}
    _LC_CHECK_LIB_libs=$LIBS
    LIBS+=" -lpng -lpng16 -lz"
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for ft_init_freetype in -lfreetype" >&5
$as_echo_n "checking for ft_init_freetype in -lfreetype... " >&6; }
if ${ac_cv_lib_freetype_ft_init_freetype+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lfreetype  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char ft_init_freetype ();
int
main ()
{
return ft_init_freetype ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_freetype_ft_init_freetype=yes
else
  ac_cv_lib_freetype_ft_init_freetype=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_freetype_ft_init_freetype" >&5
$as_echo "$ac_cv_lib_freetype_ft_init_freetype" >&6; }
if test "x$ac_cv_lib_freetype_ft_init_freetype" = xyes; then :

      LIBS=$_LC_CHECK_LIB_libs
      LC_FREETYPE_extralibs="-lpng -lpng16 -lz"


  typeset USE_FREETYPE="1"

$as_echo "#define USE_FREETYPE 1" >>confdefs.h




else

      LIBS=$_LC_CHECK_LIB_libs

  :


fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi

    unset ${!_LC_CHECK_LIB_*}



fi



fi



fi



  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags



    if [[ $USE_FREETYPE ]]
    then
      FREETYPE_LIBS+=" ${LC_FREETYPE_extralibs}"




  LC_MERGE_FLAGS_list="$FREETYPE_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$FREETYPE_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

  LC_MERGE_FLAGS_list="$FREETYPE_LIBS"
  if [[ "LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$FREETYPE_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LIBS

  unset STRIP_ARG_memo
  if test "$LIBS" = "$STRIP_ALL_ARGS_arg"
  then LIBS=
  else  while test "$LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LIBS"
        LIBS="${LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LIBS="${LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LIBS="${LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LIBS=$(echo $LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}




$as_echo "#define LINKED_FREETYPE 1" >>confdefs.h

    else
      as_fn_error $? "Cannot find a working freetype library." "$LINENO" 5
    fi
  else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: disabling freetype support" >&5
$as_echo "$as_me: WARNING: disabling freetype support" >&2;}
  fi

  FREETYPE_CXX=$FREETYPE_CXXFLAGS

  FREETYPE_CPP=$FREETYPE_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(FREETYPE|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: FREETYPE_CFLAGS:$FREETYPE_CFLAGS" >&5
$as_echo "$as_me: FREETYPE_CFLAGS:$FREETYPE_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: FREETYPE_CXXFLAGS:$FREETYPE_CXXFLAGS" >&5
$as_echo "$as_me: FREETYPE_CXXFLAGS:$FREETYPE_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: FREETYPE_CPPFLAGS:$FREETYPE_CPPFLAGS" >&5
$as_echo "$as_me: FREETYPE_CPPFLAGS:$FREETYPE_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: FREETYPE_LIBS:$FREETYPE_LIBS" >&5
$as_echo "$as_me: FREETYPE_LIBS:$FREETYPE_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: FREETYPE_LDFLAGS:$FREETYPE_LDFLAGS" >&5
$as_echo "$as_me: FREETYPE_LDFLAGS:$FREETYPE_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  FREETYPE_CFLAGS="$FREETYPE_CXXFLAGS $FREETYPE_CPPFLAGS"







# Check whether --with-cairo was given.
if test "${with_cairo+set}" = set; then :
  withval=$with_cairo;
fi


  SAVE_CPPFLAGS="$CPPFLAGS"
  SAVE_LDFLAGS="$LDFLAGS"
  SAVE_LIBS="$LIBS"
  if test "$with_cairo" = "no" -o "$with_cairo" = "" ; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling cairo support" >&5
$as_echo "disabling cairo support" >&6; }
  else
      CPPFLAGS=`pkg-config --cflags cairo`
      LIBS=`pkg-config --libs cairo`
      ac_fn_cxx_check_header_mongrel "$LINENO" "cairo.h" "ac_cv_header_cairo_h" "$ac_includes_default"
if test "x$ac_cv_header_cairo_h" = xyes; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for cairo" >&5
$as_echo_n "checking for cairo... " >&6; }
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

  #include <cairo.h>

int
main ()
{

      cairo_surface_t *surface;
      surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, 120, 120);

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }

$as_echo "#define USE_CAIRO 1" >>confdefs.h

      CAIRO_CFLAGS="$CPPFLAGS"
      if test "$with_cairo" = "linked" ; then
        CAIRO_LDFLAGS="$LIBS"

$as_echo "#define LINKED_CAIRO 1" >>confdefs.h

      fi

else

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
fi


  fi

  CPPFLAGS="$SAVE_CPPFLAGS"
  LDFLAGS="$SAVE_LDFLAGS"
  LIBS="$SAVE_LIBS"


  CAIRO_CXX=$CAIRO_CXXFLAGS

  CAIRO_CPP=$CAIRO_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(CAIRO|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: CAIRO_CFLAGS:$CAIRO_CFLAGS" >&5
$as_echo "$as_me: CAIRO_CFLAGS:$CAIRO_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: CAIRO_CXXFLAGS:$CAIRO_CXXFLAGS" >&5
$as_echo "$as_me: CAIRO_CXXFLAGS:$CAIRO_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: CAIRO_CPPFLAGS:$CAIRO_CPPFLAGS" >&5
$as_echo "$as_me: CAIRO_CPPFLAGS:$CAIRO_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: CAIRO_LIBS:$CAIRO_LIBS" >&5
$as_echo "$as_me: CAIRO_LIBS:$CAIRO_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: CAIRO_LDFLAGS:$CAIRO_LDFLAGS" >&5
$as_echo "$as_me: CAIRO_LDFLAGS:$CAIRO_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  CAIRO_CFLAGS="$CAIRO_CXXFLAGS $CAIRO_CPPFLAGS"







# Check whether --with-imlib2 was given.
if test "${with_imlib2+set}" = set; then :
  withval=$with_imlib2;
fi


  SAVE_CPPFLAGS="$CPPFLAGS"
  SAVE_LDFLAGS="$LDFLAGS"
  SAVE_LIBS="$LIBS"
  if test "$with_imlib2" = "no" -o "$with_imlib2" = "" ; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling imlib2 support" >&5
$as_echo "disabling imlib2 support" >&6; }
  else
      CPPFLAGS=`imlib2-config --cflags`
      LIBS=`imlib2-config --libs`
      ac_fn_cxx_check_header_mongrel "$LINENO" "Imlib2.h" "ac_cv_header_Imlib2_h" "$ac_includes_default"
if test "x$ac_cv_header_Imlib2_h" = xyes; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for imlib2" >&5
$as_echo_n "checking for imlib2... " >&6; }
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

  #include <X11/Xlib.h>
  #include <Imlib2.h>
  #include <stdio.h>
  #include <string.h>

int
main ()
{

      Imlib_Image image= imlib_load_image("");

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }

$as_echo "#define USE_IMLIB2 1" >>confdefs.h

      IMLIB2_CFLAGS="$CPPFLAGS"
      if test "$with_imlib2" = "linked" ; then
        IMLIB2_LDFLAGS="$LIBS"

$as_echo "#define LINKED_IMLIB2 1" >>confdefs.h

      fi

else

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
fi


  fi

  CPPFLAGS="$SAVE_CPPFLAGS"
  LDFLAGS="$SAVE_LDFLAGS"
  LIBS="$SAVE_LIBS"


  IMLIB2_CXX=$IMLIB2_CXXFLAGS

  IMLIB2_CPP=$IMLIB2_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(IMLIB2|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: IMLIB2_CFLAGS:$IMLIB2_CFLAGS" >&5
$as_echo "$as_me: IMLIB2_CFLAGS:$IMLIB2_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: IMLIB2_CXXFLAGS:$IMLIB2_CXXFLAGS" >&5
$as_echo "$as_me: IMLIB2_CXXFLAGS:$IMLIB2_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: IMLIB2_CPPFLAGS:$IMLIB2_CPPFLAGS" >&5
$as_echo "$as_me: IMLIB2_CPPFLAGS:$IMLIB2_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: IMLIB2_LIBS:$IMLIB2_LIBS" >&5
$as_echo "$as_me: IMLIB2_LIBS:$IMLIB2_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: IMLIB2_LDFLAGS:$IMLIB2_LDFLAGS" >&5
$as_echo "$as_me: IMLIB2_LDFLAGS:$IMLIB2_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  IMLIB2_CFLAGS="$IMLIB2_CXXFLAGS $IMLIB2_CPPFLAGS"







# Check whether --with-axel was given.
if test "${with_axel+set}" = set; then :
  withval=$with_axel;
fi


  SAVE_CPPFLAGS="$CPPFLAGS"
  SAVE_LDFLAGS="$LDFLAGS"
  SAVE_LIBS="$LIBS"
  if test "$with_axel" = "no" -o "$with_axel" = "" ; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling axel support" >&5
$as_echo "disabling axel support" >&6; }
  else
      CPPFLAGS=`axel-config --cflags`
      LIBS=`axel-config --libs`
      ac_fn_cxx_check_header_mongrel "$LINENO" "QGui/Viewer.h" "ac_cv_header_QGui_Viewer_h" "$ac_includes_default"
if test "x$ac_cv_header_QGui_Viewer_h" = xyes; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for axel" >&5
$as_echo_n "checking for axel... " >&6; }
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

  #include <QGui/Viewer.h>

int
main ()
{

      Viewer viewer(0);

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }

$as_echo "#define USE_AXEL 1" >>confdefs.h

      AXEL_CFLAGS="$CPPFLAGS"
      if test "$with_axel" = "linked" ; then
        AXEL_LDFLAGS="$LIBS"

$as_echo "#define LINKED_AXEL 1" >>confdefs.h

      fi

else

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
fi


  fi

  CPPFLAGS="$SAVE_CPPFLAGS"
  LDFLAGS="$SAVE_LDFLAGS"
  LIBS="$SAVE_LIBS"


  AXEL_CXX=$AXEL_CXXFLAGS

  AXEL_CPP=$AXEL_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(AXEL|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: AXEL_CFLAGS:$AXEL_CFLAGS" >&5
$as_echo "$as_me: AXEL_CFLAGS:$AXEL_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: AXEL_CXXFLAGS:$AXEL_CXXFLAGS" >&5
$as_echo "$as_me: AXEL_CXXFLAGS:$AXEL_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: AXEL_CPPFLAGS:$AXEL_CPPFLAGS" >&5
$as_echo "$as_me: AXEL_CPPFLAGS:$AXEL_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: AXEL_LIBS:$AXEL_LIBS" >&5
$as_echo "$as_me: AXEL_LIBS:$AXEL_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: AXEL_LDFLAGS:$AXEL_LDFLAGS" >&5
$as_echo "$as_me: AXEL_LDFLAGS:$AXEL_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  AXEL_CFLAGS="$AXEL_CXXFLAGS $AXEL_CPPFLAGS"






  # Check whether --enable-gs was given.
if test "${enable_gs+set}" = set; then :
  enableval=$enable_gs; { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Compilation may fail" >&5
$as_echo "$as_me: WARNING: Compilation may fail" >&2;}
else


$as_echo "#define USE_GS 1" >>confdefs.h

      CONFIG_GS="Ghostscript"

      if [[ -n $TMREPO ]]
      then # it is comming from tm SDK
        for ac_prog in gs.exe gs
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_GS_EXE+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $GS_EXE in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_GS_EXE="$GS_EXE" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $TMREPO/bin
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_GS_EXE="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
GS_EXE=$ac_cv_path_GS_EXE
if test -n "$GS_EXE"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $GS_EXE" >&5
$as_echo "$GS_EXE" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$GS_EXE" && break
done

        if [[ -x "$GS_EXE" ]]
        then
          #get needed gs fonts and libs paths
          while read -r l sep p # default path, separator, extra path
          do
            case $l in
            (/*/ghostscript*/lib) GS_LIB=$l;;
            (/*/ghostscript*/fonts) GS_FONTS=$l;;
            esac
          done <<< "$($GS_EXE -h)"    # try to change path to match the bundle if any


cat >>confdefs.h <<_ACEOF
#define GS_EXE "bin/$(basename $GS_EXE)"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define GS_LIB "share/ghostscript/lib"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define GS_FONTS "share/ghostscript/fonts"
_ACEOF




          { $as_echo "$as_me:${as_lineno-$LINENO}: Ghostscript found  in TMREPO, it will be embedded in Package for Macos or Windows" >&5
$as_echo "$as_me: Ghostscript found  in TMREPO, it will be embedded in Package for Macos or Windows" >&6;}
        else { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Ghostscript not detected in TMREPO, won't be embedded in Package" >&5
$as_echo "$as_me: WARNING: Ghostscript not detected in TMREPO, won't be embedded in Package" >&2;}
        fi
      fi


fi




# Check whether --with-sqlite3 was given.
if test "${with_sqlite3+set}" = set; then :
  withval=$with_sqlite3;
fi


  SAVE_CPPFLAGS="$CPPFLAGS"
  SAVE_LDFLAGS="$LDFLAGS"
  SAVE_LIBS="$LIBS"
  if test "$with_sqlite3" = "no" -o "$with_sqlite3" = "" ; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling sqlite3 support" >&5
$as_echo "disabling sqlite3 support" >&6; }
  else
      CPPFLAGS=`pkg-config --cflags sqlite3`
      LIBS=`pkg-config --libs sqlite3`
      ac_fn_cxx_check_header_mongrel "$LINENO" "sqlite3.h" "ac_cv_header_sqlite3_h" "$ac_includes_default"
if test "x$ac_cv_header_sqlite3_h" = xyes; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for sqlite3" >&5
$as_echo_n "checking for sqlite3... " >&6; }
      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

  #include <sqlite3.h>

int
main ()
{

      int res= sqlite3_threadsafe ();

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }

$as_echo "#define USE_SQLITE3 1" >>confdefs.h

      SQLITE3_CFLAGS="$CPPFLAGS"
      if test "$with_sqlite3" = "linked" ; then
        SQLITE3_LDFLAGS="$LIBS"

$as_echo "#define LINKED_SQLITE3 1" >>confdefs.h

      fi

else

      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
fi


  fi

  CPPFLAGS="$SAVE_CPPFLAGS"
  LDFLAGS="$SAVE_LDFLAGS"
  LIBS="$SAVE_LIBS"


  SQLITE3_CXX=$SQLITE3_CXXFLAGS

  SQLITE3_CPP=$SQLITE3_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(SQLITE3|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: SQLITE3_CFLAGS:$SQLITE3_CFLAGS" >&5
$as_echo "$as_me: SQLITE3_CFLAGS:$SQLITE3_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: SQLITE3_CXXFLAGS:$SQLITE3_CXXFLAGS" >&5
$as_echo "$as_me: SQLITE3_CXXFLAGS:$SQLITE3_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: SQLITE3_CPPFLAGS:$SQLITE3_CPPFLAGS" >&5
$as_echo "$as_me: SQLITE3_CPPFLAGS:$SQLITE3_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: SQLITE3_LIBS:$SQLITE3_LIBS" >&5
$as_echo "$as_me: SQLITE3_LIBS:$SQLITE3_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: SQLITE3_LDFLAGS:$SQLITE3_LDFLAGS" >&5
$as_echo "$as_me: SQLITE3_LDFLAGS:$SQLITE3_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  SQLITE3_CFLAGS="$SQLITE3_CXXFLAGS $SQLITE3_CPPFLAGS"









# Check whether --with-sparkle was given.
if test "${with_sparkle+set}" = set; then :
  withval=$with_sparkle;
fi


  if test "$with_sparkle" = "no" -o "$with_sparkle" = "" ; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling Sparkle usage" >&5
$as_echo "disabling Sparkle usage" >&6; }
  else
    unset sparkle_ok



  CFLAGS__ax_save_flags=$CFLAGS



  CPPFLAGS__ax_save_flags=$CPPFLAGS



  CXXFLAGS__ax_save_flags=$CXXFLAGS



  LDFLAGS__ax_save_flags=$LDFLAGS



  LIBS__ax_save_flags=$LIBS



  OBJCFLAGS__ax_save_flags=$OBJCFLAGS



  OBJCXXFLAGS__ax_save_flags=$OBJCXXFLAGS



    case "${CONFIG_OS}" in
    (MINGW)
      { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we can use the Sparkle library" >&5
$as_echo_n "checking whether we can use the Sparkle library... " >&6; }
      ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu


  LC_SCATTER_FLAGS_list="-I $with_sparkle/include -L $with_sparkle/Release -lwinsparkle"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_LDFLAGS=
  else  while test "$SPARKLE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_LDFLAGS"
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_LDFLAGS=$(echo $SPARKLE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_CPPFLAGS=
  else  while test "$SPARKLE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_CPPFLAGS"
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_CPPFLAGS=$(echo $SPARKLE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_CPPFLAGS=
  else  while test "$SPARKLE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_CPPFLAGS"
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_CPPFLAGS=$(echo $SPARKLE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_LDFLAGS=
  else  while test "$SPARKLE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_LDFLAGS"
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_LDFLAGS=$(echo $SPARKLE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_LDFLAGS=
  else  while test "$SPARKLE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_LDFLAGS"
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_LDFLAGS=$(echo $SPARKLE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_LDFLAGS=
  else  while test "$SPARKLE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_LDFLAGS"
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_LDFLAGS=$(echo $SPARKLE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib SPARKLE" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib SPARKLE" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CFLAGS
  CFLAGS="$CFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_CXXFLAGS=
  else  while test "$SPARKLE_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_CXXFLAGS"
        SPARKLE_CXXFLAGS="${SPARKLE_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_CXXFLAGS="${SPARKLE_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_CXXFLAGS="${SPARKLE_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_CXXFLAGS=$(echo $SPARKLE_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_CFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_CFLAGS=
  else  while test "$SPARKLE_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_CFLAGS"
        SPARKLE_CFLAGS="${SPARKLE_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_CFLAGS="${SPARKLE_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_CFLAGS="${SPARKLE_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_CFLAGS=$(echo $SPARKLE_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $SPARKLE_LIBS)" # remove unnecessary spaces and add a heading space
  SPARKLE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$SPARKLE_LIBS" = "$LC_GETPOP_FLAG_1"
  then SPARKLE_LIBS=${SPARKLE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$SPARKLE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then SPARKLE_LIBS=$(echo $SPARKLE_LIBS)
    else SPARKLE_LIBS=$(echo $SPARKLE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $SPARKLE_LIBS)" # remove unnecessary spaces and add a heading space
  SPARKLE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$SPARKLE_LIBS" = "$LC_GETPOP_FLAG_1"
  then SPARKLE_LIBS=${SPARKLE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$SPARKLE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then SPARKLE_LIBS=$(echo $SPARKLE_LIBS)
    else SPARKLE_LIBS=$(echo $SPARKLE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  SPARKLE_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}




    CFLAGS="$BASE_CFLAGS $SPARKLE_CFLAGS"

    CXXFLAGS="$BASE_CXXFLAGS $SPARKLE_CXXFLAGS"

    CPPFLAGS="$BASE_CPPFLAGS $SPARKLE_CPPFLAGS"

    LIBS="$BASE_LIBS $SPARKLE_LIBS"


  LC_MERGE_FLAGS_list="$SPARKLE_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$SPARKLE_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}



      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

  #include <winsparkle.h>

int
main ()
{

  win_sparkle_init();

  ;
  return 0;
}
_ACEOF
if ac_fn_c_try_link "$LINENO"; then :
   sparkle_ok=1
      WINSPARKLE_PATH="$with_sparkle"
      WINSPARKLE_DLL="WinSparkle*.dll"



else
  as_fn_error $? "Can't use WinSparkle" "$LINENO" 5
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
      ac_ext=cpp
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu

      ;;
    (MACOS)
      with_sparkle=$HOME/Library/Frameworks
      { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we can use the Sparkle framework" >&5
$as_echo_n "checking whether we can use the Sparkle framework... " >&6; }
      ac_ext=m
ac_cpp='$OBJCPP $CPPFLAGS'
ac_compile='$OBJC -c $OBJCFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$OBJC -o conftest$ac_exeext $OBJCFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_objc_compiler_gnu


  LC_SCATTER_FLAGS_list="-I$with_sparkle/Sparkle.framework/Headers -F$with_sparkle -framework Sparkle -Wl,-rpath,$with_sparkle"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_LDFLAGS=
  else  while test "$SPARKLE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_LDFLAGS"
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_LDFLAGS=$(echo $SPARKLE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_CPPFLAGS=
  else  while test "$SPARKLE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_CPPFLAGS"
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_CPPFLAGS=$(echo $SPARKLE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_CPPFLAGS=
  else  while test "$SPARKLE_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_CPPFLAGS"
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_CPPFLAGS="${SPARKLE_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_CPPFLAGS=$(echo $SPARKLE_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_LDFLAGS=
  else  while test "$SPARKLE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_LDFLAGS"
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_LDFLAGS=$(echo $SPARKLE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_LDFLAGS=
  else  while test "$SPARKLE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_LDFLAGS"
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_LDFLAGS=$(echo $SPARKLE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_LDFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_LDFLAGS=
  else  while test "$SPARKLE_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_LDFLAGS"
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_LDFLAGS="${SPARKLE_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_LDFLAGS=$(echo $SPARKLE_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib SPARKLE" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib SPARKLE" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_objcflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether Objective C compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether Objective C compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$OBJCFLAGS
  OBJCFLAGS="$OBJCFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_objc_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  OBJCFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_CXXFLAGS=
  else  while test "$SPARKLE_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_CXXFLAGS"
        SPARKLE_CXXFLAGS="${SPARKLE_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_CXXFLAGS="${SPARKLE_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_CXXFLAGS="${SPARKLE_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_CXXFLAGS=$(echo $SPARKLE_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then SPARKLE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $SPARKLE_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$SPARKLE_CFLAGS

  unset STRIP_ARG_memo
  if test "$SPARKLE_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then SPARKLE_CFLAGS=
  else  while test "$SPARKLE_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$SPARKLE_CFLAGS"
        SPARKLE_CFLAGS="${SPARKLE_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        SPARKLE_CFLAGS="${SPARKLE_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        SPARKLE_CFLAGS="${SPARKLE_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  SPARKLE_CFLAGS=$(echo $SPARKLE_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       SPARKLE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$SPARKLE_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else SPARKLE_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $SPARKLE_LIBS)" # remove unnecessary spaces and add a heading space
  SPARKLE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$SPARKLE_LIBS" = "$LC_GETPOP_FLAG_1"
  then SPARKLE_LIBS=${SPARKLE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$SPARKLE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then SPARKLE_LIBS=$(echo $SPARKLE_LIBS)
    else SPARKLE_LIBS=$(echo $SPARKLE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $SPARKLE_LIBS)" # remove unnecessary spaces and add a heading space
  SPARKLE_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$SPARKLE_LIBS" = "$LC_GETPOP_FLAG_1"
  then SPARKLE_LIBS=${SPARKLE_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$SPARKLE_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then SPARKLE_LIBS=$(echo $SPARKLE_LIBS)
    else SPARKLE_LIBS=$(echo $SPARKLE_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  SPARKLE_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}




    CFLAGS="$BASE_CFLAGS $SPARKLE_CFLAGS"

    CXXFLAGS="$BASE_CXXFLAGS $SPARKLE_CXXFLAGS"

    CPPFLAGS="$BASE_CPPFLAGS $SPARKLE_CPPFLAGS"

    LIBS="$BASE_LIBS $SPARKLE_LIBS"


  LC_MERGE_FLAGS_list="$SPARKLE_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$SPARKLE_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}



      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

  #include <Cocoa/Cocoa.h>
  #include "Sparkle.h"

int
main ()
{

  SUUpdater* updater;

  ;
  return 0;
}
_ACEOF
if ac_fn_objc_try_link "$LINENO"; then :
   sparkle_ok=1
      CONFIG_SPARKLE=Updater


else
  as_fn_error $? "Can't use WinSparkle" "$LINENO" 5
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
      ac_ext=cpp
ac_cpp='$CXXCPP $CPPFLAGS'
ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_cxx_compiler_gnu

      ;;
      esac

    if [ $sparkle_ok ]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }

$as_echo "#define USE_SPARKLE 1" >>confdefs.h


  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags




  SPARKLE_CXX=$SPARKLE_CXXFLAGS

  SPARKLE_CPP=$SPARKLE_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(SPARKLE|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: SPARKLE_CFLAGS:$SPARKLE_CFLAGS" >&5
$as_echo "$as_me: SPARKLE_CFLAGS:$SPARKLE_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: SPARKLE_CXXFLAGS:$SPARKLE_CXXFLAGS" >&5
$as_echo "$as_me: SPARKLE_CXXFLAGS:$SPARKLE_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: SPARKLE_CPPFLAGS:$SPARKLE_CPPFLAGS" >&5
$as_echo "$as_me: SPARKLE_CPPFLAGS:$SPARKLE_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: SPARKLE_LIBS:$SPARKLE_LIBS" >&5
$as_echo "$as_me: SPARKLE_LIBS:$SPARKLE_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: SPARKLE_LDFLAGS:$SPARKLE_LDFLAGS" >&5
$as_echo "$as_me: SPARKLE_LDFLAGS:$SPARKLE_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  SPARKLE_CFLAGS="$SPARKLE_CXXFLAGS $SPARKLE_CPPFLAGS"




    else
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }

  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags



    fi
  fi


# Check whether --with-appcast was given.
if test "${with_appcast+set}" = set; then :
  withval=$with_appcast;
      APPCAST=$withval


fi




#--------------------------------------------------------------------
# Further TeXmacs settings
#--------------------------------------------------------------------


  # Check whether --enable-fastalloc was given.
if test "${enable_fastalloc+set}" = set; then :
  enableval=$enable_fastalloc;
else
  enable_fastalloc="yes"
fi

  case "$enable_fastalloc" in
      yes)
	  ;;
      no)
	  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling fast allocator for small objects" >&5
$as_echo "disabling fast allocator for small objects" >&6; }

$as_echo "#define NO_FAST_ALLOC 1" >>confdefs.h

	  ;;
      *)
	  as_fn_error $? "bad option --enable-fastalloc=$enable_fastalloc" "$LINENO" 5
	  ;;
  esac


  if test x"$CONFIG_OS" = xMACOS; then

    # Check whether --enable-macosx-extensions was given.
if test "${enable_macosx_extensions+set}" = set; then :
  enableval=$enable_macosx_extensions;
else
  enable_macosx_extensions="yes"
fi

    case "$enable_macosx_extensions" in
    (yes)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling Mac OSX extensions" >&5
$as_echo "enabling Mac OSX extensions" >&6; }

$as_echo "#define MACOSX_EXTENSIONS 1" >>confdefs.h

      CONFIG_MACOS="MacOS"
      #        CONFIG_BFLAGS="$CONFIG_BFLAGS -framework IOKit"
      ;;
    (no)
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling Mac OSX extensions" >&5
$as_echo "disabling Mac OSX extensions" >&6; }
      ;;
    (*)
      as_fn_error $? "bad option --enable-macosx-extensions=$enable_macosx_extensions" "$LINENO" 5
      ;;
    esac


# Check whether --with-sdk was given.
if test "${with_sdk+set}" = set; then :
  withval=$with_sdk;

        TM_MACOS_sdk=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX$withval.sdk
        if test -z "$TM_MACOS_sdk" -a -d $TM_MACOS_sdk; then :


  LC_MERGE_FLAGS_list="-isysroot $TM_MACOS_sdk "
  if [[ "CFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-isysroot $TM_MACOS_sdk "
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-isysroot $TM_MACOS_sdk"
  if [[ "CXXFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-isysroot $TM_MACOS_sdk"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CXXFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-Wl,-syslibroot,$TM_MACOS_sdk"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-Wl,-syslibroot,$TM_MACOS_sdk"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


fi

        TM_MACOS_sdk=/Library/Developer/CommandLineTools/SDKs/MacOSX$withval.sdk
        if test -z "$TM_MACOS_sdk" -a -d $TM_MACOS_sdk; then :


  LC_MERGE_FLAGS_list="-isysroot $TM_MACOS_sdk "
  if [[ "CFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-isysroot $TM_MACOS_sdk "
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-isysroot $TM_MACOS_sdk"
  if [[ "CXXFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-isysroot $TM_MACOS_sdk"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CXXFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-Wl,-syslibroot,$TM_MACOS_sdk"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-Wl,-syslibroot,$TM_MACOS_sdk"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


fi

        TM_MACOS_sdk=/Developer/SDKs/MacOSX$withval.sdk
        if test -z "$TM_MACOS_sdk" -a -d $TM_MACOS_sdk; then :


  LC_MERGE_FLAGS_list="-isysroot $TM_MACOS_sdk "
  if [[ "CFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-isysroot $TM_MACOS_sdk "
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-isysroot $TM_MACOS_sdk"
  if [[ "CXXFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-isysroot $TM_MACOS_sdk"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CXXFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-Wl,-syslibroot,$TM_MACOS_sdk"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-Wl,-syslibroot,$TM_MACOS_sdk"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


fi

      if test -z "$TM_MACOS_sdk"; then :
  as_fn_error $? "Apple SDK not found" "$LINENO" 5
fi
      unset TM_MACOS_sdk

fi



# Check whether --with-osx was given.
if test "${with_osx+set}" = set; then :
  withval=$with_osx;
          MACOSX_TARGET=-os$withval

  LC_MERGE_FLAGS_list="-mmacosx-version-min=$withval"
  if [[ "CFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-mmacosx-version-min=$withval"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-mmacosx-version-min=$withval"
  if [[ "CXXFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-mmacosx-version-min=$withval"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CXXFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-Wl,-macosx_version_min,$withval"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-Wl,-macosx_version_min,$withval"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

          OSXVERMIN=$withval


else
  OSXVERMIN=$(sw_vers -productVersion)


fi


  fi


  if test "$CONFIG_OS" = MINGW; then
    # Check whether --enable-console was given.
if test "${enable_console+set}" = set; then :
  enableval=$enable_console;
fi

    if test "$enableval" = yes
    then  { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling Windows console" >&5
$as_echo "enabling Windows console" >&6; }

  LC_SCATTER_FLAGS_list="-mconsole"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CPPFLAGS

  unset STRIP_ARG_memo
  if test "$CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CPPFLAGS=
  else  while test "$CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CPPFLAGS"
        CPPFLAGS="${CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CPPFLAGS="${CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CPPFLAGS="${CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CPPFLAGS=$(echo $CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CPPFLAGS

  unset STRIP_ARG_memo
  if test "$CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CPPFLAGS=
  else  while test "$CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CPPFLAGS"
        CPPFLAGS="${CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CPPFLAGS="${CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CPPFLAGS="${CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CPPFLAGS=$(echo $CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib " >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib " >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

    else  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling Windows console" >&5
$as_echo "disabling Windows console" >&6; }

  LC_SCATTER_FLAGS_list="-mwindows"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CPPFLAGS

  unset STRIP_ARG_memo
  if test "$CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CPPFLAGS=
  else  while test "$CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CPPFLAGS"
        CPPFLAGS="${CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CPPFLAGS="${CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CPPFLAGS="${CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CPPFLAGS=$(echo $CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CPPFLAGS

  unset STRIP_ARG_memo
  if test "$CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CPPFLAGS=
  else  while test "$CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CPPFLAGS"
        CPPFLAGS="${CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CPPFLAGS="${CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CPPFLAGS="${CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CPPFLAGS=$(echo $CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib " >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib " >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

    fi
    if test -n "$TMREPO"; then :

      XTRA_CMD=$TMREPO/windows/bin

      if test -d $TMREPO/windows/aspell; then :

        ASPELL_CMD=$TMREPO/windows/aspell


$as_echo "#define ASPELL \"plugins/aspell\"" >>confdefs.h

fi

fi
  fi



  CONFIG_X11=""
  CONFIG_COCOA=""
  CONFIG_GUI="X11"

  # Check whether --enable-qt was given.
if test "${enable_qt+set}" = set; then :
  enableval=$enable_qt;
else
  enable_qt="yes"
fi


  case "$enable_qt" in
      yes)

  typeset xtralibs
  case $CONFIG_OS in
    MINGW) xtralibs="+xml";;
  esac

  for ac_prog in qmake qmake-qt4 qmake-qt5
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_QMAKE+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $QMAKE in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_QMAKE="$QMAKE" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_QMAKE="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
QMAKE=$ac_cv_path_QMAKE
if test -n "$QMAKE"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $QMAKE" >&5
$as_echo "$QMAKE" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


  test -n "$QMAKE" && break
done
test -n "$QMAKE" || QMAKE="echo"

  case $($QMAKE -query QT_VERSION 2>/dev/null) in
  5.*)
    { $as_echo "$as_me:${as_lineno-$LINENO}: Qt5 found" >&5
$as_echo "$as_me: Qt5 found" >&6;}
    if test $CONFIG_OS == MACOS; then :
  xtraPlug=+macextras
else
  unset xtraPlug
fi
    echo "$as_me: this is autotroll.m4 serial 10" >&5

  test x"$TROLL" != x && echo 'ViM rox emacs.'


# Check whether --with-qt was given.
if test "${with_qt+set}" = set; then :
  withval=$with_qt;
fi


  if test x"$with_qt" = x"no"; then
    break
  else

$as_echo "#define HAVE_QT 1" >>confdefs.h

  fi

  if test x"$with_qt" = x"yes"; then
    QT_PATH=
  else
    QT_PATH=$with_qt
  fi

  # this is a hack to get decent flow control with 'break'
  for _qt_ignored in once; do

  # Find Qt.

  if test -d /usr/local/Trolltech; then
    # Try to find the latest version.
    tmp_qt_paths=`echo /usr/local/Trolltech/*/bin | tr ' ' '\n' | sort -nr \
                                              | xargs | sed 's/  */:/g'`
  fi
  # Path to which recent MacPorts (~v1.7) install Qt4.
  test -d /opt/local/libexec/qt4-mac/bin \
    && tmp_qt_paths="$tmp_qt_paths:/opt/local/libexec/qt4-mac/bin"

  # Find qmake.

  for ax_tool in qmake qmake-qt5 qmake-qt4 qmake-qt3; do
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}$ax_tool", so it can be a program name with args.
set dummy ${ac_tool_prefix}$ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_QMAKE+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $QMAKE in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_QMAKE="$QMAKE" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_DIR:$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_QMAKE="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
QMAKE=$ac_cv_path_QMAKE
if test -n "$QMAKE"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $QMAKE" >&5
$as_echo "$QMAKE" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_path_QMAKE"; then
  ac_pt_QMAKE=$QMAKE
  # Extract the first word of "$ax_tool", so it can be a program name with args.
set dummy $ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_ac_pt_QMAKE+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $ac_pt_QMAKE in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_ac_pt_QMAKE="$ac_pt_QMAKE" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_DIR:$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_ac_pt_QMAKE="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
ac_pt_QMAKE=$ac_cv_path_ac_pt_QMAKE
if test -n "$ac_pt_QMAKE"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_QMAKE" >&5
$as_echo "$ac_pt_QMAKE" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_pt_QMAKE" = x; then
    QMAKE=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    QMAKE=$ac_pt_QMAKE
  fi
else
  QMAKE="$ac_cv_path_QMAKE"
fi

  test -n "$QMAKE" && break
done
test -n "$QMAKE" || QMAKE="missing"

  if test x"$QMAKE" = xmissing; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find qmake. Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find qmake. Try --with-qt=PATH." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # Find moc (Meta Object Compiler).

  for ax_tool in moc moc-qt5 moc-qt4 moc-qt3; do
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}$ax_tool", so it can be a program name with args.
set dummy ${ac_tool_prefix}$ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_MOC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $MOC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_MOC="$MOC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_MOC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
MOC=$ac_cv_path_MOC
if test -n "$MOC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $MOC" >&5
$as_echo "$MOC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_path_MOC"; then
  ac_pt_MOC=$MOC
  # Extract the first word of "$ax_tool", so it can be a program name with args.
set dummy $ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_ac_pt_MOC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $ac_pt_MOC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_ac_pt_MOC="$ac_pt_MOC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_ac_pt_MOC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
ac_pt_MOC=$ac_cv_path_ac_pt_MOC
if test -n "$ac_pt_MOC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_MOC" >&5
$as_echo "$ac_pt_MOC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_pt_MOC" = x; then
    MOC=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    MOC=$ac_pt_MOC
  fi
else
  MOC="$ac_cv_path_MOC"
fi

  test -n "$MOC" && break
done
test -n "$MOC" || MOC="missing"

  if test x"$MOC" = xmissing; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find moc (Meta Object Compiler). Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find moc (Meta Object Compiler). Try --with-qt=PATH." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # Find uic (User Interface Compiler).

  for ax_tool in uic uic-qt5 uic-qt4 uic-qt3 uic3; do
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}$ax_tool", so it can be a program name with args.
set dummy ${ac_tool_prefix}$ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_UIC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $UIC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_UIC="$UIC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_UIC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
UIC=$ac_cv_path_UIC
if test -n "$UIC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $UIC" >&5
$as_echo "$UIC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_path_UIC"; then
  ac_pt_UIC=$UIC
  # Extract the first word of "$ax_tool", so it can be a program name with args.
set dummy $ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_ac_pt_UIC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $ac_pt_UIC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_ac_pt_UIC="$ac_pt_UIC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_ac_pt_UIC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
ac_pt_UIC=$ac_cv_path_ac_pt_UIC
if test -n "$ac_pt_UIC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_UIC" >&5
$as_echo "$ac_pt_UIC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_pt_UIC" = x; then
    UIC=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    UIC=$ac_pt_UIC
  fi
else
  UIC="$ac_cv_path_UIC"
fi

  test -n "$UIC" && break
done
test -n "$UIC" || UIC="missing"

  if test x"$UIC" = xmissing; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find uic (User Interface Compiler). Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find uic (User Interface Compiler). Try --with-qt=PATH." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # Find rcc (Qt Resource Compiler).

  for ax_tool in rcc rcc-qt5; do
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}$ax_tool", so it can be a program name with args.
set dummy ${ac_tool_prefix}$ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_RCC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $RCC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_RCC="$RCC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_RCC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
RCC=$ac_cv_path_RCC
if test -n "$RCC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $RCC" >&5
$as_echo "$RCC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_path_RCC"; then
  ac_pt_RCC=$RCC
  # Extract the first word of "$ax_tool", so it can be a program name with args.
set dummy $ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_ac_pt_RCC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $ac_pt_RCC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_ac_pt_RCC="$ac_pt_RCC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_ac_pt_RCC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
ac_pt_RCC=$ac_cv_path_ac_pt_RCC
if test -n "$ac_pt_RCC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_RCC" >&5
$as_echo "$ac_pt_RCC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_pt_RCC" = x; then
    RCC=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    RCC=$ac_pt_RCC
  fi
else
  RCC="$ac_cv_path_RCC"
fi

  test -n "$RCC" && break
done
test -n "$RCC" || RCC="false"

  if test x"$UIC" = xfalse; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find rcc (Qt Resource Compiler). Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find rcc (Qt Resource Compiler). Try --with-qt=PATH." >&2;}
  fi

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether host operating system is Darwin" >&5
$as_echo_n "checking whether host operating system is Darwin... " >&6; }
  at_darwin=no
  at_qmake_args=
  case $host_os in
    darwin*)
      at_darwin=yes
      ;;
  esac
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_darwin" >&5
$as_echo "$at_darwin" >&6; }

  # If we don't know the path to Qt, guess it from the path to qmake.
  if test x"$QT_PATH" = x; then
    QT_PATH=`dirname "$QMAKE"`
  fi
  if test x"$QT_PATH" = x; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find your Qt installation. Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find your Qt installation. Try --with-qt=PATH." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi


  # Get ready to build a test-app with Qt.
  if mkdir conftest.dir && cd conftest.dir; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot mkdir conftest.dir or cd to that directory." >&5
$as_echo "$as_me: WARNING: Cannot mkdir conftest.dir or cd to that directory." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  cat >conftest.h <<_ASEOF
#include <QObject>

class Foo: public QObject
{
  Q_OBJECT;
public:
  Foo();
  ~Foo() {}
public Q_SLOTS:
  void setValue(int value);
Q_SIGNALS:
  void valueChanged(int newValue);
private:
  int value_;
};
_ASEOF

  cat >conftest.cpp <<_ASEOF
#include "conftest.h"
Foo::Foo()
  : value_ (42)
{
  connect(this, SIGNAL(valueChanged(int)), this, SLOT(setValue(int)));
}

void Foo::setValue(int value)
{
  value_ = value;
}

int main()
{
  Foo f;
}
_ASEOF
  if $QMAKE -project; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Calling $QMAKE -project failed." >&5
$as_echo "$as_me: WARNING: Calling $QMAKE -project failed." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # Find the .pro file generated by qmake.
  pro_file='conftest.dir.pro'
  test -f $pro_file || pro_file=`echo *.pro`
  if test -f "$pro_file"; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Can't find the .pro file generated by Qmake." >&5
$as_echo "$as_me: WARNING: Can't find the .pro file generated by Qmake." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

 # Tweak the value of QT in the .pro file for +widgets.

  qt_conf=''
  for at_mod in +widgets; do
    at_mod=`echo "$at_mod" | sed 's/^-//; tough
                                  s/^+//; beef
                                  :ough
                                  s/^/QT -= /;n
                                  :eef
                                  s/^/QT += /'`
    qt_conf="$qt_conf
$at_mod"
  done
  echo "$qt_conf" | sed 1d >>"$pro_file"


 # Tweak the value of QT in the .pro file for $xtralibs +printsupport +svg $xtraPlug.

  qt_conf=''
  for at_mod in $xtralibs +printsupport +svg $xtraPlug; do
    at_mod=`echo "$at_mod" | sed 's/^-//; tough
                                  s/^+//; beef
                                  :ough
                                  s/^/QT -= /;n
                                  :eef
                                  s/^/QT += /'`
    qt_conf="$qt_conf
$at_mod"
  done
  echo "$qt_conf" | sed 1d >>"$pro_file"


 # Tweak the value of CONFIG in the .pro file for +exceptions.

  qt_conf=''
  for at_mod in +exceptions; do
    at_mod=`echo "$at_mod" | sed 's/^-//; tough
                                  s/^+//; beef
                                  :ough
                                  s/^/CONFIG -= /;n
                                  :eef
                                  s/^/CONFIG += /'`
    qt_conf="$qt_conf
$at_mod"
  done
  echo "$qt_conf" | sed 1d >>"$pro_file"


 # Add the extra-settings the user wants to set in the .pro
  echo "
      LIBS += $LDFLAGS
      QTPLUGIN = qjpeg qgif qico qsvg
    " >>"$pro_file"


  echo "$as_me:$LINENO: Invoking $QMAKE on $pro_file" >&5
  sed 's/^/| /' "$pro_file" >&5

  if $QMAKE $at_qmake_args; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Calling $QMAKE $at_qmake_args failed." >&5
$as_echo "$as_me: WARNING: Calling $QMAKE $at_qmake_args failed." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # QMake has a very annoying misfeature: sometimes it generates Makefiles
  # where all the references to the files from the Qt installation are
  # relative.  We can't use them as-is because if we take, say, a
  # -I../../usr/include/Qt from that Makefile, the flag is invalid as soon
  # as we use it in another (sub) directory.  So what this perl pass does is
  # that it rewrite all relative paths to absolute paths.  Another problem
  # when building on Cygwin is that QMake mixes paths with blackslashes and
  # forward slashes and paths must be handled with extra care because of the
  # stupid Windows drive letters.
  echo "$as_me:$LINENO: fixing the Makefiles:" Makefile* >&5
  cat >fixmk.pl <<\EOF
use strict;
use Cwd qw(cwd abs_path);
# This variable is useful on Cygwin for the following reason: Say that you are
# in `/' (that is, in fact you are in C:/cygwin, or something like that) if you
# `cd ..' then obviously you remain in `/' (that is in C:/cygwin).  QMake
# generates paths that are relative to C:/ (or another driver letter, whatever)
# so the trick to get the `..' resolved properly is to prepend the absolute
# path of the current working directory in a Windows-style.  C:/cygwin/../ will
# properly become C:/.
my $d = "";
my $r2a = 0;
my $b2f = 0;

my $cygwin = 0;
if ($^O eq "cygwin") {
  $cygwin = 1;
  $d = cwd();
  $d = `cygpath --mixed '$d'`;
  chomp($d);
  $d .= "/";
}

sub rel2abs($)
{
  my $p = $d . shift;
  # print "r2a p=$p";
  -e $p || return $p;
  if ($cygwin) {
    $p = `cygpath --mixed '$p'`;
    chomp($p);
  }
  else {
    # Do not use abs_path on Cygwin: it incorrectly resolves the paths that are
    # relative to C:/ rather than `/'.
    $p = abs_path($p);
  }
  # print " -> $p\n";
  ++$r2a;
  return $p;
}

# Only useful on Cygwin.
sub back2forward($)
{
  my $p = shift;
  # print "b2f p=$p";
  -e $p || return $p;
  $p = `cygpath --mixed '$p'`;
  chomp($p);
  # print " -> $p\n";
  ++$b2f;
  return $p;
}

foreach my $mk (@ARGV)
{
  next if $mk =~ /~$/;
  open(MK, $mk) or die("open $mk: $!");
  # print "mk=$mk\n";
  my $file = join("", <MK>);
  close(MK) or die("close $mk: $!");
  rename $mk, $mk . "~" or die("rename $mk: $!");
  $file =~ s{(?:\.\.[\\/])+(?:[^"'\s:]+)}{rel2abs($&)}gse;
  $file =~ s{(?:[a-zA-Z]:[\\/])?(?:[^"\s]+\\[^"\s:]+)+}
            {back2forward($&)}gse if $cygwin;
  open(MK, ">", $mk) or die("open >$mk: $!");
  print MK $file;
  close(MK) or die("close >$mk: $!");
  print "$mk: updated $r2a relative paths and $b2f backslash-style paths\n";
  $r2a = 0;
  $b2f = 0;
}
EOF

  perl >&5 -w fixmk.pl Makefile* ||
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: failed to fix the Makefiles generated by $QMAKE" >&5
$as_echo "$as_me: WARNING: failed to fix the Makefiles generated by $QMAKE" >&2;}
  rm -f fixmk.pl

  # Try to compile a simple Qt app.
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we can build a simple Qt app" >&5
$as_echo_n "checking whether we can build a simple Qt app... " >&6; }
if ${at_cv_qt_build+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_qt_build=ko
  : ${MAKE=make}

  if $MAKE >&5 2>&1; then
    at_cv_qt_build='ok, looks like Qt 4 or Qt 5'
  else
    echo "$as_me:$LINENO: Build failed, trying to #include <qobject.h> \
instead" >&5
    sed 's/<QObject>/<qobject.h>/' conftest.h > tmp.h && mv tmp.h conftest.h
    if $MAKE >&5 2>&1; then
      at_cv_qt_build='ok, looks like Qt 3'
    else
      # Sometimes (such as on Debian) build will fail because Qt hasn't been
      # installed in debug mode and qmake tries (by default) to build apps in
      # debug mode => Try again in release mode.
      echo "$as_me:$LINENO: Build failed, trying to enforce release mode" \
            >&5

       # Tweak the value of CONFIG in the .pro file for +release.

  qt_conf=''
  for at_mod in +release; do
    at_mod=`echo "$at_mod" | sed 's/^-//; tough
                                  s/^+//; beef
                                  :ough
                                  s/^/CONFIG -= /;n
                                  :eef
                                  s/^/CONFIG += /'`
    qt_conf="$qt_conf
$at_mod"
  done
  echo "$qt_conf" | sed 1d >>"$pro_file"


      sed 's/<qobject.h>/<QObject>/' conftest.h > tmp.h && mv tmp.h conftest.h
      if $MAKE >&5 2>&1; then
        at_cv_qt_build='ok, looks like Qt 4 or Qt 5, release mode forced'
      else
        echo "$as_me:$LINENO: Build failed, trying to #include <qobject.h> \
instead" >&5
        sed 's/<QObject>/<qobject.h>/' conftest.h >tmp.h && mv tmp.h conftest.h
        if $MAKE >&5 2>&1; then
          at_cv_qt_build='ok, looks like Qt 3, release mode forced'
        else
          at_cv_qt_build=ko
          echo "$as_me:$LINENO: failed program was:" >&5
          sed 's/^/| /' conftest.h >&5
          echo "$as_me:$LINENO: failed program was:" >&5
          sed 's/^/| /' conftest.cpp >&5
        fi # if make with Qt3-style #include and release mode forced.
      fi # if make with Qt4/5-style #include and release mode forced.
    fi # if make with Qt3-style #include.
  fi # if make with Qt4/5-style #include.

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_qt_build" >&5
$as_echo "$at_cv_qt_build" >&6; }
  if test x"$at_cv_qt_build" = xko; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot build a test Qt program" >&5
$as_echo "$as_me: WARNING: Cannot build a test Qt program" >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    cd ..
    break
  fi
  QT_VERSION_MAJOR=`echo "$at_cv_qt_build" | sed 's/[^0-9]*//g'`


  # This sed filter is applied after an expression of the form: /^FOO.*=/!d;
  # It starts by removing the beginning of the line, removing references to
  # SUBLIBS, removing unnecessary whitespaces at the beginning, and prefixes
  # all variable uses by QT_.
  qt_sed_filter='s///;
                 s/$(SUBLIBS)//g;
                 s/^ *//;
                 s/\$(\([A-Z_][A-Z_]*\))/$(QT_\1)/g'

  # Find the Makefile (qmake happens to generate a fake Makefile which invokes
  # a Makefile.Debug or Makefile.Release). We we have both, we'll pick the
  # Makefile.Release. The reason is that the main difference is that release
  # uses -Os and debug -g. We can override -Os by passing another -O but we
  # usually don't override -g.
  if test -f Makefile.Release; then
    at_mfile='Makefile.Release'
  else
    at_mfile='Makefile'
  fi
  if test -f $at_mfile; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find the Makefile generated by qmake." >&5
$as_echo "$as_me: WARNING: Cannot find the Makefile generated by qmake." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    cd ..
    break
  fi

  # Find the DEFINES of Qt (should have been named CPPFLAGS).
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the DEFINES to use with Qt" >&5
$as_echo_n "checking for the DEFINES to use with Qt... " >&6; }
if ${at_cv_env_QT_DEFINES+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_DEFINES=`sed "/^DEFINES[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_DEFINES" >&5
$as_echo "$at_cv_env_QT_DEFINES" >&6; }
  QT_DEFINES=$at_cv_env_QT_DEFINES


  # Find the CFLAGS of Qt (We can use Qt in C?!)
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the CFLAGS to use with Qt" >&5
$as_echo_n "checking for the CFLAGS to use with Qt... " >&6; }
if ${at_cv_env_QT_CFLAGS+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_CFLAGS=`sed "/^CFLAGS[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_CFLAGS" >&5
$as_echo "$at_cv_env_QT_CFLAGS" >&6; }
  QT_CFLAGS=$at_cv_env_QT_CFLAGS


  DR_MERGE_tmp1=$QT_CFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_CFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  # Find the CXXFLAGS of Qt.
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the CXXFLAGS to use with Qt" >&5
$as_echo_n "checking for the CXXFLAGS to use with Qt... " >&6; }
if ${at_cv_env_QT_CXXFLAGS+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_CXXFLAGS=`sed "/^CXXFLAGS[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_CXXFLAGS" >&5
$as_echo "$at_cv_env_QT_CXXFLAGS" >&6; }
  QT_CXXFLAGS=$at_cv_env_QT_CXXFLAGS


  DR_MERGE_tmp1=$QT_CXXFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_CXXFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  # Find the INCPATH of Qt.
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the INCPATH to use with Qt" >&5
$as_echo_n "checking for the INCPATH to use with Qt... " >&6; }
if ${at_cv_env_QT_INCPATH+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_INCPATH=`sed "/^INCPATH[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_INCPATH" >&5
$as_echo "$at_cv_env_QT_INCPATH" >&6; }
  QT_INCPATH=$at_cv_env_QT_INCPATH


  DR_MERGE_tmp1=$QT_INCPATH
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_INCPATH=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  QT_CPPFLAGS="$at_cv_env_QT_DEFINES $at_cv_env_QT_INCPATH"


  DR_MERGE_tmp1=$QT_CPPFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_CPPFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  # Find the LFLAGS of Qt (Should have been named LDFLAGS)
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the LDFLAGS to use with Qt" >&5
$as_echo_n "checking for the LDFLAGS to use with Qt... " >&6; }
if ${at_cv_env_QT_LDFLAGS+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_LDFLAGS=`sed "/^LFLAGS[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_LDFLAGS" >&5
$as_echo "$at_cv_env_QT_LDFLAGS" >&6; }
  QT_LFLAGS=$at_cv_env_QT_LDFLAGS

  QT_LDFLAGS=$at_cv_env_QT_LDFLAGS


  DR_MERGE_tmp1=$QT_LFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_LFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  DR_MERGE_tmp1=$QT_LDFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_LDFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  # Find the LIBS of Qt.
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the LIBS to use with Qt" >&5
$as_echo_n "checking for the LIBS to use with Qt... " >&6; }
if ${at_cv_env_QT_LIBS+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_LIBS=`sed "/^LIBS[^A-Z]*=/!d;$qt_sed_filter" $at_mfile`
   if test x$at_darwin = xyes; then
     # Fix QT_LIBS: as of today Libtool (GNU Libtool 1.5.23a) doesn't handle
     # -F properly. The "bug" has been fixed on 22 October 2006
     # by Peter O'Gorman but we provide backward compatibility here.
     at_cv_env_QT_LIBS=`echo "$at_cv_env_QT_LIBS" \
                             | sed 's/^-F/-Wl,-F/;s/ -F/ -Wl,-F/g'`
   fi

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_LIBS" >&5
$as_echo "$at_cv_env_QT_LIBS" >&6; }
  QT_LIBS=$at_cv_env_QT_LIBS


  DR_MERGE_tmp1=$QT_LIBS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_LIBS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  cd .. && rm -rf conftest.dir

  # Run the user code


  done  # end hack (useless for to be able to use break)

    ;;
  4.*)
    { $as_echo "$as_me:${as_lineno-$LINENO}: Qt4 found" >&5
$as_echo "$as_me: Qt4 found" >&6;}
    echo "$as_me: this is autotroll.m4 serial 10" >&5

  test x"$TROLL" != x && echo 'ViM rox emacs.'


# Check whether --with-qt was given.
if test "${with_qt+set}" = set; then :
  withval=$with_qt;
fi


  if test x"$with_qt" = x"no"; then
    break
  else

$as_echo "#define HAVE_QT 1" >>confdefs.h

  fi

  if test x"$with_qt" = x"yes"; then
    QT_PATH=
  else
    QT_PATH=$with_qt
  fi

  # this is a hack to get decent flow control with 'break'
  for _qt_ignored in once; do

  # Find Qt.

  if test -d /usr/local/Trolltech; then
    # Try to find the latest version.
    tmp_qt_paths=`echo /usr/local/Trolltech/*/bin | tr ' ' '\n' | sort -nr \
                                              | xargs | sed 's/  */:/g'`
  fi
  # Path to which recent MacPorts (~v1.7) install Qt4.
  test -d /opt/local/libexec/qt4-mac/bin \
    && tmp_qt_paths="$tmp_qt_paths:/opt/local/libexec/qt4-mac/bin"

  # Find qmake.

  for ax_tool in qmake qmake-qt5 qmake-qt4 qmake-qt3; do
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}$ax_tool", so it can be a program name with args.
set dummy ${ac_tool_prefix}$ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_QMAKE+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $QMAKE in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_QMAKE="$QMAKE" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_DIR:$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_QMAKE="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
QMAKE=$ac_cv_path_QMAKE
if test -n "$QMAKE"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $QMAKE" >&5
$as_echo "$QMAKE" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_path_QMAKE"; then
  ac_pt_QMAKE=$QMAKE
  # Extract the first word of "$ax_tool", so it can be a program name with args.
set dummy $ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_ac_pt_QMAKE+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $ac_pt_QMAKE in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_ac_pt_QMAKE="$ac_pt_QMAKE" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_DIR:$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_ac_pt_QMAKE="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
ac_pt_QMAKE=$ac_cv_path_ac_pt_QMAKE
if test -n "$ac_pt_QMAKE"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_QMAKE" >&5
$as_echo "$ac_pt_QMAKE" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_pt_QMAKE" = x; then
    QMAKE=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    QMAKE=$ac_pt_QMAKE
  fi
else
  QMAKE="$ac_cv_path_QMAKE"
fi

  test -n "$QMAKE" && break
done
test -n "$QMAKE" || QMAKE="missing"

  if test x"$QMAKE" = xmissing; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find qmake. Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find qmake. Try --with-qt=PATH." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # Find moc (Meta Object Compiler).

  for ax_tool in moc moc-qt5 moc-qt4 moc-qt3; do
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}$ax_tool", so it can be a program name with args.
set dummy ${ac_tool_prefix}$ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_MOC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $MOC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_MOC="$MOC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_MOC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
MOC=$ac_cv_path_MOC
if test -n "$MOC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $MOC" >&5
$as_echo "$MOC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_path_MOC"; then
  ac_pt_MOC=$MOC
  # Extract the first word of "$ax_tool", so it can be a program name with args.
set dummy $ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_ac_pt_MOC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $ac_pt_MOC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_ac_pt_MOC="$ac_pt_MOC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_ac_pt_MOC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
ac_pt_MOC=$ac_cv_path_ac_pt_MOC
if test -n "$ac_pt_MOC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_MOC" >&5
$as_echo "$ac_pt_MOC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_pt_MOC" = x; then
    MOC=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    MOC=$ac_pt_MOC
  fi
else
  MOC="$ac_cv_path_MOC"
fi

  test -n "$MOC" && break
done
test -n "$MOC" || MOC="missing"

  if test x"$MOC" = xmissing; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find moc (Meta Object Compiler). Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find moc (Meta Object Compiler). Try --with-qt=PATH." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # Find uic (User Interface Compiler).

  for ax_tool in uic uic-qt5 uic-qt4 uic-qt3 uic3; do
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}$ax_tool", so it can be a program name with args.
set dummy ${ac_tool_prefix}$ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_UIC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $UIC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_UIC="$UIC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_UIC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
UIC=$ac_cv_path_UIC
if test -n "$UIC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $UIC" >&5
$as_echo "$UIC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_path_UIC"; then
  ac_pt_UIC=$UIC
  # Extract the first word of "$ax_tool", so it can be a program name with args.
set dummy $ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_ac_pt_UIC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $ac_pt_UIC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_ac_pt_UIC="$ac_pt_UIC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_ac_pt_UIC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
ac_pt_UIC=$ac_cv_path_ac_pt_UIC
if test -n "$ac_pt_UIC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_UIC" >&5
$as_echo "$ac_pt_UIC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_pt_UIC" = x; then
    UIC=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    UIC=$ac_pt_UIC
  fi
else
  UIC="$ac_cv_path_UIC"
fi

  test -n "$UIC" && break
done
test -n "$UIC" || UIC="missing"

  if test x"$UIC" = xmissing; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find uic (User Interface Compiler). Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find uic (User Interface Compiler). Try --with-qt=PATH." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # Find rcc (Qt Resource Compiler).

  for ax_tool in rcc rcc-qt5; do
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}$ax_tool", so it can be a program name with args.
set dummy ${ac_tool_prefix}$ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_RCC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $RCC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_RCC="$RCC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_RCC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
RCC=$ac_cv_path_RCC
if test -n "$RCC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $RCC" >&5
$as_echo "$RCC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi


fi
if test -z "$ac_cv_path_RCC"; then
  ac_pt_RCC=$RCC
  # Extract the first word of "$ax_tool", so it can be a program name with args.
set dummy $ax_tool; ac_word=$2
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
$as_echo_n "checking for $ac_word... " >&6; }
if ${ac_cv_path_ac_pt_RCC+:} false; then :
  $as_echo_n "(cached) " >&6
else
  case $ac_pt_RCC in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_ac_pt_RCC="$ac_pt_RCC" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_dummy="$QT_PATH:$PATH:$tmp_qt_paths"
for as_dir in $as_dummy
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    for ac_exec_ext in '' $ac_executable_extensions; do
  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
    ac_cv_path_ac_pt_RCC="$as_dir/$ac_word$ac_exec_ext"
    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
  done
IFS=$as_save_IFS

  ;;
esac
fi
ac_pt_RCC=$ac_cv_path_ac_pt_RCC
if test -n "$ac_pt_RCC"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_pt_RCC" >&5
$as_echo "$ac_pt_RCC" >&6; }
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
fi

  if test "x$ac_pt_RCC" = x; then
    RCC=""
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
ac_tool_warned=yes ;;
esac
    RCC=$ac_pt_RCC
  fi
else
  RCC="$ac_cv_path_RCC"
fi

  test -n "$RCC" && break
done
test -n "$RCC" || RCC="false"

  if test x"$UIC" = xfalse; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find rcc (Qt Resource Compiler). Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find rcc (Qt Resource Compiler). Try --with-qt=PATH." >&2;}
  fi

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether host operating system is Darwin" >&5
$as_echo_n "checking whether host operating system is Darwin... " >&6; }
  at_darwin=no
  at_qmake_args=
  case $host_os in
    darwin*)
      at_darwin=yes
      ;;
  esac
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_darwin" >&5
$as_echo "$at_darwin" >&6; }

  # If we don't know the path to Qt, guess it from the path to qmake.
  if test x"$QT_PATH" = x; then
    QT_PATH=`dirname "$QMAKE"`
  fi
  if test x"$QT_PATH" = x; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find your Qt installation. Try --with-qt=PATH." >&5
$as_echo "$as_me: WARNING: Cannot find your Qt installation. Try --with-qt=PATH." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi


  # Get ready to build a test-app with Qt.
  if mkdir conftest.dir && cd conftest.dir; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot mkdir conftest.dir or cd to that directory." >&5
$as_echo "$as_me: WARNING: Cannot mkdir conftest.dir or cd to that directory." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  cat >conftest.h <<_ASEOF
#include <QObject>

class Foo: public QObject
{
  Q_OBJECT;
public:
  Foo();
  ~Foo() {}
public Q_SLOTS:
  void setValue(int value);
Q_SIGNALS:
  void valueChanged(int newValue);
private:
  int value_;
};
_ASEOF

  cat >conftest.cpp <<_ASEOF
#include "conftest.h"
Foo::Foo()
  : value_ (42)
{
  connect(this, SIGNAL(valueChanged(int)), this, SLOT(setValue(int)));
}

void Foo::setValue(int value)
{
  value_ = value;
}

int main()
{
  Foo f;
}
_ASEOF
  if $QMAKE -project; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Calling $QMAKE -project failed." >&5
$as_echo "$as_me: WARNING: Calling $QMAKE -project failed." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # Find the .pro file generated by qmake.
  pro_file='conftest.dir.pro'
  test -f $pro_file || pro_file=`echo *.pro`
  if test -f "$pro_file"; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Can't find the .pro file generated by Qmake." >&5
$as_echo "$as_me: WARNING: Can't find the .pro file generated by Qmake." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

 # Tweak the value of QT in the .pro file for +widgets.

  qt_conf=''
  for at_mod in +widgets; do
    at_mod=`echo "$at_mod" | sed 's/^-//; tough
                                  s/^+//; beef
                                  :ough
                                  s/^/QT -= /;n
                                  :eef
                                  s/^/QT += /'`
    qt_conf="$qt_conf
$at_mod"
  done
  echo "$qt_conf" | sed 1d >>"$pro_file"


 # Tweak the value of QT in the .pro file for $xtralibs +printsupport +svg.

  qt_conf=''
  for at_mod in $xtralibs +printsupport +svg; do
    at_mod=`echo "$at_mod" | sed 's/^-//; tough
                                  s/^+//; beef
                                  :ough
                                  s/^/QT -= /;n
                                  :eef
                                  s/^/QT += /'`
    qt_conf="$qt_conf
$at_mod"
  done
  echo "$qt_conf" | sed 1d >>"$pro_file"


 # Tweak the value of CONFIG in the .pro file for +exceptions.

  qt_conf=''
  for at_mod in +exceptions; do
    at_mod=`echo "$at_mod" | sed 's/^-//; tough
                                  s/^+//; beef
                                  :ough
                                  s/^/CONFIG -= /;n
                                  :eef
                                  s/^/CONFIG += /'`
    qt_conf="$qt_conf
$at_mod"
  done
  echo "$qt_conf" | sed 1d >>"$pro_file"


 # Add the extra-settings the user wants to set in the .pro
  echo "LIBS += $LDFLAGS" >>"$pro_file"


  echo "$as_me:$LINENO: Invoking $QMAKE on $pro_file" >&5
  sed 's/^/| /' "$pro_file" >&5

  if $QMAKE $at_qmake_args; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Calling $QMAKE $at_qmake_args failed." >&5
$as_echo "$as_me: WARNING: Calling $QMAKE $at_qmake_args failed." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    break
  fi

  # QMake has a very annoying misfeature: sometimes it generates Makefiles
  # where all the references to the files from the Qt installation are
  # relative.  We can't use them as-is because if we take, say, a
  # -I../../usr/include/Qt from that Makefile, the flag is invalid as soon
  # as we use it in another (sub) directory.  So what this perl pass does is
  # that it rewrite all relative paths to absolute paths.  Another problem
  # when building on Cygwin is that QMake mixes paths with blackslashes and
  # forward slashes and paths must be handled with extra care because of the
  # stupid Windows drive letters.
  echo "$as_me:$LINENO: fixing the Makefiles:" Makefile* >&5
  cat >fixmk.pl <<\EOF
use strict;
use Cwd qw(cwd abs_path);
# This variable is useful on Cygwin for the following reason: Say that you are
# in `/' (that is, in fact you are in C:/cygwin, or something like that) if you
# `cd ..' then obviously you remain in `/' (that is in C:/cygwin).  QMake
# generates paths that are relative to C:/ (or another driver letter, whatever)
# so the trick to get the `..' resolved properly is to prepend the absolute
# path of the current working directory in a Windows-style.  C:/cygwin/../ will
# properly become C:/.
my $d = "";
my $r2a = 0;
my $b2f = 0;

my $cygwin = 0;
if ($^O eq "cygwin") {
  $cygwin = 1;
  $d = cwd();
  $d = `cygpath --mixed '$d'`;
  chomp($d);
  $d .= "/";
}

sub rel2abs($)
{
  my $p = $d . shift;
  # print "r2a p=$p";
  -e $p || return $p;
  if ($cygwin) {
    $p = `cygpath --mixed '$p'`;
    chomp($p);
  }
  else {
    # Do not use abs_path on Cygwin: it incorrectly resolves the paths that are
    # relative to C:/ rather than `/'.
    $p = abs_path($p);
  }
  # print " -> $p\n";
  ++$r2a;
  return $p;
}

# Only useful on Cygwin.
sub back2forward($)
{
  my $p = shift;
  # print "b2f p=$p";
  -e $p || return $p;
  $p = `cygpath --mixed '$p'`;
  chomp($p);
  # print " -> $p\n";
  ++$b2f;
  return $p;
}

foreach my $mk (@ARGV)
{
  next if $mk =~ /~$/;
  open(MK, $mk) or die("open $mk: $!");
  # print "mk=$mk\n";
  my $file = join("", <MK>);
  close(MK) or die("close $mk: $!");
  rename $mk, $mk . "~" or die("rename $mk: $!");
  $file =~ s{(?:\.\.[\\/])+(?:[^"'\s:]+)}{rel2abs($&)}gse;
  $file =~ s{(?:[a-zA-Z]:[\\/])?(?:[^"\s]+\\[^"\s:]+)+}
            {back2forward($&)}gse if $cygwin;
  open(MK, ">", $mk) or die("open >$mk: $!");
  print MK $file;
  close(MK) or die("close >$mk: $!");
  print "$mk: updated $r2a relative paths and $b2f backslash-style paths\n";
  $r2a = 0;
  $b2f = 0;
}
EOF

  perl >&5 -w fixmk.pl Makefile* ||
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: failed to fix the Makefiles generated by $QMAKE" >&5
$as_echo "$as_me: WARNING: failed to fix the Makefiles generated by $QMAKE" >&2;}
  rm -f fixmk.pl

  # Try to compile a simple Qt app.
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we can build a simple Qt app" >&5
$as_echo_n "checking whether we can build a simple Qt app... " >&6; }
if ${at_cv_qt_build+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_qt_build=ko
  : ${MAKE=make}

  if $MAKE >&5 2>&1; then
    at_cv_qt_build='ok, looks like Qt 4 or Qt 5'
  else
    echo "$as_me:$LINENO: Build failed, trying to #include <qobject.h> \
instead" >&5
    sed 's/<QObject>/<qobject.h>/' conftest.h > tmp.h && mv tmp.h conftest.h
    if $MAKE >&5 2>&1; then
      at_cv_qt_build='ok, looks like Qt 3'
    else
      # Sometimes (such as on Debian) build will fail because Qt hasn't been
      # installed in debug mode and qmake tries (by default) to build apps in
      # debug mode => Try again in release mode.
      echo "$as_me:$LINENO: Build failed, trying to enforce release mode" \
            >&5

       # Tweak the value of CONFIG in the .pro file for +release.

  qt_conf=''
  for at_mod in +release; do
    at_mod=`echo "$at_mod" | sed 's/^-//; tough
                                  s/^+//; beef
                                  :ough
                                  s/^/CONFIG -= /;n
                                  :eef
                                  s/^/CONFIG += /'`
    qt_conf="$qt_conf
$at_mod"
  done
  echo "$qt_conf" | sed 1d >>"$pro_file"


      sed 's/<qobject.h>/<QObject>/' conftest.h > tmp.h && mv tmp.h conftest.h
      if $MAKE >&5 2>&1; then
        at_cv_qt_build='ok, looks like Qt 4 or Qt 5, release mode forced'
      else
        echo "$as_me:$LINENO: Build failed, trying to #include <qobject.h> \
instead" >&5
        sed 's/<QObject>/<qobject.h>/' conftest.h >tmp.h && mv tmp.h conftest.h
        if $MAKE >&5 2>&1; then
          at_cv_qt_build='ok, looks like Qt 3, release mode forced'
        else
          at_cv_qt_build=ko
          echo "$as_me:$LINENO: failed program was:" >&5
          sed 's/^/| /' conftest.h >&5
          echo "$as_me:$LINENO: failed program was:" >&5
          sed 's/^/| /' conftest.cpp >&5
        fi # if make with Qt3-style #include and release mode forced.
      fi # if make with Qt4/5-style #include and release mode forced.
    fi # if make with Qt3-style #include.
  fi # if make with Qt4/5-style #include.

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_qt_build" >&5
$as_echo "$at_cv_qt_build" >&6; }
  if test x"$at_cv_qt_build" = xko; then
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot build a test Qt program" >&5
$as_echo "$as_me: WARNING: Cannot build a test Qt program" >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    cd ..
    break
  fi
  QT_VERSION_MAJOR=`echo "$at_cv_qt_build" | sed 's/[^0-9]*//g'`


  # This sed filter is applied after an expression of the form: /^FOO.*=/!d;
  # It starts by removing the beginning of the line, removing references to
  # SUBLIBS, removing unnecessary whitespaces at the beginning, and prefixes
  # all variable uses by QT_.
  qt_sed_filter='s///;
                 s/$(SUBLIBS)//g;
                 s/^ *//;
                 s/\$(\([A-Z_][A-Z_]*\))/$(QT_\1)/g'

  # Find the Makefile (qmake happens to generate a fake Makefile which invokes
  # a Makefile.Debug or Makefile.Release). We we have both, we'll pick the
  # Makefile.Release. The reason is that the main difference is that release
  # uses -Os and debug -g. We can override -Os by passing another -O but we
  # usually don't override -g.
  if test -f Makefile.Release; then
    at_mfile='Makefile.Release'
  else
    at_mfile='Makefile'
  fi
  if test -f $at_mfile; then :; else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Cannot find the Makefile generated by qmake." >&5
$as_echo "$as_me: WARNING: Cannot find the Makefile generated by qmake." >&2;}; as_fn_error $? "Cannot find a working Qt library" "$LINENO" 5
    cd ..
    break
  fi

  # Find the DEFINES of Qt (should have been named CPPFLAGS).
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the DEFINES to use with Qt" >&5
$as_echo_n "checking for the DEFINES to use with Qt... " >&6; }
if ${at_cv_env_QT_DEFINES+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_DEFINES=`sed "/^DEFINES[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_DEFINES" >&5
$as_echo "$at_cv_env_QT_DEFINES" >&6; }
  QT_DEFINES=$at_cv_env_QT_DEFINES


  # Find the CFLAGS of Qt (We can use Qt in C?!)
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the CFLAGS to use with Qt" >&5
$as_echo_n "checking for the CFLAGS to use with Qt... " >&6; }
if ${at_cv_env_QT_CFLAGS+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_CFLAGS=`sed "/^CFLAGS[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_CFLAGS" >&5
$as_echo "$at_cv_env_QT_CFLAGS" >&6; }
  QT_CFLAGS=$at_cv_env_QT_CFLAGS


  DR_MERGE_tmp1=$QT_CFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_CFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  # Find the CXXFLAGS of Qt.
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the CXXFLAGS to use with Qt" >&5
$as_echo_n "checking for the CXXFLAGS to use with Qt... " >&6; }
if ${at_cv_env_QT_CXXFLAGS+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_CXXFLAGS=`sed "/^CXXFLAGS[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_CXXFLAGS" >&5
$as_echo "$at_cv_env_QT_CXXFLAGS" >&6; }
  QT_CXXFLAGS=$at_cv_env_QT_CXXFLAGS


  DR_MERGE_tmp1=$QT_CXXFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_CXXFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  # Find the INCPATH of Qt.
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the INCPATH to use with Qt" >&5
$as_echo_n "checking for the INCPATH to use with Qt... " >&6; }
if ${at_cv_env_QT_INCPATH+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_INCPATH=`sed "/^INCPATH[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_INCPATH" >&5
$as_echo "$at_cv_env_QT_INCPATH" >&6; }
  QT_INCPATH=$at_cv_env_QT_INCPATH


  DR_MERGE_tmp1=$QT_INCPATH
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_INCPATH=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  QT_CPPFLAGS="$at_cv_env_QT_DEFINES $at_cv_env_QT_INCPATH"


  DR_MERGE_tmp1=$QT_CPPFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_CPPFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  # Find the LFLAGS of Qt (Should have been named LDFLAGS)
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the LDFLAGS to use with Qt" >&5
$as_echo_n "checking for the LDFLAGS to use with Qt... " >&6; }
if ${at_cv_env_QT_LDFLAGS+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_LDFLAGS=`sed "/^LFLAGS[^A-Z=]*=/!d;$qt_sed_filter" $at_mfile`
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_LDFLAGS" >&5
$as_echo "$at_cv_env_QT_LDFLAGS" >&6; }
  QT_LFLAGS=$at_cv_env_QT_LDFLAGS

  QT_LDFLAGS=$at_cv_env_QT_LDFLAGS


  DR_MERGE_tmp1=$QT_LFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_LFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  DR_MERGE_tmp1=$QT_LDFLAGS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_LDFLAGS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  # Find the LIBS of Qt.
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the LIBS to use with Qt" >&5
$as_echo_n "checking for the LIBS to use with Qt... " >&6; }
if ${at_cv_env_QT_LIBS+:} false; then :
  $as_echo_n "(cached) " >&6
else
  at_cv_env_QT_LIBS=`sed "/^LIBS[^A-Z]*=/!d;$qt_sed_filter" $at_mfile`
   if test x$at_darwin = xyes; then
     # Fix QT_LIBS: as of today Libtool (GNU Libtool 1.5.23a) doesn't handle
     # -F properly. The "bug" has been fixed on 22 October 2006
     # by Peter O'Gorman but we provide backward compatibility here.
     at_cv_env_QT_LIBS=`echo "$at_cv_env_QT_LIBS" \
                             | sed 's/^-F/-Wl,-F/;s/ -F/ -Wl,-F/g'`
   fi

fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $at_cv_env_QT_LIBS" >&5
$as_echo "$at_cv_env_QT_LIBS" >&6; }
  QT_LIBS=$at_cv_env_QT_LIBS


  DR_MERGE_tmp1=$QT_LIBS
  DR_MERGE_tmp1=${DR_MERGE_tmp1//(/}
  DR_MERGE_tmp1=${DR_MERGE_tmp1//)/}
  eval QT_LIBS=\"$DR_MERGE_tmp1\"
  unset ${!DR_MERGE_*}


  cd .. && rm -rf conftest.dir

  # Run the user code


  done  # end hack (useless for to be able to use break)

    ;;
  *) as_fn_error $? "Qt not found or Qt version not supported " "$LINENO" 5;;
  esac
  # clean and dispatch the collected flags

    TMP_CFLAGS="${QT_CFLAGS}";TMP_CXXFLAGS="${QT_CXXFLAGS}";TMP_CPPFLAGS="${QT_CPPFLAGS}";TMP_LDFLAGS="${QT_LDFLAGS}";TMP_LIBS="${QT_LIBS}";


  unset QT_CFLAGS;unset QT_CXXFLAGS;unset QT_CPPFLAGS;unset QT_LDFLAGS;unset QT_LIBS;

  LC_SCATTER_FLAGS_list="$TMP_CPPFLAGS $TMP_CXXFLAGS $TMP_LDFLAGS $TMP_LIBS $QT_DEFINES"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $QT_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$QT_LDFLAGS

  unset STRIP_ARG_memo
  if test "$QT_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then QT_LDFLAGS=
  else  while test "$QT_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_LDFLAGS"
        QT_LDFLAGS="${QT_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        QT_LDFLAGS="${QT_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        QT_LDFLAGS="${QT_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_LDFLAGS=$(echo $QT_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$QT_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then QT_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $QT_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$QT_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$QT_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then QT_CPPFLAGS=
  else  while test "$QT_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_CPPFLAGS"
        QT_CPPFLAGS="${QT_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        QT_CPPFLAGS="${QT_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        QT_CPPFLAGS="${QT_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_CPPFLAGS=$(echo $QT_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       QT_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$QT_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else QT_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then QT_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $QT_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$QT_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$QT_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then QT_CPPFLAGS=
  else  while test "$QT_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_CPPFLAGS"
        QT_CPPFLAGS="${QT_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        QT_CPPFLAGS="${QT_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        QT_CPPFLAGS="${QT_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_CPPFLAGS=$(echo $QT_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       QT_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$QT_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else QT_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $QT_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$QT_LDFLAGS

  unset STRIP_ARG_memo
  if test "$QT_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then QT_LDFLAGS=
  else  while test "$QT_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_LDFLAGS"
        QT_LDFLAGS="${QT_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        QT_LDFLAGS="${QT_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        QT_LDFLAGS="${QT_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_LDFLAGS=$(echo $QT_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$QT_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $QT_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$QT_LDFLAGS

  unset STRIP_ARG_memo
  if test "$QT_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then QT_LDFLAGS=
  else  while test "$QT_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_LDFLAGS"
        QT_LDFLAGS="${QT_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        QT_LDFLAGS="${QT_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        QT_LDFLAGS="${QT_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_LDFLAGS=$(echo $QT_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$QT_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $QT_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$QT_LDFLAGS

  unset STRIP_ARG_memo
  if test "$QT_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then QT_LDFLAGS=
  else  while test "$QT_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_LDFLAGS"
        QT_LDFLAGS="${QT_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        QT_LDFLAGS="${QT_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        QT_LDFLAGS="${QT_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_LDFLAGS=$(echo $QT_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$QT_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else QT_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib QT" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib QT" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then QT_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $QT_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$QT_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$QT_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then QT_CXXFLAGS=
  else  while test "$QT_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_CXXFLAGS"
        QT_CXXFLAGS="${QT_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        QT_CXXFLAGS="${QT_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        QT_CXXFLAGS="${QT_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_CXXFLAGS=$(echo $QT_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       QT_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$QT_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else QT_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then QT_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $QT_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$QT_CFLAGS

  unset STRIP_ARG_memo
  if test "$QT_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then QT_CFLAGS=
  else  while test "$QT_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_CFLAGS"
        QT_CFLAGS="${QT_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        QT_CFLAGS="${QT_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        QT_CFLAGS="${QT_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_CFLAGS=$(echo $QT_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       QT_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$QT_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else QT_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $QT_LIBS)" # remove unnecessary spaces and add a heading space
  QT_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$QT_LIBS" = "$LC_GETPOP_FLAG_1"
  then QT_LIBS=${QT_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$QT_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then QT_LIBS=$(echo $QT_LIBS)
    else QT_LIBS=$(echo $QT_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $QT_LIBS)" # remove unnecessary spaces and add a heading space
  QT_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$QT_LIBS" = "$LC_GETPOP_FLAG_1"
  then QT_LIBS=${QT_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$QT_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then QT_LIBS=$(echo $QT_LIBS)
    else QT_LIBS=$(echo $QT_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  QT_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

  QT_FRAMEWORKS_PATH=`$QMAKE -query QT_INSTALL_LIBS`
  QT_PLUGINS_PATH=`$QMAKE -query QT_INSTALL_PLUGINS`
  QT_INSTALL_LIBS=`$QMAKE -query QT_INSTALL_LIBS`

  if [[ "-Wl,-rpath,$QT_INSTALL_LIBS" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" -Wl,-rpath,$QT_INSTALL_LIBS"
  elif [[ "-Wl,-rpath,$QT_INSTALL_LIBS" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-Wl,-rpath,$QT_INSTALL_LIBS"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" -Wl,-rpath,$QT_INSTALL_LIBS"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])-Wl,-rpath,$QT_INSTALL_LIBS($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -Wl" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -Wl" >&2;}
    else LDFLAGS+=" -Wl,-rpath,$QT_INSTALL_LIBS"
    fi
  fi


  QT_VERSION=`$QMAKE -query QT_VERSION`
  QT_MAJOR=${QT_VERSION%%.*}
  test $QT_MAJOR -eq 5 &&
  if [[ "-std=c++11" =~ $(echo '^-Wl,') ]]
  then QT_CXXFLAGS+=" -std=c++11"
  elif [[ "-std=c++11" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "-std=c++11"
  do  while [[ $QT_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$QT_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$QT_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then QT_CXXFLAGS=
  else  while test "$QT_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_CXXFLAGS"
        QT_CXXFLAGS="${QT_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        QT_CXXFLAGS="${QT_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        QT_CXXFLAGS="${QT_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_CXXFLAGS=$(echo $QT_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       QT_CXXFLAGS+=" -std=c++11"
  else
    if [[ "$QT_CXXFLAGS" =~ $(echo "(^|[[:space:]])-std=c++11($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag -std=c++11" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag -std=c++11" >&2;}
    else QT_CXXFLAGS+=" -std=c++11"
    fi
  fi



    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]]+)-mmacosx-version-min(=?|[[:space:]]*)(.*)$") ]]
    then CXXMACOSX_VERSION_MIN=${BASH_REMATCH[3]%% -*}
         CXXMACOSX_VERSION_MIN=${CXXMACOSX_VERSION_MIN%% }  # strip tailing blanks
    else unset CXXMACOSX_VERSION_MIN
    fi

  if test -n $CXXMACOSX_VERSION_MIN; then :


    if [[ "$QT_CXXFLAGS" =~ $(echo "(^|[[:space:]]+)-mmacosx-version-min(=?|[[:space:]]*)(.*)$") ]]
    then QTMACOSX_VERSION_MIN=${BASH_REMATCH[3]%% -*}
         QTMACOSX_VERSION_MIN=${QTMACOSX_VERSION_MIN%% }  # strip tailing blanks
    else unset QTMACOSX_VERSION_MIN
    fi

    if test -n $QTMACOSX_VERSION_MIN; then :

      if cmp_dot_number $CXXMACOSX_VERSION_MIN $QTMACOSX_VERSION_MIN; then :



  unset STRIP_ARG_memo
  if test "$QT_CXXFLAGS" = "-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  then QT_CXXFLAGS=
  else  while test "$QT_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_CXXFLAGS"
        QT_CXXFLAGS="${QT_CXXFLAGS/#-mmacosx-version-min=$QTMACOSX_VERSION_MIN[[:space:]]/}" # at the beginning
        QT_CXXFLAGS="${QT_CXXFLAGS/%[[:space:]]-mmacosx-version-min=$QTMACOSX_VERSION_MIN/}"    # at the end
        QT_CXXFLAGS="${QT_CXXFLAGS//[[:space:]]-mmacosx-version-min=$QTMACOSX_VERSION_MIN[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_CXXFLAGS=$(echo $QT_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}



  unset STRIP_ARG_memo
  if test "$QT_CPPFLAGS" = "-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  then QT_CPPFLAGS=
  else  while test "$QT_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_CPPFLAGS"
        QT_CPPFLAGS="${QT_CPPFLAGS/#-mmacosx-version-min=$QTMACOSX_VERSION_MIN[[:space:]]/}" # at the beginning
        QT_CPPFLAGS="${QT_CPPFLAGS/%[[:space:]]-mmacosx-version-min=$QTMACOSX_VERSION_MIN/}"    # at the end
        QT_CPPFLAGS="${QT_CPPFLAGS//[[:space:]]-mmacosx-version-min=$QTMACOSX_VERSION_MIN[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_CPPFLAGS=$(echo $QT_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}



  unset STRIP_ARG_memo
  if test "$QT_LDFLAGS" = "-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  then QT_LDFLAGS=
  else  while test "$QT_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$QT_LDFLAGS"
        QT_LDFLAGS="${QT_LDFLAGS/#-mmacosx-version-min=$QTMACOSX_VERSION_MIN[[:space:]]/}" # at the beginning
        QT_LDFLAGS="${QT_LDFLAGS/%[[:space:]]-mmacosx-version-min=$QTMACOSX_VERSION_MIN/}"    # at the end
        QT_LDFLAGS="${QT_LDFLAGS//[[:space:]]-mmacosx-version-min=$QTMACOSX_VERSION_MIN[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  QT_LDFLAGS=$(echo $QT_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}



else



  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "-mmacosx-version-min=$CXXMACOSX_VERSION_MIN"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#-mmacosx-version-min=$CXXMACOSX_VERSION_MIN[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]-mmacosx-version-min=$CXXMACOSX_VERSION_MIN/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]-mmacosx-version-min=$CXXMACOSX_VERSION_MIN[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}


  LC_MERGE_FLAGS_list="-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  if [[ "CFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  if [[ "CXXFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CXXFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}



  unset STRIP_ARG_memo
  if test "$CFLAGS" = "-mmacosx-version-min=$CXXMACOSX_VERSION_MIN"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#-mmacosx-version-min=$CXXMACOSX_VERSION_MIN[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]-mmacosx-version-min=$CXXMACOSX_VERSION_MIN/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]-mmacosx-version-min=$CXXMACOSX_VERSION_MIN[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}


  LC_MERGE_FLAGS_list="-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  if [[ "CFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CFLAGS)" # remove unnecessary spaces and add a heading space
  CFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CFLAGS" = "$LC_GETPOP_FLAG_1"
  then CFLAGS=${CFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CFLAGS=$(echo $CFLAGS)
    else CFLAGS=$(echo $CFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CFLAGS

  unset STRIP_ARG_memo
  if test "$CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CFLAGS=
  else  while test "$CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CFLAGS"
        CFLAGS="${CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CFLAGS="${CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CFLAGS="${CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CFLAGS=$(echo $CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


  LC_MERGE_FLAGS_list="-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  if [[ "CXXFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-mmacosx-version-min=$QTMACOSX_VERSION_MIN"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $CXXFLAGS)" # remove unnecessary spaces and add a heading space
  CXXFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$CXXFLAGS" = "$LC_GETPOP_FLAG_1"
  then CXXFLAGS=${CXXFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$CXXFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then CXXFLAGS=$(echo $CXXFLAGS)
    else CXXFLAGS=$(echo $CXXFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  CXXFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$CXXFLAGS

  unset STRIP_ARG_memo
  if test "$CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then CXXFLAGS=
  else  while test "$CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$CXXFLAGS"
        CXXFLAGS="${CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        CXXFLAGS="${CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        CXXFLAGS="${CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  CXXFLAGS=$(echo $CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else CXXFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


        { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: mmacosx-version-min adjusted to $QTMACOSX_VERSION_MIN" >&5
$as_echo "$as_me: WARNING: mmacosx-version-min adjusted to $QTMACOSX_VERSION_MIN" >&2;}

fi

fi

fi




  LC_MERGE_FLAGS_list="$QT_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$QT_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

  LC_MERGE_FLAGS_list="$QT_LIBS"
  if [[ "LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$QT_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LIBS

  unset STRIP_ARG_memo
  if test "$LIBS" = "$STRIP_ALL_ARGS_arg"
  then LIBS=
  else  while test "$LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LIBS"
        LIBS="${LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LIBS="${LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LIBS="${LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LIBS=$(echo $LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}





  CFLAGS__ax_save_flags=$CFLAGS



  CPPFLAGS__ax_save_flags=$CPPFLAGS



  CXXFLAGS__ax_save_flags=$CXXFLAGS



  LDFLAGS__ax_save_flags=$LDFLAGS



  LIBS__ax_save_flags=$LIBS



  OBJCFLAGS__ax_save_flags=$OBJCFLAGS



  OBJCXXFLAGS__ax_save_flags=$OBJCXXFLAGS






    CFLAGS="$BASE_CFLAGS $QT_CFLAGS"

    CXXFLAGS="$BASE_CXXFLAGS $QT_CXXFLAGS"

    CPPFLAGS="$BASE_CPPFLAGS $QT_CPPFLAGS"

    LIBS="$BASE_LIBS $QT_LIBS"


  LC_MERGE_FLAGS_list="$QT_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$QT_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}



  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <QtCore>
#include <QtPlugin>
#define qt_static_plugin_qjpeg qt_static_plugin_QJpegPlugin

Q_IMPORT_PLUGIN(qjpeg)

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

$as_echo "#define qt_static_plugin_qjpeg qt_static_plugin_QJpegPlugin" >>confdefs.h

else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: No static qjpeg plugin" >&5
$as_echo "$as_me: WARNING: No static qjpeg plugin" >&2;}
fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <QtCore>
#include <QtPlugin>
#define qt_static_plugin_qgif qt_static_plugin_QGifPlugin

Q_IMPORT_PLUGIN(qgif)

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

$as_echo "#define qt_static_plugin_qgif qt_static_plugin_QGifPlugin" >>confdefs.h

else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: No static qgif plugin" >&5
$as_echo "$as_me: WARNING: No static qgif plugin" >&2;}
fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <QtCore>
#include <QtPlugin>
#define qt_static_plugin_qico qt_static_plugin_QICOPlugin

Q_IMPORT_PLUGIN(qico)

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

$as_echo "#define qt_static_plugin_qico qt_static_plugin_QICOPlugin" >>confdefs.h

else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: No static qico plugin" >&5
$as_echo "$as_me: WARNING: No static qico plugin" >&2;}
fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <QtCore>
#include <QtPlugin>
#define qt_static_plugin_qsvg qt_static_plugin_QSvgPlugin

Q_IMPORT_PLUGIN(qsvg)

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

$as_echo "#define qt_static_plugin_qsvg qt_static_plugin_QSvgPlugin" >>confdefs.h

else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: No static qsvg plugin" >&5
$as_echo "$as_me: WARNING: No static qsvg plugin" >&2;}
fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi

  if test "$cross_compiling" = yes; then :
  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
as_fn_error $? "cannot run test program while cross compiling
See \`config.log' for more details" "$LINENO" 5; }
else
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#include <QtCore>
#include <QtPlugin>

Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_run "$LINENO"; then :

$as_echo "#define CocoaPlugin 1" >>confdefs.h

else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: No static Cocoa plugin" >&5
$as_echo "$as_me: WARNING: No static Cocoa plugin" >&2;}
fi
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
  conftest.$ac_objext conftest.beam conftest.$ac_ext
fi


  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags




         if test x"$at_cv_qt_build" = xko; then
            as_fn_error $? "cannot find Qt!" "$LINENO" 5
         else
            { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling Qt port" >&5
$as_echo "enabling Qt port" >&6; }
            CONFIG_GUI="QT"
            if test x"$CONFIG_OS" = xMACOS; then
               # on Mac we rely on some ObjC code contained in
               # src/Plugins/MacOS
               CONFIG_MACOS="MacOS"
            fi
            # Qt Plugins list
            if test $QT_MAJOR -eq 5
            then QT_PLUGINS_LIST="imageformats,platforms"
            else QT_PLUGINS_LIST="accessible,imageformats"
            fi
         fi
         ;;
      no)
         CONFIG_QTPIPES="no"
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling X11 port" >&5
$as_echo "enabling X11 port" >&6; }



  CFLAGS__ax_save_flags=$CFLAGS



  CPPFLAGS__ax_save_flags=$CPPFLAGS



  CXXFLAGS__ax_save_flags=$CXXFLAGS



  LDFLAGS__ax_save_flags=$LDFLAGS



  LIBS__ax_save_flags=$LIBS



  OBJCFLAGS__ax_save_flags=$OBJCFLAGS



  OBJCXXFLAGS__ax_save_flags=$OBJCXXFLAGS





  unset CFLAGS;unset CXXFLAGS;unset CPPFLAGS;unset LDFLAGS;unset LIBS;
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for X" >&5
$as_echo_n "checking for X... " >&6; }


# Check whether --with-x was given.
if test "${with_x+set}" = set; then :
  withval=$with_x;
fi

# $have_x is `yes', `no', `disabled', or empty when we do not yet know.
if test "x$with_x" = xno; then
  # The user explicitly disabled X.
  have_x=disabled
else
  case $x_includes,$x_libraries in #(
    *\'*) as_fn_error $? "cannot use X directory names containing '" "$LINENO" 5;; #(
    *,NONE | NONE,*) if ${ac_cv_have_x+:} false; then :
  $as_echo_n "(cached) " >&6
else
  # One or both of the vars are not set, and there is no cached value.
ac_x_includes=no ac_x_libraries=no
rm -f -r conftest.dir
if mkdir conftest.dir; then
  cd conftest.dir
  cat >Imakefile <<'_ACEOF'
incroot:
	@echo incroot='${INCROOT}'
usrlibdir:
	@echo usrlibdir='${USRLIBDIR}'
libdir:
	@echo libdir='${LIBDIR}'
_ACEOF
  if (export CC; ${XMKMF-xmkmf}) >/dev/null 2>/dev/null && test -f Makefile; then
    # GNU make sometimes prints "make[1]: Entering ...", which would confuse us.
    for ac_var in incroot usrlibdir libdir; do
      eval "ac_im_$ac_var=\`\${MAKE-make} $ac_var 2>/dev/null | sed -n 's/^$ac_var=//p'\`"
    done
    # Open Windows xmkmf reportedly sets LIBDIR instead of USRLIBDIR.
    for ac_extension in a so sl dylib la dll; do
      if test ! -f "$ac_im_usrlibdir/libX11.$ac_extension" &&
	 test -f "$ac_im_libdir/libX11.$ac_extension"; then
	ac_im_usrlibdir=$ac_im_libdir; break
      fi
    done
    # Screen out bogus values from the imake configuration.  They are
    # bogus both because they are the default anyway, and because
    # using them would break gcc on systems where it needs fixed includes.
    case $ac_im_incroot in
	/usr/include) ac_x_includes= ;;
	*) test -f "$ac_im_incroot/X11/Xos.h" && ac_x_includes=$ac_im_incroot;;
    esac
    case $ac_im_usrlibdir in
	/usr/lib | /usr/lib64 | /lib | /lib64) ;;
	*) test -d "$ac_im_usrlibdir" && ac_x_libraries=$ac_im_usrlibdir ;;
    esac
  fi
  cd ..
  rm -f -r conftest.dir
fi

# Standard set of common directories for X headers.
# Check X11 before X11Rn because it is often a symlink to the current release.
ac_x_header_dirs='
/usr/X11/include
/usr/X11R7/include
/usr/X11R6/include
/usr/X11R5/include
/usr/X11R4/include

/usr/include/X11
/usr/include/X11R7
/usr/include/X11R6
/usr/include/X11R5
/usr/include/X11R4

/usr/local/X11/include
/usr/local/X11R7/include
/usr/local/X11R6/include
/usr/local/X11R5/include
/usr/local/X11R4/include

/usr/local/include/X11
/usr/local/include/X11R7
/usr/local/include/X11R6
/usr/local/include/X11R5
/usr/local/include/X11R4

/usr/X386/include
/usr/x386/include
/usr/XFree86/include/X11

/usr/include
/usr/local/include
/usr/unsupported/include
/usr/athena/include
/usr/local/x11r5/include
/usr/lpp/Xamples/include

/usr/openwin/include
/usr/openwin/share/include'

if test "$ac_x_includes" = no; then
  # Guess where to find include files, by looking for Xlib.h.
  # First, try using that file with no special directory specified.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <X11/Xlib.h>
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  # We can compile using X headers with no special include directory.
ac_x_includes=
else
  for ac_dir in $ac_x_header_dirs; do
  if test -r "$ac_dir/X11/Xlib.h"; then
    ac_x_includes=$ac_dir
    break
  fi
done
fi
rm -f conftest.err conftest.i conftest.$ac_ext
fi # $ac_x_includes = no

if test "$ac_x_libraries" = no; then
  # Check for the libraries.
  # See if we find them without any special options.
  # Don't add to $LIBS permanently.
  ac_save_LIBS=$LIBS
  LIBS="-lX11 $LIBS"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <X11/Xlib.h>
int
main ()
{
XrmInitialize ()
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  LIBS=$ac_save_LIBS
# We can link X programs with no special library path.
ac_x_libraries=
else
  LIBS=$ac_save_LIBS
for ac_dir in `$as_echo "$ac_x_includes $ac_x_header_dirs" | sed s/include/lib/g`
do
  # Don't even attempt the hair of trying to link an X program!
  for ac_extension in a so sl dylib la dll; do
    if test -r "$ac_dir/libX11.$ac_extension"; then
      ac_x_libraries=$ac_dir
      break 2
    fi
  done
done
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
fi # $ac_x_libraries = no

case $ac_x_includes,$ac_x_libraries in #(
  no,* | *,no | *\'*)
    # Didn't find X, or a directory has "'" in its name.
    ac_cv_have_x="have_x=no";; #(
  *)
    # Record where we found X for the cache.
    ac_cv_have_x="have_x=yes\
	ac_x_includes='$ac_x_includes'\
	ac_x_libraries='$ac_x_libraries'"
esac
fi
;; #(
    *) have_x=yes;;
  esac
  eval "$ac_cv_have_x"
fi # $with_x != no

if test "$have_x" != yes; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $have_x" >&5
$as_echo "$have_x" >&6; }
  no_x=yes
else
  # If each of the values was on the command line, it overrides each guess.
  test "x$x_includes" = xNONE && x_includes=$ac_x_includes
  test "x$x_libraries" = xNONE && x_libraries=$ac_x_libraries
  # Update the cache value to reflect the command line values.
  ac_cv_have_x="have_x=yes\
	ac_x_includes='$x_includes'\
	ac_x_libraries='$x_libraries'"
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: libraries $x_libraries, headers $x_includes" >&5
$as_echo "libraries $x_libraries, headers $x_includes" >&6; }
fi

# path building : the first two levels
  lstx=/{usr,opt}/{.,local,xX386,XFree86,athena,openwin,lpp,unsupported}
# path building : the next two levels
  lstx=$lstx/{{.,[Xx]11*,share,Xamples}/include,include/[Xx]11*}
  if [[ $no_x != "yes" ]]
  then [[ -z $x_includes ]] && x_includes="$(dirname $x_libraries)/include"
    lstx="$x_includes $lstx"
  fi
  no_x=yes
  for x_includes in $(eval echo $lstx)
  do if [ -d $x_includes ]
      then CPPFLAGS="-I$x_includes"
        for ac_header in X11/Xlib.h X11/Xutil.h
do :
  as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
ac_fn_cxx_check_header_mongrel "$LINENO" "$ac_header" "$as_ac_Header" "$ac_includes_default"
if eval test \"x\$"$as_ac_Header"\" = x"yes"; then :
  cat >>confdefs.h <<_ACEOF
#define `$as_echo "HAVE_$ac_header" | $as_tr_cpp` 1
_ACEOF

          unset no_x

else

          unset x_libraries #the AC_X_PATH path must be forgotten
          no_x="yes"

fi

done

        test $no_x || break 2 #found headers
      fi
  done
  if test $no_x
  then unset x_includes
  else x_libraries=${x_includes/include/lib}
  fi

  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags



  if [[ $no_x != "yes" ]]
  then
  LC_SCATTER_FLAGS_list="-I$x_includes -L$x_libraries -lXext -lX11"


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while test -n "$LC_SCATTER_FLAGS_flag"
  do
    case "$LC_SCATTER_FLAGS_flag" in
      -l*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $LC_SCATTER_FLAGS_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_SCATTER_FLAGS_LIBS

  unset STRIP_ARG_memo
  if test "$LC_SCATTER_FLAGS_LIBS" = "$STRIP_ALL_ARGS_arg"
  then LC_SCATTER_FLAGS_LIBS=
  else  while test "$LC_SCATTER_FLAGS_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_SCATTER_FLAGS_LIBS"
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_SCATTER_FLAGS_LIBS="${LC_SCATTER_FLAGS_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_SCATTER_FLAGS_LIBS=$(echo $LC_SCATTER_FLAGS_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$LC_SCATTER_FLAGS_LIBS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else LC_SCATTER_FLAGS_LIBS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -L*|-framework*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $X11_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$X11_LDFLAGS

  unset STRIP_ARG_memo
  if test "$X11_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then X11_LDFLAGS=
  else  while test "$X11_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$X11_LDFLAGS"
        X11_LDFLAGS="${X11_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        X11_LDFLAGS="${X11_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        X11_LDFLAGS="${X11_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  X11_LDFLAGS=$(echo $X11_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$X11_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -I*|-U*|-D*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then X11_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $X11_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$X11_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$X11_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then X11_CPPFLAGS=
  else  while test "$X11_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$X11_CPPFLAGS"
        X11_CPPFLAGS="${X11_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        X11_CPPFLAGS="${X11_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        X11_CPPFLAGS="${X11_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  X11_CPPFLAGS=$(echo $X11_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       X11_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$X11_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else X11_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then X11_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $X11_CPPFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$X11_CPPFLAGS

  unset STRIP_ARG_memo
  if test "$X11_CPPFLAGS" = "$STRIP_ALL_ARGS_arg"
  then X11_CPPFLAGS=
  else  while test "$X11_CPPFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$X11_CPPFLAGS"
        X11_CPPFLAGS="${X11_CPPFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        X11_CPPFLAGS="${X11_CPPFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        X11_CPPFLAGS="${X11_CPPFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  X11_CPPFLAGS=$(echo $X11_CPPFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       X11_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$X11_CPPFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else X11_CPPFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $X11_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$X11_LDFLAGS

  unset STRIP_ARG_memo
  if test "$X11_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then X11_LDFLAGS=
  else  while test "$X11_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$X11_LDFLAGS"
        X11_LDFLAGS="${X11_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        X11_LDFLAGS="${X11_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        X11_LDFLAGS="${X11_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  X11_LDFLAGS=$(echo $X11_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$X11_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi

      ;;
      -Wl,-F*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $X11_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$X11_LDFLAGS

  unset STRIP_ARG_memo
  if test "$X11_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then X11_LDFLAGS=
  else  while test "$X11_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$X11_LDFLAGS"
        X11_LDFLAGS="${X11_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        X11_LDFLAGS="${X11_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        X11_LDFLAGS="${X11_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  X11_LDFLAGS=$(echo $X11_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$X11_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,-*)
  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $X11_LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$X11_LDFLAGS

  unset STRIP_ARG_memo
  if test "$X11_LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then X11_LDFLAGS=
  else  while test "$X11_LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$X11_LDFLAGS"
        X11_LDFLAGS="${X11_LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        X11_LDFLAGS="${X11_LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        X11_LDFLAGS="${X11_LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  X11_LDFLAGS=$(echo $X11_LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$X11_LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else X11_LDFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi
;;
      -Wl,*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib X11" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped for lib X11" >&2;};;
      -*)
        as_CACHEVAR=`$as_echo "ax_cv_check_cxxflags__$LC_SCATTER_FLAGS_flag" | $as_tr_sh`
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag" >&5
$as_echo_n "checking whether C++ compiler accepts $LC_SCATTER_FLAGS_flag... " >&6; }
if eval \${$as_CACHEVAR+:} false; then :
  $as_echo_n "(cached) " >&6
else

  ax_check_save_flags=$CXXFLAGS
  CXXFLAGS="$CXXFLAGS  $LC_SCATTER_FLAGS_flag"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :
  eval "$as_CACHEVAR=yes"
else
  eval "$as_CACHEVAR=no"
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=$ax_check_save_flags
fi
eval ac_res=\$$as_CACHEVAR
	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
$as_echo "$ac_res" >&6; }
if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then X11_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $X11_CXXFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$X11_CXXFLAGS

  unset STRIP_ARG_memo
  if test "$X11_CXXFLAGS" = "$STRIP_ALL_ARGS_arg"
  then X11_CXXFLAGS=
  else  while test "$X11_CXXFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$X11_CXXFLAGS"
        X11_CXXFLAGS="${X11_CXXFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        X11_CXXFLAGS="${X11_CXXFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        X11_CXXFLAGS="${X11_CXXFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  X11_CXXFLAGS=$(echo $X11_CXXFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       X11_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$X11_CXXFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else X11_CXXFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then X11_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  elif [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_SCATTER_FLAGS_flag"
  do  while [[ $X11_CFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$X11_CFLAGS

  unset STRIP_ARG_memo
  if test "$X11_CFLAGS" = "$STRIP_ALL_ARGS_arg"
  then X11_CFLAGS=
  else  while test "$X11_CFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$X11_CFLAGS"
        X11_CFLAGS="${X11_CFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        X11_CFLAGS="${X11_CFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        X11_CFLAGS="${X11_CFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  X11_CFLAGS=$(echo $X11_CFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       X11_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
  else
    if [[ "$X11_CFLAGS" =~ $(echo "(^|[[:space:]])$LC_SCATTER_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_SCATTER_FLAGS_flag" >&2;}
    else X11_CFLAGS+=" $LC_SCATTER_FLAGS_flag"
    fi
  fi


else
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&5
$as_echo "$as_me: WARNING: Flag $LC_SCATTER_FLAGS_flag dropped" >&2;}
fi
;;
      *) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&5
$as_echo "$as_me: WARNING: Flags $LC_SCATTER_FLAGS_flag NOT managed" >&2;};;
    esac

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_SCATTER_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_SCATTER_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_SCATTER_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_SCATTER_FLAGS_list=${LC_SCATTER_FLAGS_list#}; unset LC_SCATTER_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_SCATTER_FLAGS_list } # strip heading
    LC_SCATTER_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_SCATTER_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list)
    else LC_SCATTER_FLAGS_list=$(echo $LC_SCATTER_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_SCATTER_FLAGS_flag"})
    fi

  LC_SCATTER_FLAGS_flag=$(echo $LC_SCATTER_FLAGS_flag)    # normalize whitespaces
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_SCATTER_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_SCATTER_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_SCATTER_FLAGS_flag=${LC_SCATTER_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  done

  LC_PREPEND_LIST_nlist="$LC_SCATTER_FLAGS_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $X11_LIBS)" # remove unnecessary spaces and add a heading space
  X11_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$X11_LIBS" = "$LC_GETPOP_FLAG_1"
  then X11_LIBS=${X11_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$X11_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then X11_LIBS=$(echo $X11_LIBS)
    else X11_LIBS=$(echo $X11_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $X11_LIBS)" # remove unnecessary spaces and add a heading space
  X11_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$X11_LIBS" = "$LC_GETPOP_FLAG_1"
  then X11_LIBS=${X11_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$X11_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then X11_LIBS=$(echo $X11_LIBS)
    else X11_LIBS=$(echo $X11_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  X11_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  unset ${!LC_SCATTER_FLAGS_*}

  fi

  X11_CXX=$X11_CXXFLAGS

  X11_CPP=$X11_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(X11|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: X11_CFLAGS:$X11_CFLAGS" >&5
$as_echo "$as_me: X11_CFLAGS:$X11_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: X11_CXXFLAGS:$X11_CXXFLAGS" >&5
$as_echo "$as_me: X11_CXXFLAGS:$X11_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: X11_CPPFLAGS:$X11_CPPFLAGS" >&5
$as_echo "$as_me: X11_CPPFLAGS:$X11_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: X11_LIBS:$X11_LIBS" >&5
$as_echo "$as_me: X11_LIBS:$X11_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: X11_LDFLAGS:$X11_LDFLAGS" >&5
$as_echo "$as_me: X11_LDFLAGS:$X11_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  X11_CFLAGS="$X11_CXXFLAGS $X11_CPPFLAGS"








  LC_MERGE_FLAGS_list="$X11_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$X11_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

  LC_MERGE_FLAGS_list="$X11_LIBS"
  if [[ "LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$X11_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LIBS

  unset STRIP_ARG_memo
  if test "$LIBS" = "$STRIP_ALL_ARGS_arg"
  then LIBS=
  else  while test "$LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LIBS"
        LIBS="${LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LIBS="${LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LIBS="${LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LIBS=$(echo $LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}




         { $as_echo "$as_me:${as_lineno-$LINENO}: checking for X" >&5
$as_echo_n "checking for X... " >&6; }


# Check whether --with-x was given.
if test "${with_x+set}" = set; then :
  withval=$with_x;
fi

# $have_x is `yes', `no', `disabled', or empty when we do not yet know.
if test "x$with_x" = xno; then
  # The user explicitly disabled X.
  have_x=disabled
else
  case $x_includes,$x_libraries in #(
    *\'*) as_fn_error $? "cannot use X directory names containing '" "$LINENO" 5;; #(
    *,NONE | NONE,*) if ${ac_cv_have_x+:} false; then :
  $as_echo_n "(cached) " >&6
else
  # One or both of the vars are not set, and there is no cached value.
ac_x_includes=no ac_x_libraries=no
rm -f -r conftest.dir
if mkdir conftest.dir; then
  cd conftest.dir
  cat >Imakefile <<'_ACEOF'
incroot:
	@echo incroot='${INCROOT}'
usrlibdir:
	@echo usrlibdir='${USRLIBDIR}'
libdir:
	@echo libdir='${LIBDIR}'
_ACEOF
  if (export CC; ${XMKMF-xmkmf}) >/dev/null 2>/dev/null && test -f Makefile; then
    # GNU make sometimes prints "make[1]: Entering ...", which would confuse us.
    for ac_var in incroot usrlibdir libdir; do
      eval "ac_im_$ac_var=\`\${MAKE-make} $ac_var 2>/dev/null | sed -n 's/^$ac_var=//p'\`"
    done
    # Open Windows xmkmf reportedly sets LIBDIR instead of USRLIBDIR.
    for ac_extension in a so sl dylib la dll; do
      if test ! -f "$ac_im_usrlibdir/libX11.$ac_extension" &&
	 test -f "$ac_im_libdir/libX11.$ac_extension"; then
	ac_im_usrlibdir=$ac_im_libdir; break
      fi
    done
    # Screen out bogus values from the imake configuration.  They are
    # bogus both because they are the default anyway, and because
    # using them would break gcc on systems where it needs fixed includes.
    case $ac_im_incroot in
	/usr/include) ac_x_includes= ;;
	*) test -f "$ac_im_incroot/X11/Xos.h" && ac_x_includes=$ac_im_incroot;;
    esac
    case $ac_im_usrlibdir in
	/usr/lib | /usr/lib64 | /lib | /lib64) ;;
	*) test -d "$ac_im_usrlibdir" && ac_x_libraries=$ac_im_usrlibdir ;;
    esac
  fi
  cd ..
  rm -f -r conftest.dir
fi

# Standard set of common directories for X headers.
# Check X11 before X11Rn because it is often a symlink to the current release.
ac_x_header_dirs='
/usr/X11/include
/usr/X11R7/include
/usr/X11R6/include
/usr/X11R5/include
/usr/X11R4/include

/usr/include/X11
/usr/include/X11R7
/usr/include/X11R6
/usr/include/X11R5
/usr/include/X11R4

/usr/local/X11/include
/usr/local/X11R7/include
/usr/local/X11R6/include
/usr/local/X11R5/include
/usr/local/X11R4/include

/usr/local/include/X11
/usr/local/include/X11R7
/usr/local/include/X11R6
/usr/local/include/X11R5
/usr/local/include/X11R4

/usr/X386/include
/usr/x386/include
/usr/XFree86/include/X11

/usr/include
/usr/local/include
/usr/unsupported/include
/usr/athena/include
/usr/local/x11r5/include
/usr/lpp/Xamples/include

/usr/openwin/include
/usr/openwin/share/include'

if test "$ac_x_includes" = no; then
  # Guess where to find include files, by looking for Xlib.h.
  # First, try using that file with no special directory specified.
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <X11/Xlib.h>
_ACEOF
if ac_fn_cxx_try_cpp "$LINENO"; then :
  # We can compile using X headers with no special include directory.
ac_x_includes=
else
  for ac_dir in $ac_x_header_dirs; do
  if test -r "$ac_dir/X11/Xlib.h"; then
    ac_x_includes=$ac_dir
    break
  fi
done
fi
rm -f conftest.err conftest.i conftest.$ac_ext
fi # $ac_x_includes = no

if test "$ac_x_libraries" = no; then
  # Check for the libraries.
  # See if we find them without any special options.
  # Don't add to $LIBS permanently.
  ac_save_LIBS=$LIBS
  LIBS="-lX11 $LIBS"
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */
#include <X11/Xlib.h>
int
main ()
{
XrmInitialize ()
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  LIBS=$ac_save_LIBS
# We can link X programs with no special library path.
ac_x_libraries=
else
  LIBS=$ac_save_LIBS
for ac_dir in `$as_echo "$ac_x_includes $ac_x_header_dirs" | sed s/include/lib/g`
do
  # Don't even attempt the hair of trying to link an X program!
  for ac_extension in a so sl dylib la dll; do
    if test -r "$ac_dir/libX11.$ac_extension"; then
      ac_x_libraries=$ac_dir
      break 2
    fi
  done
done
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
fi # $ac_x_libraries = no

case $ac_x_includes,$ac_x_libraries in #(
  no,* | *,no | *\'*)
    # Didn't find X, or a directory has "'" in its name.
    ac_cv_have_x="have_x=no";; #(
  *)
    # Record where we found X for the cache.
    ac_cv_have_x="have_x=yes\
	ac_x_includes='$ac_x_includes'\
	ac_x_libraries='$ac_x_libraries'"
esac
fi
;; #(
    *) have_x=yes;;
  esac
  eval "$ac_cv_have_x"
fi # $with_x != no

if test "$have_x" != yes; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $have_x" >&5
$as_echo "$have_x" >&6; }
  no_x=yes
else
  # If each of the values was on the command line, it overrides each guess.
  test "x$x_includes" = xNONE && x_includes=$ac_x_includes
  test "x$x_libraries" = xNONE && x_libraries=$ac_x_libraries
  # Update the cache value to reflect the command line values.
  ac_cv_have_x="have_x=yes\
	ac_x_includes='$x_includes'\
	ac_x_libraries='$x_libraries'"
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: libraries $x_libraries, headers $x_includes" >&5
$as_echo "libraries $x_libraries, headers $x_includes" >&6; }
fi

         if test "$no_x" = yes; then
  # Not all programs may use this symbol, but it does not hurt to define it.

$as_echo "#define X_DISPLAY_MISSING 1" >>confdefs.h

  X_CFLAGS= X_PRE_LIBS= X_LIBS= X_EXTRA_LIBS=
else
  if test -n "$x_includes"; then
    X_CFLAGS="$X_CFLAGS -I$x_includes"
  fi

  # It would also be nice to do this for all -L options, not just this one.
  if test -n "$x_libraries"; then
    X_LIBS="$X_LIBS -L$x_libraries"
    # For Solaris; some versions of Sun CC require a space after -R and
    # others require no space.  Words are not sufficient . . . .
    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether -R must be followed by a space" >&5
$as_echo_n "checking whether -R must be followed by a space... " >&6; }
    ac_xsave_LIBS=$LIBS; LIBS="$LIBS -R$x_libraries"
    ac_xsave_cxx_werror_flag=$ac_cxx_werror_flag
    ac_cxx_werror_flag=yes
    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }
       X_LIBS="$X_LIBS -R$x_libraries"
else
  LIBS="$ac_xsave_LIBS -R $x_libraries"
       cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }
	  X_LIBS="$X_LIBS -R $x_libraries"
else
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: neither works" >&5
$as_echo "neither works" >&6; }
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
    ac_cxx_werror_flag=$ac_xsave_cxx_werror_flag
    LIBS=$ac_xsave_LIBS
  fi

  # Check for system-dependent libraries X programs must link with.
  # Do this before checking for the system-independent R6 libraries
  # (-lICE), since we may need -lsocket or whatever for X linking.

  if test "$ISC" = yes; then
    X_EXTRA_LIBS="$X_EXTRA_LIBS -lnsl_s -linet"
  else
    # Martyn Johnson says this is needed for Ultrix, if the X
    # libraries were built with DECnet support.  And Karl Berry says
    # the Alpha needs dnet_stub (dnet does not exist).
    ac_xsave_LIBS="$LIBS"; LIBS="$LIBS $X_LIBS -lX11"
    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char XOpenDisplay ();
int
main ()
{
return XOpenDisplay ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :

else
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for dnet_ntoa in -ldnet" >&5
$as_echo_n "checking for dnet_ntoa in -ldnet... " >&6; }
if ${ac_cv_lib_dnet_dnet_ntoa+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-ldnet  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char dnet_ntoa ();
int
main ()
{
return dnet_ntoa ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_dnet_dnet_ntoa=yes
else
  ac_cv_lib_dnet_dnet_ntoa=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dnet_dnet_ntoa" >&5
$as_echo "$ac_cv_lib_dnet_dnet_ntoa" >&6; }
if test "x$ac_cv_lib_dnet_dnet_ntoa" = xyes; then :
  X_EXTRA_LIBS="$X_EXTRA_LIBS -ldnet"
fi

    if test $ac_cv_lib_dnet_dnet_ntoa = no; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for dnet_ntoa in -ldnet_stub" >&5
$as_echo_n "checking for dnet_ntoa in -ldnet_stub... " >&6; }
if ${ac_cv_lib_dnet_stub_dnet_ntoa+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-ldnet_stub  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char dnet_ntoa ();
int
main ()
{
return dnet_ntoa ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_dnet_stub_dnet_ntoa=yes
else
  ac_cv_lib_dnet_stub_dnet_ntoa=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dnet_stub_dnet_ntoa" >&5
$as_echo "$ac_cv_lib_dnet_stub_dnet_ntoa" >&6; }
if test "x$ac_cv_lib_dnet_stub_dnet_ntoa" = xyes; then :
  X_EXTRA_LIBS="$X_EXTRA_LIBS -ldnet_stub"
fi

    fi
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
    LIBS="$ac_xsave_LIBS"

    # msh@cis.ufl.edu says -lnsl (and -lsocket) are needed for his 386/AT,
    # to get the SysV transport functions.
    # Chad R. Larson says the Pyramis MIS-ES running DC/OSx (SVR4)
    # needs -lnsl.
    # The nsl library prevents programs from opening the X display
    # on Irix 5.2, according to T.E. Dickey.
    # The functions gethostbyname, getservbyname, and inet_addr are
    # in -lbsd on LynxOS 3.0.1/i386, according to Lars Hecking.
    ac_fn_cxx_check_func "$LINENO" "gethostbyname" "ac_cv_func_gethostbyname"
if test "x$ac_cv_func_gethostbyname" = xyes; then :

fi

    if test $ac_cv_func_gethostbyname = no; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for gethostbyname in -lnsl" >&5
$as_echo_n "checking for gethostbyname in -lnsl... " >&6; }
if ${ac_cv_lib_nsl_gethostbyname+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lnsl  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gethostbyname ();
int
main ()
{
return gethostbyname ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_nsl_gethostbyname=yes
else
  ac_cv_lib_nsl_gethostbyname=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_nsl_gethostbyname" >&5
$as_echo "$ac_cv_lib_nsl_gethostbyname" >&6; }
if test "x$ac_cv_lib_nsl_gethostbyname" = xyes; then :
  X_EXTRA_LIBS="$X_EXTRA_LIBS -lnsl"
fi

      if test $ac_cv_lib_nsl_gethostbyname = no; then
	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gethostbyname in -lbsd" >&5
$as_echo_n "checking for gethostbyname in -lbsd... " >&6; }
if ${ac_cv_lib_bsd_gethostbyname+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lbsd  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char gethostbyname ();
int
main ()
{
return gethostbyname ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_bsd_gethostbyname=yes
else
  ac_cv_lib_bsd_gethostbyname=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_bsd_gethostbyname" >&5
$as_echo "$ac_cv_lib_bsd_gethostbyname" >&6; }
if test "x$ac_cv_lib_bsd_gethostbyname" = xyes; then :
  X_EXTRA_LIBS="$X_EXTRA_LIBS -lbsd"
fi

      fi
    fi

    # lieder@skyler.mavd.honeywell.com says without -lsocket,
    # socket/setsockopt and other routines are undefined under SCO ODT
    # 2.0.  But -lsocket is broken on IRIX 5.2 (and is not necessary
    # on later versions), says Simon Leinen: it contains gethostby*
    # variants that don't use the name server (or something).  -lsocket
    # must be given before -lnsl if both are needed.  We assume that
    # if connect needs -lnsl, so does gethostbyname.
    ac_fn_cxx_check_func "$LINENO" "connect" "ac_cv_func_connect"
if test "x$ac_cv_func_connect" = xyes; then :

fi

    if test $ac_cv_func_connect = no; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for connect in -lsocket" >&5
$as_echo_n "checking for connect in -lsocket... " >&6; }
if ${ac_cv_lib_socket_connect+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lsocket $X_EXTRA_LIBS $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char connect ();
int
main ()
{
return connect ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_socket_connect=yes
else
  ac_cv_lib_socket_connect=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_socket_connect" >&5
$as_echo "$ac_cv_lib_socket_connect" >&6; }
if test "x$ac_cv_lib_socket_connect" = xyes; then :
  X_EXTRA_LIBS="-lsocket $X_EXTRA_LIBS"
fi

    fi

    # Guillermo Gomez says -lposix is necessary on A/UX.
    ac_fn_cxx_check_func "$LINENO" "remove" "ac_cv_func_remove"
if test "x$ac_cv_func_remove" = xyes; then :

fi

    if test $ac_cv_func_remove = no; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for remove in -lposix" >&5
$as_echo_n "checking for remove in -lposix... " >&6; }
if ${ac_cv_lib_posix_remove+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lposix  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char remove ();
int
main ()
{
return remove ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_posix_remove=yes
else
  ac_cv_lib_posix_remove=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_posix_remove" >&5
$as_echo "$ac_cv_lib_posix_remove" >&6; }
if test "x$ac_cv_lib_posix_remove" = xyes; then :
  X_EXTRA_LIBS="$X_EXTRA_LIBS -lposix"
fi

    fi

    # BSDI BSD/OS 2.1 needs -lipc for XOpenDisplay.
    ac_fn_cxx_check_func "$LINENO" "shmat" "ac_cv_func_shmat"
if test "x$ac_cv_func_shmat" = xyes; then :

fi

    if test $ac_cv_func_shmat = no; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: checking for shmat in -lipc" >&5
$as_echo_n "checking for shmat in -lipc... " >&6; }
if ${ac_cv_lib_ipc_shmat+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lipc  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char shmat ();
int
main ()
{
return shmat ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_ipc_shmat=yes
else
  ac_cv_lib_ipc_shmat=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_ipc_shmat" >&5
$as_echo "$ac_cv_lib_ipc_shmat" >&6; }
if test "x$ac_cv_lib_ipc_shmat" = xyes; then :
  X_EXTRA_LIBS="$X_EXTRA_LIBS -lipc"
fi

    fi
  fi

  # Check for libraries that X11R6 Xt/Xaw programs need.
  ac_save_LDFLAGS=$LDFLAGS
  test -n "$x_libraries" && LDFLAGS="$LDFLAGS -L$x_libraries"
  # SM needs ICE to (dynamically) link under SunOS 4.x (so we have to
  # check for ICE first), but we must link in the order -lSM -lICE or
  # we get undefined symbols.  So assume we have SM if we have ICE.
  # These have to be linked with before -lX11, unlike the other
  # libraries we check for below, so use a different variable.
  # John Interrante, Karl Berry
  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for IceConnectionNumber in -lICE" >&5
$as_echo_n "checking for IceConnectionNumber in -lICE... " >&6; }
if ${ac_cv_lib_ICE_IceConnectionNumber+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lICE $X_EXTRA_LIBS $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char IceConnectionNumber ();
int
main ()
{
return IceConnectionNumber ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_ICE_IceConnectionNumber=yes
else
  ac_cv_lib_ICE_IceConnectionNumber=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_ICE_IceConnectionNumber" >&5
$as_echo "$ac_cv_lib_ICE_IceConnectionNumber" >&6; }
if test "x$ac_cv_lib_ICE_IceConnectionNumber" = xyes; then :
  X_PRE_LIBS="$X_PRE_LIBS -lSM -lICE"
fi

  LDFLAGS=$ac_save_LDFLAGS

fi

         ;;
      *)
         CONFIG_QTPIPES="no"
         as_fn_error $? "bad option --enable-qt=$enable_qt" "$LINENO" 5
         ;;
  esac


  # Qt Pipes
  # Check whether --enable-qtpipes was given.
if test "${enable_qtpipes+set}" = set; then :
  enableval=$enable_qtpipes;
else
  enable_qtpipes=$CONFIG_QTPIPES
fi


  case "$enable_qtpipes" in
      yes)
         if test x"$CONFIG_GUI" = xQT; then

$as_echo "#define QTPIPES 1" >>confdefs.h

            { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling Qt pipes" >&5
$as_echo "enabling Qt pipes" >&6; }
         else
            as_fn_error $? "QT not enabled!" "$LINENO" 5
         fi
         ;;
      no)
         if test x"$CONFIG_GUI" = xQT; then
            { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling Qt pipes" >&5
$as_echo "disabling Qt pipes" >&6; }
         fi
         ;;
      *)
         as_fn_error $? "bad option --enable-qtpipes=$enable_qtpipes" "$LINENO" 5
         ;;
  esac

  # Check whether --enable-cocoa was given.
if test "${enable_cocoa+set}" = set; then :
  enableval=$enable_cocoa;
else
  enable_cocoa="no"
fi

  case "$enable_cocoa" in
      yes)
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling experimental Cocoa port" >&5
$as_echo "enabling experimental Cocoa port" >&6; }
         COCOA_CFLAGS=""
         COCOA_LDFLAGS="-framework Cocoa"
         CONFIG_GUI="COCOA"
         ;;
      no)
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling experimental Cocoa port" >&5
$as_echo "disabling experimental Cocoa port" >&6; }
         ;;
      *)
         as_fn_error $? "bad option --enable-cocoa=$enable_cocoa" "$LINENO" 5
         ;;
  esac

  case "$CONFIG_GUI" in
      X11)
         CONFIG_X11="X11 Widkit"
         if test "x${CONFIG_GS}" != "xGhostscript"; then
           CONFIG_X11="$CONFIG_X11 Ghostscript"
         fi
         CONFIG_GUI_DEFINE="X11TEXMACS"

$as_echo "#define X11TEXMACS 1" >>confdefs.h

         ;;
      COCOA)
         CONFIG_COCOA="Cocoa"
         CONFIG_GUI_DEFINE="AQUATEXMACS"

$as_echo "#define AQUATEXMACS 1" >>confdefs.h

         ;;
      QT)
         CONFIG_QT="Qt"
         CONFIG_GUI_DEFINE="QTTEXMACS"

$as_echo "#define QTTEXMACS 1" >>confdefs.h

         ;;
  esac















# Check whether --enable-pdf-renderer was given.
if test "${enable_pdf_renderer+set}" = set; then :
  enableval=$enable_pdf_renderer;
else
  unset enableval
fi



  { $as_echo "$as_me:${as_lineno-$LINENO}: checking hummus support for native pdf exports" >&5
$as_echo_n "checking hummus support for native pdf exports... " >&6; }
  exec 3>&6 6>/dev/null

  if [[ "$enableval" != no ]]
  then if [[ $CONFIG_GUI != QT ]]
    then
  exec 6>&3
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabled: needs Qt" >&5
$as_echo "disabled: needs Qt" >&6; }

    else
      ac_fn_cxx_check_header_mongrel "$LINENO" "zlib.h" "ac_cv_header_zlib_h" "$ac_includes_default"
if test "x$ac_cv_header_zlib_h" = xyes; then :

        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for deflate in -lz" >&5
$as_echo_n "checking for deflate in -lz... " >&6; }
if ${ac_cv_lib_z_deflate+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lz  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char deflate ();
int
main ()
{
return deflate ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_z_deflate=yes
else
  ac_cv_lib_z_deflate=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_z_deflate" >&5
$as_echo "$ac_cv_lib_z_deflate" >&6; }
if test "x$ac_cv_lib_z_deflate" = xyes; then :

          ac_fn_cxx_check_header_mongrel "$LINENO" "png.h" "ac_cv_header_png_h" "$ac_includes_default"
if test "x$ac_cv_header_png_h" = xyes; then :

            { $as_echo "$as_me:${as_lineno-$LINENO}: checking for png_set_read_fn in -lpng" >&5
$as_echo_n "checking for png_set_read_fn in -lpng... " >&6; }
if ${ac_cv_lib_png_png_set_read_fn+:} false; then :
  $as_echo_n "(cached) " >&6
else
  ac_check_lib_save_LIBS=$LIBS
LIBS="-lpng  $LIBS"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

/* Override any GCC internal prototype to avoid an error.
   Use char because int might match the return type of a GCC
   builtin and then its argument prototype would still apply.  */
#ifdef __cplusplus
extern "C"
#endif
char png_set_read_fn ();
int
main ()
{
return png_set_read_fn ();
  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_link "$LINENO"; then :
  ac_cv_lib_png_png_set_read_fn=yes
else
  ac_cv_lib_png_png_set_read_fn=no
fi
rm -f core conftest.err conftest.$ac_objext \
    conftest$ac_exeext conftest.$ac_ext
LIBS=$ac_check_lib_save_LIBS
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_png_png_set_read_fn" >&5
$as_echo "$ac_cv_lib_png_png_set_read_fn" >&6; }
if test "x$ac_cv_lib_png_png_set_read_fn" = xyes; then :

              if [[ $USE_FREETYPE -eq 3 ]]
              then
  LC_MERGE_FLAGS_list="-lz -lpng"
  if [[ "PDF_LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="-lz -lpng"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $PDF_LIBS)" # remove unnecessary spaces and add a heading space
  PDF_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$PDF_LIBS" = "$LC_GETPOP_FLAG_1"
  then PDF_LIBS=${PDF_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$PDF_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then PDF_LIBS=$(echo $PDF_LIBS)
    else PDF_LIBS=$(echo $PDF_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $PDF_LIBS)" # remove unnecessary spaces and add a heading space
  PDF_LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$PDF_LIBS" = "$LC_GETPOP_FLAG_1"
  then PDF_LIBS=${PDF_LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$PDF_LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then PDF_LIBS=$(echo $PDF_LIBS)
    else PDF_LIBS=$(echo $PDF_LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  PDF_LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then PDF_LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $PDF_LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$PDF_LIBS

  unset STRIP_ARG_memo
  if test "$PDF_LIBS" = "$STRIP_ALL_ARGS_arg"
  then PDF_LIBS=
  else  while test "$PDF_LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$PDF_LIBS"
        PDF_LIBS="${PDF_LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        PDF_LIBS="${PDF_LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        PDF_LIBS="${PDF_LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  PDF_LIBS=$(echo $PDF_LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       PDF_LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$PDF_LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else PDF_LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}


$as_echo "#define PDF_RENDERER 1" >>confdefs.h


$as_echo "#define PDFHUMMUS_NO_TIFF 1" >>confdefs.h


$as_echo "#define PDFHUMMUS_NO_DCT 1" >>confdefs.h

                CONFIG_PDF="Pdf"





  LC_MERGE_FLAGS_list="$PDF_LDFLAGS"
  if [[ "LDFLAGS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$PDF_LDFLAGS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LDFLAGS)" # remove unnecessary spaces and add a heading space
  LDFLAGS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LDFLAGS" = "$LC_GETPOP_FLAG_1"
  then LDFLAGS=${LDFLAGS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LDFLAGS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LDFLAGS=$(echo $LDFLAGS)
    else LDFLAGS=$(echo $LDFLAGS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LDFLAGS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LDFLAGS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LDFLAGS

  unset STRIP_ARG_memo
  if test "$LDFLAGS" = "$STRIP_ALL_ARGS_arg"
  then LDFLAGS=
  else  while test "$LDFLAGS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LDFLAGS"
        LDFLAGS="${LDFLAGS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LDFLAGS="${LDFLAGS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LDFLAGS="${LDFLAGS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LDFLAGS=$(echo $LDFLAGS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LDFLAGS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LDFLAGS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LDFLAGS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}

  LC_MERGE_FLAGS_list="$PDF_LIBS"
  if [[ "LIBS" =~ $(echo "(^|_)LIBS") ]]
  then
  LC_PREPEND_LIST_nlist="$PDF_LIBS"
  #pop the old list

  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}

  while [[ $LC_PREPEND_LIST_flag ]]
  do
  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-Wl,') ]]
  then LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  elif [[ "$LC_PREPEND_LIST_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_PREPEND_LIST_flag"
  do  while [[ $LC_PREPEND_LIST_nlist != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LC_PREPEND_LIST_nlist

  unset STRIP_ARG_memo
  if test "$LC_PREPEND_LIST_nlist" = "$STRIP_ALL_ARGS_arg"
  then LC_PREPEND_LIST_nlist=
  else  while test "$LC_PREPEND_LIST_nlist" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LC_PREPEND_LIST_nlist"
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LC_PREPEND_LIST_nlist="${LC_PREPEND_LIST_nlist//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LC_PREPEND_LIST_nlist=$(echo $LC_PREPEND_LIST_nlist)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
  else
    if [[ "$LC_PREPEND_LIST_nlist" =~ $(echo "(^|[[:space:]])$LC_PREPEND_LIST_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_PREPEND_LIST_flag" >&2;}
    else LC_PREPEND_LIST_nlist+=" $LC_PREPEND_LIST_flag"
    fi
  fi


  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LIBS)" # remove unnecessary spaces and add a heading space
  LIBS=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LIBS" = "$LC_GETPOP_FLAG_1"
  then LIBS=${LIBS#}; unset LC_PREPEND_LIST_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LIBS } # strip heading
    LC_PREPEND_LIST_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_PREPEND_LIST_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LIBS=$(echo $LIBS)
    else LIBS=$(echo $LIBS${LC_GETPOP_FLAG_tail#"$LC_PREPEND_LIST_flag"})
    fi

  LC_PREPEND_LIST_flag=$(echo $LC_PREPEND_LIST_flag)    # normalize whitespaces
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\/\//\/}   # normalize path separator
  LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag//\'}   # remove quote

  if [[ "$LC_PREPEND_LIST_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_PREPEND_LIST_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_PREPEND_LIST_flag=${LC_PREPEND_LIST_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  done
  LIBS="$LC_PREPEND_LIST_nlist"
  unset ${!LC_PREPEND_LIST_*}

  else  while [ "$LC_MERGE_FLAGS_list" ]
        do
  LC_GETPOP_FLAG_sepa=-
  LC_GETPOP_FLAG_1=" $(echo $LC_MERGE_FLAGS_list)" # remove unnecessary spaces and add a heading space
  LC_MERGE_FLAGS_list=${LC_GETPOP_FLAG_1%% $LC_GETPOP_FLAG_sepa*} # get heading
  if test "$LC_MERGE_FLAGS_list" = "$LC_GETPOP_FLAG_1"
  then LC_MERGE_FLAGS_list=${LC_MERGE_FLAGS_list#}; unset LC_MERGE_FLAGS_flag     # flag not found
  else
    LC_GETPOP_FLAG_tail=${LC_GETPOP_FLAG_1#$LC_MERGE_FLAGS_list } # strip heading
    LC_MERGE_FLAGS_flag=${LC_GETPOP_FLAG_tail%% -*}        # get flag and data
    if test "$LC_MERGE_FLAGS_flag" = "$LC_GETPOP_FLAG_tail"  # is there someting after the flag
    then LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list)
    else LC_MERGE_FLAGS_list=$(echo $LC_MERGE_FLAGS_list${LC_GETPOP_FLAG_tail#"$LC_MERGE_FLAGS_flag"})
    fi

  LC_MERGE_FLAGS_flag=$(echo $LC_MERGE_FLAGS_flag)    # normalize whitespaces
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\/\//\/}   # normalize path separator
  LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag//\'}   # remove quote

  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo "^-(l|L|D)[[:space:]]+([^[:space:]].*)$") ]]
  then LC_MERGE_FLAGS_flag=-${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi

    if [ $LC_GETPOP_FLAG_sepa != - ]    # just return the value
    then LC_MERGE_FLAGS_flag=${LC_MERGE_FLAGS_flag#$LC_GETPOP_FLAG_sepa}
    fi
  fi

  unset ${!LC_GETPOP_FLAG_*}


  if [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-Wl,') ]]
  then LIBS+=" $LC_MERGE_FLAGS_flag"
  elif [[ "$LC_MERGE_FLAGS_flag" =~ $(echo '^-l') ]]
  then
  unset STRIP_ALL_ARGS_list
  for STRIP_ALL_ARGS_arg in "$LC_MERGE_FLAGS_flag"
  do  while [[ $LIBS != $STRIP_ALL_ARGS_list ]]
      do STRIP_ALL_ARGS_list=$LIBS

  unset STRIP_ARG_memo
  if test "$LIBS" = "$STRIP_ALL_ARGS_arg"
  then LIBS=
  else  while test "$LIBS" != "$STRIP_ARG_memo"
      do STRIP_ARG_memo="$LIBS"
        LIBS="${LIBS/#$STRIP_ALL_ARGS_arg[[:space:]]/}" # at the beginning
        LIBS="${LIBS/%[[:space:]]$STRIP_ALL_ARGS_arg/}"    # at the end
        LIBS="${LIBS//[[:space:]]$STRIP_ALL_ARGS_arg[[:space:]]/ }"  # all in the middle no consecutive
      done
    fi
  LIBS=$(echo $LIBS)  # wipe extra blank if any
  unset ${!STRIP_ARG_*}

      done
  done
  unset ${!STRIP_ALL_ARGS_*}

       LIBS+=" $LC_MERGE_FLAGS_flag"
  else
    if [[ "$LIBS" =~ $(echo "(^|[[:space:]])$LC_MERGE_FLAGS_flag($|[[:space:]])") ]]
    then { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&5
$as_echo "$as_me: WARNING: Drop duplicate flag $LC_MERGE_FLAGS_flag" >&2;}
    else LIBS+=" $LC_MERGE_FLAGS_flag"
    fi
  fi

        done
  fi
  unset ${!LC_MERGE_FLAGS_*}




  exec 6>&3
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabled" >&5
$as_echo "enabled" >&6; }

              else

  exec 6>&3
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabled: needs freetype >= 2.4.8." >&5
$as_echo "disabled: needs freetype >= 2.4.8." >&6; }

              fi

else


  exec 6>&3
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabled: needs libpng" >&5
$as_echo "disabled: needs libpng" >&6; }


fi


else


  exec 6>&3
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabled: needs png.h" >&5
$as_echo "disabled: needs png.h" >&6; }


fi



else


  exec 6>&3
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabled: needs libz" >&5
$as_echo "disabled: needs libz" >&6; }


fi


else


  exec 6>&3
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabled: needs zlib.h" >&5
$as_echo "disabled: needs zlib.h" >&6; }


fi


     fi
  else
  exec 6>&3
  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabled" >&5
$as_echo "disabled" >&6; }

  fi

  PDF_CXX=$PDF_CXXFLAGS

  PDF_CPP=$PDF_CPPFLAGS

  if [[ $enable_dumpflags =~ $(echo "(^|[[:space:]])(PDF|ALL)($|[[:space:]])") ]]
  then
  { $as_echo "$as_me:${as_lineno-$LINENO}: PDF_CFLAGS:$PDF_CFLAGS" >&5
$as_echo "$as_me: PDF_CFLAGS:$PDF_CFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: PDF_CXXFLAGS:$PDF_CXXFLAGS" >&5
$as_echo "$as_me: PDF_CXXFLAGS:$PDF_CXXFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: PDF_CPPFLAGS:$PDF_CPPFLAGS" >&5
$as_echo "$as_me: PDF_CPPFLAGS:$PDF_CPPFLAGS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: PDF_LIBS:$PDF_LIBS" >&5
$as_echo "$as_me: PDF_LIBS:$PDF_LIBS" >&6;}
  { $as_echo "$as_me:${as_lineno-$LINENO}: PDF_LDFLAGS:$PDF_LDFLAGS" >&5
$as_echo "$as_me: PDF_LDFLAGS:$PDF_LDFLAGS" >&6;}


  fi
# adaptation layer remove when finished
  PDF_CFLAGS="$PDF_CXXFLAGS $PDF_CPPFLAGS"






  #STD_DEBUG_FLAGS="-fno-rtti -fno-exceptions"
  #if test "$enable_cocoa" = "yes"; then
  #    STD_DEBUG_FLAGS="-fno-exceptions"
  #fi

  STD_DEBUG_FLAGS="-fno-rtti"
  if test "$enable_cocoa" = "yes"; then
      STD_DEBUG_FLAGS=""
  fi

  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if compiler supports $STD_DEBUG_FLAGS" >&5
$as_echo_n "checking if compiler supports $STD_DEBUG_FLAGS... " >&6; }


  CFLAGS__ax_save_flags=$CFLAGS



  CPPFLAGS__ax_save_flags=$CPPFLAGS



  CXXFLAGS__ax_save_flags=$CXXFLAGS



  LDFLAGS__ax_save_flags=$LDFLAGS



  LIBS__ax_save_flags=$LIBS



  OBJCFLAGS__ax_save_flags=$OBJCFLAGS



  OBJCXXFLAGS__ax_save_flags=$OBJCXXFLAGS



  CXXFLAGS=$STD_DEBUG_FLAGS
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

    int some_variable = 0;

int
main ()
{


  ;
  return 0;
}
_ACEOF
if ac_fn_cxx_try_compile "$LINENO"; then :

      CONFIG_CXXDIALECT="$STD_DEBUG_FLAGS"
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
$as_echo "yes" >&6; }

else

      unset STD_DEBUG_FLAGS
      CONFIG_CXXDIALECT=""
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
$as_echo "no" >&6; }

fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
  CXXFLAGS=""

  CFLAGS=$CFLAGS__ax_save_flags


  CPPFLAGS=$CPPFLAGS__ax_save_flags


  CXXFLAGS=$CXXFLAGS__ax_save_flags


  LDFLAGS=$LDFLAGS__ax_save_flags


  LIBS=$LIBS__ax_save_flags


  OBJCFLAGS=$OBJCFLAGS__ax_save_flags


  OBJCXXFLAGS=$OBJCXXFLAGS__ax_save_flags



  CXXFLAGS+=${STD_DEBUG_FLAGS:+ $STD_DEBUG_FLAGS}


  #--- Profiling

  # Check whether --enable-profile was given.
if test "${enable_profile+set}" = set; then :
  enableval=$enable_profile;
else
  enable_profile="no"
fi


  if test "$enable_profile" = "yes"; then
      if test "$GXX" = "yes"; then
         enable_profile="yes"
      else
         enable_profile="none"
      fi
  fi

  case "$enable_profile" in
      yes)
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling gcc profiling compilation flag -pg" >&5
$as_echo "enabling gcc profiling compilation flag -pg" >&6; }
         CONFIG_CXXPROFILE="-pg"
         ;;
      none)
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling gcc profiling compilation flag" >&5
$as_echo "disabling gcc profiling compilation flag" >&6; }
         CONFIG_CXXPROFILE=""
         ;;
      *)
         CONFIG_CXXPROFILE=""
         ;;
  esac

  #--- Debugging

  # Check whether --enable-debug was given.
if test "${enable_debug+set}" = set; then :
  enableval=$enable_debug;
else
  enable_debug="no"
fi


  if test "$enable_debug" = "yes"; then
      if test "$GXX" = "yes"; then
         enable_debug="-O0 -ggdb"
      else
         enable_debug="-O0 -g3"
      fi
  fi

  if test "$enable_debug" = "no"; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling debugging" >&5
$as_echo "disabling debugging" >&6; }
      CONFIG_STRIP="strip"
      CONFIG_CXXDEBUG=""
      optimize_default="yes"
      DEBUG_RC=0
  else
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling debugging, $enable_debug" >&5
$as_echo "enabling debugging, $enable_debug" >&6; }
      CONFIG_STRIP="true"
      CONFIG_CXXDEBUG="$enable_debug"
      optimize_default="no"

$as_echo "#define DEBUG_ON 1" >>confdefs.h

      DEBUG_RC=VS_FF_DEBUG
  fi


  #--- Assert

  # Check whether --enable-assert was given.
if test "${enable_assert+set}" = set; then :
  enableval=$enable_assert;
else
  enable_assert="yes"
fi


  if test "$enable_assert" = "no"; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling assertion checking" >&5
$as_echo "disabling assertion checking" >&6; }
  else
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling assertion checking" >&5
$as_echo "enabling assertion checking" >&6; }

$as_echo "#define DEBUG_ASSERT 1" >>confdefs.h

  fi

  #--- Warnings

  case "$GXX_VERSION" in
    none)
      CONFIG_CXXWARNING="";
    ;;
    *)
      CONFIG_CXXWARNING="-Wall -Wno-return-type"
    ;;
  esac

  # Check whether --enable-warnings was given.
if test "${enable_warnings+set}" = set; then :
  enableval=$enable_warnings;
else
  enable_warnings="yes"
fi

  case "$enable_warnings" in
      yes)
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling warning flags $CONFIG_CXXWARNING" >&5
$as_echo "enabling warning flags $CONFIG_CXXWARNING" >&6; } ;;
      no)
         CONFIG_CXXWARNING=""
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling warning flags" >&5
$as_echo "disabling warning flags" >&6; } ;;
      *)
         CONFIG_CXXWARNING="$enable_warnings"
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling warning flags $CONFIG_CXXWARNING" >&5
$as_echo "enabling warning flags $CONFIG_CXXWARNING" >&6; } ;;
  esac

  #--- Checks

  # Check whether --enable-checks was given.
if test "${enable_checks+set}" = set; then :
  enableval=$enable_checks;
else
  enable_checks="no"
fi

  case "$enable_checks" in
      yes)
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling sanity checks" >&5
$as_echo "enabling sanity checks" >&6; }

$as_echo "#define SANITY_CHECKS 1" >>confdefs.h

         ;;
      no)
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling sanity checks" >&5
$as_echo "disabling sanity checks" >&6; }
         ;;
      *)
         as_fn_error $? "bad option --enable-checks=$enable_checks" "$LINENO" 5
         ;;
  esac


  #--- Experimental mode

  # Check whether --enable-experimental was given.
if test "${enable_experimental+set}" = set; then :
  enableval=$enable_experimental;
else
  enable_experimental="no"
fi

  case "$enable_experimental" in
      yes)
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling experimental style rewriting code" >&5
$as_echo "enabling experimental style rewriting code" >&6; }

$as_echo "#define EXPERIMENTAL 1" >>confdefs.h

         CONFIG_EXPERIMENTAL="Memorizer Environment Evaluate"
         ;;
      no)
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling experimental style rewriting code" >&5
$as_echo "disabling experimental style rewriting code" >&6; }
         CONFIG_EXPERIMENTAL=""
         ;;
      *)
         as_fn_error $? "bad option --enable-experimental=$enable_experimental" "$LINENO" 5
         ;;
  esac

  # Check whether --enable-preproc was given.
if test "${enable_preproc+set}" = set; then :
  enableval=$enable_preproc; PREPROC=$enableval

else
  PREPROC="NO"

fi




  if test "$optimize_default" = "yes"; then
    case "$GXX_VERSION" in
      3.3.3 | 3.3.4 | 4.*)
	;;
      2.96 | 3.0 | 3.0.* | 3.1 | 3.1.* | 3.2 | 3.2.* | 3.3 | 3.3.*)
	case "${host}" in
	  i*86-*-linux-gnu* | i*86-*-freebsd*)
	    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using g++ 3.*, optimize without inline by default" >&5
$as_echo "$as_me: WARNING: using g++ 3.*, optimize without inline by default" >&2;}
	    optimize_default="no-inline"
	  ;;
	  *)
	    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using g++ 3.*, optimize without inline by default" >&5
$as_echo "$as_me: WARNING: using g++ 3.*, optimize without inline by default" >&2;}
	    optimize_default="no-inline"
	  ;;
	esac
      ;;
    esac
  fi

  # Check whether --enable-optimize was given.
if test "${enable_optimize+set}" = set; then :
  enableval=$enable_optimize;
else
  enable_optimize="$optimize_default"
fi


  case "$enable_optimize" in
      yes)
	  # keep optimization options
	  { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling optimizations, $CONFIG_CXXOPTIMIZE" >&5
$as_echo "enabling optimizations, $CONFIG_CXXOPTIMIZE" >&6; } ;;
      no-inline)
	  optimize_no_inline="-fno-default-inline -fno-inline"
	  CONFIG_CXXOPTIMIZE="$CONFIG_CXXOPTIMIZE $optimize_no_inline"
	  { $as_echo "$as_me:${as_lineno-$LINENO}: result: enabling optimizations, $CONFIG_CXXOPTIMIZE" >&5
$as_echo "enabling optimizations, $CONFIG_CXXOPTIMIZE" >&6; } ;;
      no)
	  CONFIG_CXXOPTIMIZE=""
	  { $as_echo "$as_me:${as_lineno-$LINENO}: result: disabling optimizations" >&5
$as_echo "disabling optimizations" >&6; } ;;
      *)
	  CONFIG_CXXOPTIMIZE="$enable_optimize"
	  { $as_echo "$as_me:${as_lineno-$LINENO}: result: customizing optimizations, $enable_optimize" >&5
$as_echo "customizing optimizations, $enable_optimize" >&6; } ;;
  esac


  if test "$prefix" = ""; then
    prefix=/usr/local
  fi
  if test "$prefix" = "NONE"; then
    prefix=/usr/local
  fi
  if test "$exec_prefix" = ""; then
    exec_prefix='${prefix}'
  fi
  if test "$exec_prefix" = "NONE"; then
    exec_prefix='${prefix}'
  fi
  if test "$exec_prefix" = '${prefix}'; then
    exec_prefix='${prefix}'
  fi
  if test "$includedir" = ""; then
    includedir='${prefix}/include'
  fi
  if test "$includedir" = "NONE"; then
    includedir='${prefix}/include'
  fi
  if test "$includedir" = '${prefix}/include'; then
    includedir='${prefix}/include'
  fi
  if test "$libdir" = ""; then
    libdir='${exec_prefix}/lib'
  fi
  if test "$libdir" = "NONE"; then
    libdir='${exec_prefix}/lib'
  fi
  if test "$libdir" = '${exec_prefix}/lib'; then
    libdir='${exec_prefix}/lib'
  fi
  if test "$bindir" = ""; then
    bindir='${exec_prefix}/bin'
  fi
  if test "$bindir" = "NONE"; then
    bindir=${exec_prefix}/bin
  fi
  if test "$bindir" = '${exec_prefix}/bin'; then
    bindir='${exec_prefix}/bin'
  fi
  if test "$datarootdir" = ""; then
    datarootdir='${prefix}/share'
  fi
  if test "$datarootdir" = "NONE"; then
    datarootdir='${prefix}/share'
  fi
  if test "$datarootdir" = '${prefix}/share'; then
    datarootdir='${prefix}/share'
  fi
  if test "$datadir" = ""; then
    datadir='${prefix}/share'
  fi
  if test "$datadir" = "NONE"; then
    datadir='${prefix}/share'
  fi
  if test "$datadir" = '${prefix}/share'; then
    datadir='${prefix}/share'
  fi
  if test "$mandir" = ""; then
    mandir='${datarootdir}/man'
  fi
  if test "$mandir" = "NONE"; then
    mandir='${datarootdir}/man'
  fi
  if test "$mandir" = '${datarootdir}/man'; then
    mandir='${datarootdir}/man'
  fi
  if test "$libexecdir" = ""; then
    libexecdir='${exec_prefix}/libexec'
  fi
  if test "$libexecdir" = "NONE"; then
    libexecdir='${exec_prefix}/libexec'
  fi
  if test "$libexecdir" = '${exec_prefix}/libexec'; then
    libexecdir='${exec_prefix}/libexec'
  fi

  curdir="`pwd`"
  tmorig=${curdir}
  tmdir=${PACKAGE}
  tmsrc=${curdir}/${tmdir}
  tmbin=${libexecdir}/${tmdir}
  tmdata=${datadir}/${tmdir}






  if test "$DEVEL_RELEASE" = "1"; then
    tm_devel=${PACKAGE}-${DEVEL_VERSION}
  else
    tm_devel=${PACKAGE}-${DEVEL_VERSION}-R${DEVEL_RELEASE}
  fi
  tm_devel_release=${PACKAGE}-${DEVEL_VERSION}-${DEVEL_RELEASE}
  tm_underscore_devel=${PACKAGE}_${DEVEL_VERSION}

  if test -z "$VERSION_BUILD"
  then tm_windows_release="$VERSION_MAJOR,$VERSION_MINOR,0,0"
  else tm_windows_release="$VERSION_MAJOR,$VERSION_MINOR,$VERSION_BUILD,0"
  fi

  tm_debian_name_devel=${DEBIAN_NAME}_${DEVEL_VERSION}





  if test "$STABLE_RELEASE" = "1"; then
    tm_stable=${PACKAGE}-${STABLE_VERSION}
  else
    tm_stable=${PACKAGE}-${STABLE_VERSION}-R${STABLE_RELEASE}
  fi
  tm_stable_release=${PACKAGE}-${STABLE_VERSION}-${STABLE_RELEASE}
  tm_underscore_stable=${PACKAGE}_${STABLE_VERSION}







  # Check whether --enable-sign was given.
if test "${enable_sign+set}" = set; then :
  enableval=$enable_sign;
fi


  if test "$enable_sign" = "no" -o "$enable_sign" = "" ; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no code signing" >&5
$as_echo "no code signing" >&6; }
  else
    case "${CONFIG_OS}" in
    (MACOS)
      if type codesign >/dev/null
      then  { $as_echo "$as_me:${as_lineno-$LINENO}: result: signing enabled" >&5
$as_echo "signing enabled" >&6; }
            SIGNID=$enable_sign

      else { $as_echo "$as_me:${as_lineno-$LINENO}: result: signing disabled" >&5
$as_echo "signing disabled" >&6; }
      fi;;
		(MINGW)
      if type signtool.exe >/dev/null
      then  { $as_echo "$as_me:${as_lineno-$LINENO}: result: signing enabled" >&5
$as_echo "signing enabled" >&6; }
            SIGNID="signtool.exe sign -a -d "Texmacs" -t http://timestamp.digicert.com"

      else { $as_echo "$as_me:${as_lineno-$LINENO}: result: signing disabled" >&5
$as_echo "signing disabled" >&6; }
      fi;;
    (*) { $as_echo "$as_me:${as_lineno-$LINENO}: result: no code signing available yet" >&5
$as_echo "no code signing available yet" >&6; };;
    esac
  fi


#--------------------------------------------------------------------
# final adjustement for Texmacs compile and run
#--------------------------------------------------------------------

CPPFLAGS="$CPPFLAGS -include config.h"

#--------------------------------------------------------------------
# Done
#--------------------------------------------------------------------

ac_config_files="$ac_config_files Makefile src/makefile misc/admin/admin.makefile misc/doxygen/Doxyfile:misc/doxygen/Doxyfile.in misc/man/texmacs.1:misc/man/texmacs.1.in packages/redhat/TeXmacs.spec:packages/redhat/TeXmacs.spec.in misc/scripts/fig2ps:misc/scripts/fig2ps.in misc/scripts/texmacs:misc/scripts/texmacs.in TeXmacs/examples/plugins/dynlink/Makefile:TeXmacs/examples/plugins/dynlink/Makefile.in packages/macos/Base.xcconfig:packages/macos/Base.xcconfig.in packages/macos/Info-Xcode.plist:packages/macos/Info-Xcode.plist.in packages/macos/Info.plist:packages/macos/Info.plist.in packages/fedora/TeXmacs.spec:packages/fedora/TeXmacs.spec.in packages/mandriva/TeXmacs.spec:packages/mandriva/TeXmacs.spec.in packages/centos/TeXmacs.spec:packages/centos/TeXmacs.spec.in packages/windows/TeXmacs.iss:packages/windows/TeXmacs.iss.in packages/windows/resource.rc:packages/windows/resource.rc.in packages/debian/changelog:packages/debian/changelog.in packages/debian/control:packages/debian/control.in src/System/tm_configure.hpp:src/System/tm_configure.in"

cat >confcache <<\_ACEOF
# This file is a shell script that caches the results of configure
# tests run on this system so they can be shared between configure
# scripts and configure runs, see configure's option --config-cache.
# It is not useful on other systems.  If it contains results you don't
# want to keep, you may remove or edit it.
#
# config.status only pays attention to the cache file if you give it
# the --recheck option to rerun configure.
#
# `ac_cv_env_foo' variables (set or unset) will be overridden when
# loading this file, other *unset* `ac_cv_foo' will be assigned the
# following values.

_ACEOF

# The following way of writing the cache mishandles newlines in values,
# but we know of no workaround that is simple, portable, and efficient.
# So, we kill variables containing newlines.
# Ultrix sh set writes to stderr and can't be redirected directly,
# and sets the high bit in the cache file unless we assign to the vars.
(
  for ac_var in `(set) 2>&1 | sed -n 's/^\([a-zA-Z_][a-zA-Z0-9_]*\)=.*/\1/p'`; do
    eval ac_val=\$$ac_var
    case $ac_val in #(
    *${as_nl}*)
      case $ac_var in #(
      *_cv_*) { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: cache variable $ac_var contains a newline" >&5
$as_echo "$as_me: WARNING: cache variable $ac_var contains a newline" >&2;} ;;
      esac
      case $ac_var in #(
      _ | IFS | as_nl) ;; #(
      BASH_ARGV | BASH_SOURCE) eval $ac_var= ;; #(
      *) { eval $ac_var=; unset $ac_var;} ;;
      esac ;;
    esac
  done

  (set) 2>&1 |
    case $as_nl`(ac_space=' '; set) 2>&1` in #(
    *${as_nl}ac_space=\ *)
      # `set' does not quote correctly, so add quotes: double-quote
      # substitution turns \\\\ into \\, and sed turns \\ into \.
      sed -n \
	"s/'/'\\\\''/g;
	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\\2'/p"
      ;; #(
    *)
      # `set' quotes correctly as required by POSIX, so do not add quotes.
      sed -n "/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p"
      ;;
    esac |
    sort
) |
  sed '
     /^ac_cv_env_/b end
     t clear
     :clear
     s/^\([^=]*\)=\(.*[{}].*\)$/test "${\1+set}" = set || &/
     t end
     s/^\([^=]*\)=\(.*\)$/\1=${\1=\2}/
     :end' >>confcache
if diff "$cache_file" confcache >/dev/null 2>&1; then :; else
  if test -w "$cache_file"; then
    if test "x$cache_file" != "x/dev/null"; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: updating cache $cache_file" >&5
$as_echo "$as_me: updating cache $cache_file" >&6;}
      if test ! -f "$cache_file" || test -h "$cache_file"; then
	cat confcache >"$cache_file"
      else
        case $cache_file in #(
        */* | ?:*)
	  mv -f confcache "$cache_file"$$ &&
	  mv -f "$cache_file"$$ "$cache_file" ;; #(
        *)
	  mv -f confcache "$cache_file" ;;
	esac
      fi
    fi
  else
    { $as_echo "$as_me:${as_lineno-$LINENO}: not updating unwritable cache $cache_file" >&5
$as_echo "$as_me: not updating unwritable cache $cache_file" >&6;}
  fi
fi
rm -f confcache

test "x$prefix" = xNONE && prefix=$ac_default_prefix
# Let make expand exec_prefix.
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

DEFS=-DHAVE_CONFIG_H

ac_libobjs=
ac_ltlibobjs=
U=
for ac_i in : $LIBOBJS; do test "x$ac_i" = x: && continue
  # 1. Remove the extension, and $U if already installed.
  ac_script='s/\$U\././;s/\.o$//;s/\.obj$//'
  ac_i=`$as_echo "$ac_i" | sed "$ac_script"`
  # 2. Prepend LIBOBJDIR.  When used with automake>=1.10 LIBOBJDIR
  #    will be set to the directory where LIBOBJS objects are built.
  as_fn_append ac_libobjs " \${LIBOBJDIR}$ac_i\$U.$ac_objext"
  as_fn_append ac_ltlibobjs " \${LIBOBJDIR}$ac_i"'$U.lo'
done
LIBOBJS=$ac_libobjs

LTLIBOBJS=$ac_ltlibobjs


      ax_dir="tm-guile168"

      # Convert the path to the subdirectory into a shell variable name.
      ax_var=$(printf "$ax_dir" | tr -c "0-9a-zA-Z_" "_")
      ax_configure_ax_var=$(eval "echo \"\$ax_sub_configure_$ax_var\"")
      if test "$no_recursion" != "yes" -a "x$ax_configure_ax_var" = "xyes"; then
        subdirs_extra="$subdirs_extra $ax_dir"

        ax_msg="=== configuring in $ax_dir ($(pwd)/$ax_dir)"
        $as_echo "$as_me:${as_lineno-$LINENO}: $ax_msg" >&5
        $as_echo "$ax_msg" >&6
        as_dir="$ax_dir"; as_fn_mkdir_p
        ac_builddir=.

case "$ax_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`$as_echo "$ax_dir" | sed 's|^\.[\\/]||'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix


        ax_popdir=$(pwd)
        cd "$ax_dir"

        # Check for guested configure; otherwise get Cygnus style configure.
        if test -f "$ac_srcdir/configure.gnu"; then
          ax_sub_configure=$ac_srcdir/configure.gnu
        elif test -f "$ac_srcdir/configure"; then
          ax_sub_configure=$ac_srcdir/configure
        elif test -f "$ac_srcdir/configure.in"; then
          # This should be Cygnus configure.
          ax_sub_configure=$ac_aux_dir/configure
        else
          { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: no configuration information is in $ax_dir" >&5
$as_echo "$as_me: WARNING: no configuration information is in $ax_dir" >&2;}
          ax_sub_configure=
        fi

        if test -n "$ax_sub_configure"; then
          # Get the configure arguments for the current configure.
          eval "ax_sub_configure_args=\"\$ax_sub_configure_args_${ax_var}\""

          case $ax_arg in
            *\'*) ax_arg=$($as_echo "$ax_arg" | sed "s/'/'\\\\\\\\''/g");;
          esac
          ax_sub_configure_args="'$ax_arg' $ax_sub_configure_args"
          if test "$silent" = yes; then
            ax_sub_configure_args="--silent $ax_sub_configure_args"
          fi
          # Make the cache file name correct relative to the subdirectory.
          case $cache_file in
            [\\/]* | ?:[\\/]* )
              ax_sub_cache_file=$cache_file ;;
            *) # Relative name.
              ax_sub_cache_file=$ac_top_build_prefix$cache_file ;;
          esac

          { $as_echo "$as_me:${as_lineno-$LINENO}: running $SHELL $ax_sub_configure $ax_sub_configure_args --cache-file=$ac_sub_cache_file" >&5
$as_echo "$as_me: running $SHELL $ax_sub_configure $ax_sub_configure_args --cache-file=$ac_sub_cache_file" >&6;}
          eval "\$SHELL \"$ax_sub_configure\" $ax_sub_configure_args --cache-file=\"$ax_sub_cache_file\"" \
              || as_fn_error $? "$ax_sub_configure failed for $ax_dir" "$LINENO" 5
        fi

        cd "$ax_popdir"
      fi


: "${CONFIG_STATUS=./config.status}"
ac_write_fail=0
ac_clean_files_save=$ac_clean_files
ac_clean_files="$ac_clean_files $CONFIG_STATUS"
{ $as_echo "$as_me:${as_lineno-$LINENO}: creating $CONFIG_STATUS" >&5
$as_echo "$as_me: creating $CONFIG_STATUS" >&6;}
as_write_fail=0
cat >$CONFIG_STATUS <<_ASEOF || as_write_fail=1
#! $SHELL
# Generated by $as_me.
# Run this file to recreate the current configuration.
# Compiler output produced by configure, useful for debugging
# configure, is in config.log if it exists.

debug=false
ac_cs_recheck=false
ac_cs_silent=false

SHELL=\${CONFIG_SHELL-$SHELL}
export SHELL
_ASEOF
cat >>$CONFIG_STATUS <<\_ASEOF || as_write_fail=1
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in #(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH


# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error


# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit

# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -pR'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -pR'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -pR'
  fi
else
  as_ln_s='cp -pR'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null


# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} # as_fn_mkdir_p
if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi


# as_fn_executable_p FILE
# -----------------------
# Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} # as_fn_executable_p
as_test_x='test -x'
as_executable_p=as_fn_executable_p

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"


exec 6>&1
## ----------------------------------- ##
## Main body of $CONFIG_STATUS script. ##
## ----------------------------------- ##
_ASEOF
test $as_write_fail = 0 && chmod +x $CONFIG_STATUS || ac_write_fail=1

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
# Save the log message, to keep $0 and so on meaningful, and to
# report actual input values of CONFIG_FILES etc. instead of their
# values after options handling.
ac_log="
This file was extended by $as_me, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  CONFIG_FILES    = $CONFIG_FILES
  CONFIG_HEADERS  = $CONFIG_HEADERS
  CONFIG_LINKS    = $CONFIG_LINKS
  CONFIG_COMMANDS = $CONFIG_COMMANDS
  $ $0 $@

on `(hostname || uname -n) 2>/dev/null | sed 1q`
"

_ACEOF

case $ac_config_files in *"
"*) set x $ac_config_files; shift; ac_config_files=$*;;
esac

case $ac_config_headers in *"
"*) set x $ac_config_headers; shift; ac_config_headers=$*;;
esac


cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
# Files that config.status was made for.
config_files="$ac_config_files"
config_headers="$ac_config_headers"

_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
ac_cs_usage="\
\`$as_me' instantiates files and other configuration actions
from templates according to the current configuration.  Unless the files
and actions are specified as TAGs, all are instantiated by default.

Usage: $0 [OPTION]... [TAG]...

  -h, --help       print this help, then exit
  -V, --version    print version number and configuration settings, then exit
      --config     print configuration, then exit
  -q, --quiet, --silent
                   do not print progress messages
  -d, --debug      don't remove temporary files
      --recheck    update $as_me by reconfiguring in the same conditions
      --file=FILE[:TEMPLATE]
                   instantiate the configuration file FILE
      --header=FILE[:TEMPLATE]
                   instantiate the configuration header FILE

Configuration files:
$config_files

Configuration headers:
$config_headers

Report bugs to the package provider."

_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
ac_cs_version="\\
config.status
configured by $0, generated by GNU Autoconf 2.69,
  with options \\"\$ac_cs_config\\"

Copyright (C) 2012 Free Software Foundation, Inc.
This config.status script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it."

ac_pwd='$ac_pwd'
srcdir='$srcdir'
test -n "\$AWK" || AWK=awk
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
# The default lists apply if the user does not specify any file.
ac_need_defaults=:
while test $# != 0
do
  case $1 in
  --*=?*)
    ac_option=`expr "X$1" : 'X\([^=]*\)='`
    ac_optarg=`expr "X$1" : 'X[^=]*=\(.*\)'`
    ac_shift=:
    ;;
  --*=)
    ac_option=`expr "X$1" : 'X\([^=]*\)='`
    ac_optarg=
    ac_shift=:
    ;;
  *)
    ac_option=$1
    ac_optarg=$2
    ac_shift=shift
    ;;
  esac

  case $ac_option in
  # Handling of the options.
  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
    ac_cs_recheck=: ;;
  --version | --versio | --versi | --vers | --ver | --ve | --v | -V )
    $as_echo "$ac_cs_version"; exit ;;
  --config | --confi | --conf | --con | --co | --c )
    $as_echo "$ac_cs_config"; exit ;;
  --debug | --debu | --deb | --de | --d | -d )
    debug=: ;;
  --file | --fil | --fi | --f )
    $ac_shift
    case $ac_optarg in
    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
    '') as_fn_error $? "missing file argument" ;;
    esac
    as_fn_append CONFIG_FILES " '$ac_optarg'"
    ac_need_defaults=false;;
  --header | --heade | --head | --hea )
    $ac_shift
    case $ac_optarg in
    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
    esac
    as_fn_append CONFIG_HEADERS " '$ac_optarg'"
    ac_need_defaults=false;;
  --he | --h)
    # Conflict between --help and --header
    as_fn_error $? "ambiguous option: \`$1'
Try \`$0 --help' for more information.";;
  --help | --hel | -h )
    $as_echo "$ac_cs_usage"; exit ;;
  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
  | -silent | --silent | --silen | --sile | --sil | --si | --s)
    ac_cs_silent=: ;;

  # This is an error.
  -*) as_fn_error $? "unrecognized option: \`$1'
Try \`$0 --help' for more information." ;;

  *) as_fn_append ac_config_targets " $1"
     ac_need_defaults=false ;;

  esac
  shift
done

ac_configure_extra_args=

if $ac_cs_silent; then
  exec 6>/dev/null
  ac_configure_extra_args="$ac_configure_extra_args --silent"
fi

_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
if \$ac_cs_recheck; then
  set X $SHELL '$0' $ac_configure_args \$ac_configure_extra_args --no-create --no-recursion
  shift
  \$as_echo "running CONFIG_SHELL=$SHELL \$*" >&6
  CONFIG_SHELL='$SHELL'
  export CONFIG_SHELL
  exec "\$@"
fi

_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
exec 5>>config.log
{
  echo
  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## Running $as_me. ##
_ASBOX
  $as_echo "$ac_log"
} >&5

_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1

# Handling of arguments.
for ac_config_target in $ac_config_targets
do
  case $ac_config_target in
    "src/System/config.h") CONFIG_HEADERS="$CONFIG_HEADERS src/System/config.h:src/System/config.in" ;;
    "Makefile") CONFIG_FILES="$CONFIG_FILES Makefile" ;;
    "src/makefile") CONFIG_FILES="$CONFIG_FILES src/makefile" ;;
    "misc/admin/admin.makefile") CONFIG_FILES="$CONFIG_FILES misc/admin/admin.makefile" ;;
    "misc/doxygen/Doxyfile") CONFIG_FILES="$CONFIG_FILES misc/doxygen/Doxyfile:misc/doxygen/Doxyfile.in" ;;
    "misc/man/texmacs.1") CONFIG_FILES="$CONFIG_FILES misc/man/texmacs.1:misc/man/texmacs.1.in" ;;
    "packages/redhat/TeXmacs.spec") CONFIG_FILES="$CONFIG_FILES packages/redhat/TeXmacs.spec:packages/redhat/TeXmacs.spec.in" ;;
    "misc/scripts/fig2ps") CONFIG_FILES="$CONFIG_FILES misc/scripts/fig2ps:misc/scripts/fig2ps.in" ;;
    "misc/scripts/texmacs") CONFIG_FILES="$CONFIG_FILES misc/scripts/texmacs:misc/scripts/texmacs.in" ;;
    "TeXmacs/examples/plugins/dynlink/Makefile") CONFIG_FILES="$CONFIG_FILES TeXmacs/examples/plugins/dynlink/Makefile:TeXmacs/examples/plugins/dynlink/Makefile.in" ;;
    "packages/macos/Base.xcconfig") CONFIG_FILES="$CONFIG_FILES packages/macos/Base.xcconfig:packages/macos/Base.xcconfig.in" ;;
    "packages/macos/Info-Xcode.plist") CONFIG_FILES="$CONFIG_FILES packages/macos/Info-Xcode.plist:packages/macos/Info-Xcode.plist.in" ;;
    "packages/macos/Info.plist") CONFIG_FILES="$CONFIG_FILES packages/macos/Info.plist:packages/macos/Info.plist.in" ;;
    "packages/fedora/TeXmacs.spec") CONFIG_FILES="$CONFIG_FILES packages/fedora/TeXmacs.spec:packages/fedora/TeXmacs.spec.in" ;;
    "packages/mandriva/TeXmacs.spec") CONFIG_FILES="$CONFIG_FILES packages/mandriva/TeXmacs.spec:packages/mandriva/TeXmacs.spec.in" ;;
    "packages/centos/TeXmacs.spec") CONFIG_FILES="$CONFIG_FILES packages/centos/TeXmacs.spec:packages/centos/TeXmacs.spec.in" ;;
    "packages/windows/TeXmacs.iss") CONFIG_FILES="$CONFIG_FILES packages/windows/TeXmacs.iss:packages/windows/TeXmacs.iss.in" ;;
    "packages/windows/resource.rc") CONFIG_FILES="$CONFIG_FILES packages/windows/resource.rc:packages/windows/resource.rc.in" ;;
    "packages/debian/changelog") CONFIG_FILES="$CONFIG_FILES packages/debian/changelog:packages/debian/changelog.in" ;;
    "packages/debian/control") CONFIG_FILES="$CONFIG_FILES packages/debian/control:packages/debian/control.in" ;;
    "src/System/tm_configure.hpp") CONFIG_FILES="$CONFIG_FILES src/System/tm_configure.hpp:src/System/tm_configure.in" ;;

  *) as_fn_error $? "invalid argument: \`$ac_config_target'" "$LINENO" 5;;
  esac
done


# If the user did not use the arguments to specify the items to instantiate,
# then the envvar interface is used.  Set only those that are not.
# We use the long form for the default assignment because of an extremely
# bizarre bug on SunOS 4.1.3.
if $ac_need_defaults; then
  test "${CONFIG_FILES+set}" = set || CONFIG_FILES=$config_files
  test "${CONFIG_HEADERS+set}" = set || CONFIG_HEADERS=$config_headers
fi

# Have a temporary directory for convenience.  Make it in the build tree
# simply because there is no reason against having it here, and in addition,
# creating and moving files from /tmp can sometimes cause problems.
# Hook for its removal unless debugging.
# Note that there is a small window in which the directory will not be cleaned:
# after its creation but before its name has been assigned to `$tmp'.
$debug ||
{
  tmp= ac_tmp=
  trap 'exit_status=$?
  : "${ac_tmp:=$tmp}"
  { test ! -d "$ac_tmp" || rm -fr "$ac_tmp"; } && exit $exit_status
' 0
  trap 'as_fn_exit 1' 1 2 13 15
}
# Create a (secure) tmp directory for tmp files.

{
  tmp=`(umask 077 && mktemp -d "./confXXXXXX") 2>/dev/null` &&
  test -d "$tmp"
}  ||
{
  tmp=./conf$$-$RANDOM
  (umask 077 && mkdir "$tmp")
} || as_fn_error $? "cannot create a temporary directory in ." "$LINENO" 5
ac_tmp=$tmp

# Set up the scripts for CONFIG_FILES section.
# No need to generate them if there are no CONFIG_FILES.
# This happens for instance with `./config.status config.h'.
if test -n "$CONFIG_FILES"; then


ac_cr=`echo X | tr X '\015'`
# On cygwin, bash can eat \r inside `` if the user requested igncr.
# But we know of no other shell where ac_cr would be empty at this
# point, so we can use a bashism as a fallback.
if test "x$ac_cr" = x; then
  eval ac_cr=\$\'\\r\'
fi
ac_cs_awk_cr=`$AWK 'BEGIN { print "a\rb" }' </dev/null 2>/dev/null`
if test "$ac_cs_awk_cr" = "a${ac_cr}b"; then
  ac_cs_awk_cr='\\r'
else
  ac_cs_awk_cr=$ac_cr
fi

echo 'BEGIN {' >"$ac_tmp/subs1.awk" &&
_ACEOF


{
  echo "cat >conf$$subs.awk <<_ACEOF" &&
  echo "$ac_subst_vars" | sed 's/.*/&!$&$ac_delim/' &&
  echo "_ACEOF"
} >conf$$subs.sh ||
  as_fn_error $? "could not make $CONFIG_STATUS" "$LINENO" 5
ac_delim_num=`echo "$ac_subst_vars" | grep -c '^'`
ac_delim='%!_!# '
for ac_last_try in false false false false false :; do
  . ./conf$$subs.sh ||
    as_fn_error $? "could not make $CONFIG_STATUS" "$LINENO" 5

  ac_delim_n=`sed -n "s/.*$ac_delim\$/X/p" conf$$subs.awk | grep -c X`
  if test $ac_delim_n = $ac_delim_num; then
    break
  elif $ac_last_try; then
    as_fn_error $? "could not make $CONFIG_STATUS" "$LINENO" 5
  else
    ac_delim="$ac_delim!$ac_delim _$ac_delim!! "
  fi
done
rm -f conf$$subs.sh

cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
cat >>"\$ac_tmp/subs1.awk" <<\\_ACAWK &&
_ACEOF
sed -n '
h
s/^/S["/; s/!.*/"]=/
p
g
s/^[^!]*!//
:repl
t repl
s/'"$ac_delim"'$//
t delim
:nl
h
s/\(.\{148\}\)..*/\1/
t more1
s/["\\]/\\&/g; s/^/"/; s/$/\\n"\\/
p
n
b repl
:more1
s/["\\]/\\&/g; s/^/"/; s/$/"\\/
p
g
s/.\{148\}//
t nl
:delim
h
s/\(.\{148\}\)..*/\1/
t more2
s/["\\]/\\&/g; s/^/"/; s/$/"/
p
b
:more2
s/["\\]/\\&/g; s/^/"/; s/$/"\\/
p
g
s/.\{148\}//
t delim
' <conf$$subs.awk | sed '
/^[^""]/{
  N
  s/\n//
}
' >>$CONFIG_STATUS || ac_write_fail=1
rm -f conf$$subs.awk
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
_ACAWK
cat >>"\$ac_tmp/subs1.awk" <<_ACAWK &&
  for (key in S) S_is_set[key] = 1
  FS = ""

}
{
  line = $ 0
  nfields = split(line, field, "@")
  substed = 0
  len = length(field[1])
  for (i = 2; i < nfields; i++) {
    key = field[i]
    keylen = length(key)
    if (S_is_set[key]) {
      value = S[key]
      line = substr(line, 1, len) "" value "" substr(line, len + keylen + 3)
      len += length(value) + length(field[++i])
      substed = 1
    } else
      len += 1 + keylen
  }

  print line
}

_ACAWK
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
if sed "s/$ac_cr//" < /dev/null > /dev/null 2>&1; then
  sed "s/$ac_cr\$//; s/$ac_cr/$ac_cs_awk_cr/g"
else
  cat
fi < "$ac_tmp/subs1.awk" > "$ac_tmp/subs.awk" \
  || as_fn_error $? "could not setup config files machinery" "$LINENO" 5
_ACEOF

# VPATH may cause trouble with some makes, so we remove sole $(srcdir),
# ${srcdir} and @srcdir@ entries from VPATH if srcdir is ".", strip leading and
# trailing colons and then remove the whole line if VPATH becomes empty
# (actually we leave an empty line to preserve line numbers).
if test "x$srcdir" = x.; then
  ac_vpsub='/^[	 ]*VPATH[	 ]*=[	 ]*/{
h
s///
s/^/:/
s/[	 ]*$/:/
s/:\$(srcdir):/:/g
s/:\${srcdir}:/:/g
s/:@srcdir@:/:/g
s/^:*//
s/:*$//
x
s/\(=[	 ]*\).*/\1/
G
s/\n//
s/^[^=]*=[	 ]*$//
}'
fi

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
fi # test -n "$CONFIG_FILES"

# Set up the scripts for CONFIG_HEADERS section.
# No need to generate them if there are no CONFIG_HEADERS.
# This happens for instance with `./config.status Makefile'.
if test -n "$CONFIG_HEADERS"; then
cat >"$ac_tmp/defines.awk" <<\_ACAWK ||
BEGIN {
_ACEOF

# Transform confdefs.h into an awk script `defines.awk', embedded as
# here-document in config.status, that substitutes the proper values into
# config.h.in to produce config.h.

# Create a delimiter string that does not exist in confdefs.h, to ease
# handling of long lines.
ac_delim='%!_!# '
for ac_last_try in false false :; do
  ac_tt=`sed -n "/$ac_delim/p" confdefs.h`
  if test -z "$ac_tt"; then
    break
  elif $ac_last_try; then
    as_fn_error $? "could not make $CONFIG_HEADERS" "$LINENO" 5
  else
    ac_delim="$ac_delim!$ac_delim _$ac_delim!! "
  fi
done

# For the awk script, D is an array of macro values keyed by name,
# likewise P contains macro parameters if any.  Preserve backslash
# newline sequences.

ac_word_re=[_$as_cr_Letters][_$as_cr_alnum]*
sed -n '
s/.\{148\}/&'"$ac_delim"'/g
t rset
:rset
s/^[	 ]*#[	 ]*define[	 ][	 ]*/ /
t def
d
:def
s/\\$//
t bsnl
s/["\\]/\\&/g
s/^ \('"$ac_word_re"'\)\(([^()]*)\)[	 ]*\(.*\)/P["\1"]="\2"\
D["\1"]=" \3"/p
s/^ \('"$ac_word_re"'\)[	 ]*\(.*\)/D["\1"]=" \2"/p
d
:bsnl
s/["\\]/\\&/g
s/^ \('"$ac_word_re"'\)\(([^()]*)\)[	 ]*\(.*\)/P["\1"]="\2"\
D["\1"]=" \3\\\\\\n"\\/p
t cont
s/^ \('"$ac_word_re"'\)[	 ]*\(.*\)/D["\1"]=" \2\\\\\\n"\\/p
t cont
d
:cont
n
s/.\{148\}/&'"$ac_delim"'/g
t clear
:clear
s/\\$//
t bsnlc
s/["\\]/\\&/g; s/^/"/; s/$/"/p
d
:bsnlc
s/["\\]/\\&/g; s/^/"/; s/$/\\\\\\n"\\/p
b cont
' <confdefs.h | sed '
s/'"$ac_delim"'/"\\\
"/g' >>$CONFIG_STATUS || ac_write_fail=1

cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
  for (key in D) D_is_set[key] = 1
  FS = ""
}
/^[\t ]*#[\t ]*(define|undef)[\t ]+$ac_word_re([\t (]|\$)/ {
  line = \$ 0
  split(line, arg, " ")
  if (arg[1] == "#") {
    defundef = arg[2]
    mac1 = arg[3]
  } else {
    defundef = substr(arg[1], 2)
    mac1 = arg[2]
  }
  split(mac1, mac2, "(") #)
  macro = mac2[1]
  prefix = substr(line, 1, index(line, defundef) - 1)
  if (D_is_set[macro]) {
    # Preserve the white space surrounding the "#".
    print prefix "define", macro P[macro] D[macro]
    next
  } else {
    # Replace #undef with comments.  This is necessary, for example,
    # in the case of _POSIX_SOURCE, which is predefined and required
    # on some systems where configure will not decide to define it.
    if (defundef == "undef") {
      print "/*", prefix defundef, macro, "*/"
      next
    }
  }
}
{ print }
_ACAWK
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
  as_fn_error $? "could not setup config headers machinery" "$LINENO" 5
fi # test -n "$CONFIG_HEADERS"


eval set X "  :F $CONFIG_FILES  :H $CONFIG_HEADERS    "
shift
for ac_tag
do
  case $ac_tag in
  :[FHLC]) ac_mode=$ac_tag; continue;;
  esac
  case $ac_mode$ac_tag in
  :[FHL]*:*);;
  :L* | :C*:*) as_fn_error $? "invalid tag \`$ac_tag'" "$LINENO" 5;;
  :[FH]-) ac_tag=-:-;;
  :[FH]*) ac_tag=$ac_tag:$ac_tag.in;;
  esac
  ac_save_IFS=$IFS
  IFS=:
  set x $ac_tag
  IFS=$ac_save_IFS
  shift
  ac_file=$1
  shift

  case $ac_mode in
  :L) ac_source=$1;;
  :[FH])
    ac_file_inputs=
    for ac_f
    do
      case $ac_f in
      -) ac_f="$ac_tmp/stdin";;
      *) # Look for the file first in the build tree, then in the source tree
	 # (if the path is not absolute).  The absolute path cannot be DOS-style,
	 # because $ac_f cannot contain `:'.
	 test -f "$ac_f" ||
	   case $ac_f in
	   [\\/$]*) false;;
	   *) test -f "$srcdir/$ac_f" && ac_f="$srcdir/$ac_f";;
	   esac ||
	   as_fn_error 1 "cannot find input file: \`$ac_f'" "$LINENO" 5;;
      esac
      case $ac_f in *\'*) ac_f=`$as_echo "$ac_f" | sed "s/'/'\\\\\\\\''/g"`;; esac
      as_fn_append ac_file_inputs " '$ac_f'"
    done

    # Let's still pretend it is `configure' which instantiates (i.e., don't
    # use $as_me), people would be surprised to read:
    #    /* config.h.  Generated by config.status.  */
    configure_input='Generated from '`
	  $as_echo "$*" | sed 's|^[^:]*/||;s|:[^:]*/|, |g'
	`' by configure.'
    if test x"$ac_file" != x-; then
      configure_input="$ac_file.  $configure_input"
      { $as_echo "$as_me:${as_lineno-$LINENO}: creating $ac_file" >&5
$as_echo "$as_me: creating $ac_file" >&6;}
    fi
    # Neutralize special characters interpreted by sed in replacement strings.
    case $configure_input in #(
    *\&* | *\|* | *\\* )
       ac_sed_conf_input=`$as_echo "$configure_input" |
       sed 's/[\\\\&|]/\\\\&/g'`;; #(
    *) ac_sed_conf_input=$configure_input;;
    esac

    case $ac_tag in
    *:-:* | *:-) cat >"$ac_tmp/stdin" \
      || as_fn_error $? "could not create $ac_file" "$LINENO" 5 ;;
    esac
    ;;
  esac

  ac_dir=`$as_dirname -- "$ac_file" ||
$as_expr X"$ac_file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$ac_file" : 'X\(//\)[^/]' \| \
	 X"$ac_file" : 'X\(//\)$' \| \
	 X"$ac_file" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$ac_file" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
  as_dir="$ac_dir"; as_fn_mkdir_p
  ac_builddir=.

case "$ac_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`$as_echo "$ac_dir" | sed 's|^\.[\\/]||'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix


  case $ac_mode in
  :F)
  #
  # CONFIG_FILE
  #

_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
# If the template does not know about datarootdir, expand it.
# FIXME: This hack should be removed a few years after 2.60.
ac_datarootdir_hack=; ac_datarootdir_seen=
ac_sed_dataroot='
/datarootdir/ {
  p
  q
}
/@datadir@/p
/@docdir@/p
/@infodir@/p
/@localedir@/p
/@mandir@/p'
case `eval "sed -n \"\$ac_sed_dataroot\" $ac_file_inputs"` in
*datarootdir*) ac_datarootdir_seen=yes;;
*@datadir@*|*@docdir@*|*@infodir@*|*@localedir@*|*@mandir@*)
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&5
$as_echo "$as_me: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&2;}
_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
  ac_datarootdir_hack='
  s&@datadir@&$datadir&g
  s&@docdir@&$docdir&g
  s&@infodir@&$infodir&g
  s&@localedir@&$localedir&g
  s&@mandir@&$mandir&g
  s&\\\${datarootdir}&$datarootdir&g' ;;
esac
_ACEOF

# Neutralize VPATH when `$srcdir' = `.'.
# Shell code in configure.ac might set extrasub.
# FIXME: do we really want to maintain this feature?
cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
ac_sed_extra="$ac_vpsub
$extrasub
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
:t
/@[a-zA-Z_][a-zA-Z_0-9]*@/!b
s|@configure_input@|$ac_sed_conf_input|;t t
s&@top_builddir@&$ac_top_builddir_sub&;t t
s&@top_build_prefix@&$ac_top_build_prefix&;t t
s&@srcdir@&$ac_srcdir&;t t
s&@abs_srcdir@&$ac_abs_srcdir&;t t
s&@top_srcdir@&$ac_top_srcdir&;t t
s&@abs_top_srcdir@&$ac_abs_top_srcdir&;t t
s&@builddir@&$ac_builddir&;t t
s&@abs_builddir@&$ac_abs_builddir&;t t
s&@abs_top_builddir@&$ac_abs_top_builddir&;t t
$ac_datarootdir_hack
"
eval sed \"\$ac_sed_extra\" "$ac_file_inputs" | $AWK -f "$ac_tmp/subs.awk" \
  >$ac_tmp/out || as_fn_error $? "could not create $ac_file" "$LINENO" 5

test -z "$ac_datarootdir_hack$ac_datarootdir_seen" &&
  { ac_out=`sed -n '/\${datarootdir}/p' "$ac_tmp/out"`; test -n "$ac_out"; } &&
  { ac_out=`sed -n '/^[	 ]*datarootdir[	 ]*:*=/p' \
      "$ac_tmp/out"`; test -z "$ac_out"; } &&
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined" >&5
$as_echo "$as_me: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined" >&2;}

  rm -f "$ac_tmp/stdin"
  case $ac_file in
  -) cat "$ac_tmp/out" && rm -f "$ac_tmp/out";;
  *) rm -f "$ac_file" && mv "$ac_tmp/out" "$ac_file";;
  esac \
  || as_fn_error $? "could not create $ac_file" "$LINENO" 5
 ;;
  :H)
  #
  # CONFIG_HEADER
  #
  if test x"$ac_file" != x-; then
    {
      $as_echo "/* $configure_input  */" \
      && eval '$AWK -f "$ac_tmp/defines.awk"' "$ac_file_inputs"
    } >"$ac_tmp/config.h" \
      || as_fn_error $? "could not create $ac_file" "$LINENO" 5
    if diff "$ac_file" "$ac_tmp/config.h" >/dev/null 2>&1; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: $ac_file is unchanged" >&5
$as_echo "$as_me: $ac_file is unchanged" >&6;}
    else
      rm -f "$ac_file"
      mv "$ac_tmp/config.h" "$ac_file" \
	|| as_fn_error $? "could not create $ac_file" "$LINENO" 5
    fi
  else
    $as_echo "/* $configure_input  */" \
      && eval '$AWK -f "$ac_tmp/defines.awk"' "$ac_file_inputs" \
      || as_fn_error $? "could not create -" "$LINENO" 5
  fi
 ;;


  esac

done # for ac_tag


as_fn_exit 0
_ACEOF
ac_clean_files=$ac_clean_files_save

test $ac_write_fail = 0 ||
  as_fn_error $? "write failure creating $CONFIG_STATUS" "$LINENO" 5


# configure is writing to config.log, and then calls config.status.
# config.status does its own redirection, appending to config.log.
# Unfortunately, on DOS this fails, as config.log is still kept open
# by configure, so config.status won't be able to write to it; its
# output is simply discarded.  So we exec the FD to /dev/null,
# effectively closing config.log, so it can be properly (re)opened and
# appended to by config.status.  When coming back to configure, we
# need to make the FD available again.
if test "$no_create" != yes; then
  ac_cs_success=:
  ac_config_status_args=
  test "$silent" = yes &&
    ac_config_status_args="$ac_config_status_args --quiet"
  exec 5>/dev/null
  $SHELL $CONFIG_STATUS $ac_config_status_args || ac_cs_success=false
  exec 5>>config.log
  # Use ||, not &&, to avoid exiting from the if with $? = 1, which
  # would make configure fail if this is the last instruction.
  $ac_cs_success || as_fn_exit 1
fi
if test -n "$ac_unrecognized_opts" && test "$enable_option_checking" != no; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unrecognized options: $ac_unrecognized_opts" >&5
$as_echo "$as_me: WARNING: unrecognized options: $ac_unrecognized_opts" >&2;}
fi

